package au.wow.ngbomain.tests;

import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.EnhancedArticleLookUpObjects;
import au.wow.ngbomain.objects.StockAdjObjects;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.EnhancedArticleLookUpPage;
import au.wow.ngbomain.pages.StockAdjPage;
import au.wow.ngbomain.pages.WoWLoginPage;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;

public class StockAdjustmentTests extends TestBase{

	private Logger log = LogManager.getLogger(StockAdjustmentTests.class);
	TestStatus status;
	SQLWrapper sql = new SQLWrapper(log);
	WoWLoginPage loginPage;
	StockAdjObjects objStockAdj;
	StockAdjPage objStockAdjPage;
	BasePage BaseObj;
	CommonFunctions common;
	StoreProperties storeprop;
	EnhancedArticleLookUpPage objEnhancedarticleLookUpPage;
	EnhancedArticleLookUpObjects objEnhancedArticleLookup;
	public static String mName="";
	public static String cName ="";
	public static ArrayList<String> methodList = new ArrayList<String>();
	public static ExtentTest extLogger;
	public static ExtentReports extReport;	
	public static boolean isExceptionCaptured=false;
	public static XMLDataReader data;
    int count=0;		
	int MCcount=0;
	public static WebDriver driver;
	public static boolean isFirstTest=true;
	

	public StockAdjustmentTests(){
		super.log=log;
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment")
	public void verifyStockAdjArt() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{		
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try
		{
			navToStockAdj(status);
			String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,ranArtPLU,lastrcvdqty=null,pack_size=null;
			do{
				String all_articles_sql = data.getText("allarticles");
				results = sql.executeQuery(getContext(), all_articles_sql);
				int num = common.RandomFromDB(results);
				ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+ranArticle+";;;Info");
				ranArticleDesc = results.get(num).get(1).toString();
				articleOM = results.get(num).get(7).toString();
				UOM = results.get(num).get(5).toString();
				store_soh = results.get(num).get(8).toString();
				ranArtPLU = results.get(num).get(6).toString();
				pack_size = results.get(num).get(10).toString();
				pack_size = decimalFormat(pack_size);
				if(UOM.equals("KG")){
					storeSOH = store_soh;
					soh_ea = results.get(num).get(9).toString();
					SOH_EA = decimalFormat(soh_ea);
				}
				else{
					storeSOH = decimalFormat(store_soh);
				}
			}while(results.size()==0);
			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			//int index = common.RandomFromDB(list_reasonCodes);
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String enteredSoh = data.getText("sohvalidation");

			String cs = objStockAdjPage.fnStockAdjustment(objStockAdj,myList,ranArticle,driver);
			objStockAdjPage.fnHistory(objStockAdj,results,driver);
			objStockAdjPage.fnAdjustSoh(objStockAdj,myList,test,enteredSoh,cs,driver);
			waitFor(1);
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment")
	public void verifyStockAdjDesc() //throws IOException, AWTException, SQLException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List recentHistoryList = new ArrayList();
		List<List<Object>> recentHisList = new ArrayList<List<Object>>();
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try{
			navToStockAdj(status);
			String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,lastrcvdqty,pack_size=null;
			do{
				String all_articles_sql = data.getText("allarticles");
				results = sql.executeQuery(getContext(), all_articles_sql);
				int num = common.RandomFromDB(results);
				ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+ranArticle+";;;Info");
				ranArticleDesc = results.get(num).get(1).toString();
				articleOM = results.get(num).get(7).toString();
				store_soh = results.get(num).get(8).toString();
				UOM = results.get(num).get(5).toString();
				pack_size = results.get(num).get(10).toString();
				pack_size = decimalFormat(pack_size);
				if(UOM.equals("KG") && UOM.equals("EA")){
					storeSOH = store_soh;
					soh_ea = results.get(num).get(9).toString();
					SOH_EA = decimalFormat(soh_ea);
				}
				else{
					storeSOH = decimalFormat(store_soh);
				}
			}while(results.size()==0);
			if(UOM.equals("KG")){
				storeSOH = store_soh;
			}
			else{
				storeSOH = decimalFormat(store_soh);
			}
			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Theft:+Stock Correction:-Stock Correction:PI Verify:Sample Stock:Rvse Sample Stock:Rvse Theft");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String enteredSoh = data.getText("validation99");
			String cs = objStockAdjPage.fnStockAdjustment(objStockAdj,myList,ranArticleDesc,driver);
			objStockAdjPage.fnAdjustSoh(objStockAdj,myList,test,enteredSoh,cs,driver);
			waitFor(2);
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);

			String recentHissohOrig = results.get(0).get(1).toString();
			String recentHisAdjusted = results.get(0).get(2).toString();
			String recentHisReason = results.get(0).get(4).toString();
			String recentHisusrname = results.get(0).get(6).toString();
			String recentHisadjDate = results.get(0).get(7).toString();
			String recentHisadjTime = results.get(0).get(8).toString();
			recentHissohOrig = decimalFormat(recentHissohOrig);
			recentHisAdjusted =decimalFormat(recentHisAdjusted);

			recentHistoryList.add(recentHisReason);
			recentHistoryList.add(recentHissohOrig);
			recentHistoryList.add(recentHisAdjusted);
			recentHistoryList.add(recentHisusrname);
			recentHistoryList.add(recentHisadjDate);
			recentHistoryList.add(recentHisadjTime);
			recentHisList.add(recentHistoryList);

			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment")
	public void verifyStockAdjPLU() //throws IOException, AWTException, SQLException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		String ranArticle,ranArticleDesc,articleOM,ranArtPLU,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,lastrcvdqty,pack_size=null,all_articles_sql;
		all_articles_sql = data.getText("zbakarticles");
		results = sql.executeQuery(getContext(), all_articles_sql);
		if(results.size()!=0){

			do{
				all_articles_sql = data.getText("zbakarticles");

				results = sql.executeQuery(getContext(), all_articles_sql);
				int num = common.RandomFromDB(results);
				ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+ranArticle+";;;Info");
				ranArticleDesc = results.get(num).get(1).toString();
				articleOM = results.get(num).get(7).toString();
				UOM = results.get(num).get(5).toString();
				store_soh = results.get(num).get(8).toString();

				ranArtPLU = results.get(num).get(6).toString();
				pack_size = results.get(num).get(10).toString();
				pack_size = decimalFormat(pack_size);
				if(UOM.equals("KG")){
					storeSOH = store_soh;
					soh_ea = results.get(num).get(9).toString();
					SOH_EA = decimalFormat(soh_ea);
				}
				else{
					//storeSOH = decimalFormat(store_soh);
					storeSOH = store_soh;
				}
			}while(ranArtPLU.equals(" "));
			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String enteredSoh = data.getText("sohvalidation");
			objStockAdjPage.fnStockAdjustment(objStockAdj,myList,ranArtPLU,driver);
			waitFor(2);
		}
		else{

			htmlToExtent(cName,mName,extLogger,driver,"No articles with PLUCODE is found in the backend for 'ZBAK' category;;;Fail");
			//Report_AddStep("testcase","No articles with PLUCODE is found in the backend for 'ZBAK' category","","", "Pass");
		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
	}catch(Exception e){
		isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
		htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
	}
	status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment")
	public void verifyStockAdjEAN() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try{
			navToStockAdj(status);
			String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH=null,soh_ea=null,SOH_EA = null,ranArtPLU,ranArticleEAN,lastrcvdqty,pack_size=null,all_articles_sql;
			all_articles_sql = data.getText("zbakarticles");
			results = sql.executeQuery(getContext(), all_articles_sql);
			if(results.size()!=0){
				all_articles_sql = data.getText("zbakarticles");
				results = sql.executeQuery(getContext(), all_articles_sql);
				if(results.size()!=0){

					do{
						all_articles_sql = data.getText("zbakarticles");
						results = sql.executeQuery(getContext(), all_articles_sql);
						int num = common.RandomFromDB(results);
						ranArticle = results.get(num).get(0).toString();
						htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+ranArticle+";;;Info");
						ranArticleDesc = results.get(num).get(1).toString();
						articleOM = results.get(num).get(7).toString();
						UOM = results.get(num).get(5).toString();
						store_soh = results.get(num).get(8).toString();
						ranArticleEAN = results.get(num).get(4).toString();

						if(UOM.equals("KG")){
							storeSOH = store_soh;
							//storeSOH1 = store_soh1;//meenu
							soh_ea = results.get(num).get(9).toString();

							//SOH_EA = (double) Math.round(soh_ea);
							SOH_EA = decimalFormat(soh_ea);

						}
						else{
							storeSOH = decimalFormat(store_soh);
						}
					}while(results.size()==0);
					List myList = new ArrayList();
					myList.add(ranArticle);
					myList.add(ranArticleDesc);
					myList.add(storeSOH);
					myList.add(SOH_EA);
					myList.add(UOM);
					waitFor(1);
					List<List<Object>> list_reasonCodes = StringToListCreation("Stock Write-Off");
					int listCnt = list_reasonCodes.get(0).size();
					int index = (int)(Math.random() * listCnt);
					String reasonCode = list_reasonCodes.get(0).get(index).toString();
					htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
					String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
					results = sql.executeQuery(getContext(), mulFactor_sql);
					String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
					myList.add(reasonCode);
					myList.add(multFactor);
					myList.add(articleOM);
					String allCharityCodes_sql = data.getText("charitycodes");
					results = sql.executeQuery(getContext(), allCharityCodes_sql);
					int num3 = common.RandomFromDB(results);
					String charityCode = results.get(num3).get(1).toString();
					myList.add(charityCode);
					String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
					results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
					if(results.size()==0){
						lastrcvdqty ="0";
					}
					else{
						lastrcvdqty = results.get(0).get(1).toString();
						String part[] =  lastrcvdqty.split(" ");
						lastrcvdqty = part[0];
						lastrcvdqty = decimalFormat(lastrcvdqty);
						lastrcvdqty = lastrcvdqty+" "+part[1];
					}
					myList.add(lastrcvdqty);
					String history_sql = data.getText("history").replace("article_num", ranArticle);
					results = sql.executeQuery(getContext(), history_sql);
					String test=data.getText("testcase");
					String enteredSoh = data.getText("validation999");
					waitFor(2);
					String cs = objStockAdjPage.fnStockAdjustment(objStockAdj,myList,ranArticleEAN,driver);
					//objStockAdjPage.fnHistory(objStockAdj,results);//meenu
					objStockAdjPage.fnAdjustSoh(objStockAdj,myList,test,enteredSoh,cs,driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver,"No articles is found in the backend for 'ZBAK' category;;;Pass");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"No articles is found in the backend for 'ZBAK' category;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check WareHouse Under/Over Delivery")
	public void checkWHdelivery() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{			
		if(stockAdjArtpreCount2==-1){MCcount=MCcount+19;}
		List<List<Object>> results;
		List<List<Object>> baseUOM_results;
		List<List<Object>> packsize_results;
		List<List<Object>> overdel_results;
		List<List<Object>> underdel_results;
		List<List<Object>> transctionID_results;
		String quantity_appln=null;
		int quantity=0;
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		String ranArticle;	
		String articles_sql = data.getText("allarticles"); //get article which has order with 1 dispatch quantity row
		results = sql.executeQuery(getContext(), articles_sql);	// to get article number
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = /*"348834";*/results.get(num).get(0).toString(); //enter the column number
			String o_no = /*"8459553";*/results.get(num).get(1).toString(); 
			click(objStockAdj.sohSearchBox);
			objStockAdj.sohSearchBox.sendKeys(ranArticle);
			click(objStockAdj.sohArticleSearch);
			waitForJSandJQueryToLoad(driver);

			if(objStockAdj.kgArticlelist.size()==0)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article - "+ranArticle+" and order number - "+o_no+";;;Pass");
				//Report_AddStep("testcase", "Article - "+ranArticle+" and order number - "+o_no+"","","", "Pass");
				selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Under Delivery");
				htmlToExtent(cName,mName,extLogger,driver,"User can able to select W/hse Under Delivery in dropdown;;;Pass");
				//Report_AddStep("testcase", "User can able to select W/hse Under Delivery in dropdown","","", "Pass");  //--1
				click(objStockAdj.orderSearch);
				String order_no = objStockAdjPage.orderListTable(objStockAdj,1,ranArticle,o_no,driver); 
				String dispatchQty_sql = data.getText("dispatchQTY").replace("art_no", ranArticle).replace("orderno", order_no); //to know dispatch quantity
				results = sql.executeQuery(getContext(), dispatchQty_sql);
				String dispatch_qty="";
				if(results.size()==0)
				{
					dispatchQty_sql = data.getText("dispatchQTY1").replace("art_no", ranArticle).replace("orderno", o_no); // to know dispatch quantity
					results = sql.executeQuery(getContext(), dispatchQty_sql);
					dispatch_qty = results.get(0).get(4).toString();
					dispatch_qty = decimalFormat(dispatch_qty);
				}else{

					dispatch_qty = results.get(0).get(2).toString();
					dispatch_qty = decimalFormat(dispatch_qty);
				}
				String baseUOM_sql = data.getText("baseUOM").replace("art_no", ranArticle); //to know base UOM
				baseUOM_results = sql.executeQuery(getContext(), baseUOM_sql);
				String UOMname=objStockAdj.adjSOHvalue.getAttribute("id"); // UOM in textbox appl
				String overdel_sql = data.getText("overdelivery").replace("art_no", ranArticle).replace("orderno", order_no); //to know qty in overdelivery
				overdel_results = sql.executeQuery(getContext(), overdel_sql);
				String underdel_sql = data.getText("underdelivery").replace("art_no", ranArticle).replace("orderno", order_no); //to know qty in overdelivery
				underdel_results = sql.executeQuery(getContext(), underdel_sql);
				String packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
				packsize_results = sql.executeQuery(getContext(), packsize_sql);

				if(results.size()==1)
				{
					String overdel = null;
					String underdel =null;
					int overdel_qty = 0;
					int underdel_qty=0;
					String UOM = results.get(0).get(5).toString(); //inside textbox
					//String dispatch_qty=results.get(0).get(2).toString();	
					//dispatch_qty = decimalFormat(dispatch_qty);
					int dispatch=Integer.parseInt(dispatch_qty);
					if(objStockAdj.endSOHValue.isDisplayed())
					{
						int endSOHvalue=objStockAdjPage.endSOHvalue(objStockAdj,baseUOM_results,driver);
						String baseUOM =objStockAdjPage.baseUOM(objStockAdj,baseUOM_results,driver);
						String packsize=packsize_results.get(0).get(2).toString(); 
						packsize = decimalFormat(packsize);
						int pack_size=Integer.parseInt(packsize);
						if(overdel_results.size()!=0)
						{
							overdel = overdel_results.get(0).get(2).toString();
							overdel = decimalFormat(overdel);
							overdel_qty=Integer.parseInt(overdel);
						}
						else
						{
							overdel_qty=0;
						}
						if(underdel_results.size()!=0)
						{
							underdel = underdel_results.get(0).get(2).toString();
							underdel = decimalFormat(underdel);
							underdel_qty=Integer.parseInt(underdel);
						}
						else
						{
							underdel_qty=0;
						}				
						int deliver_qty = ((dispatch+overdel_qty)-underdel_qty);
						if((deliver_qty==0)||(deliver_qty<0))
						{
							htmlToExtent(cName,mName,extLogger,driver,"UnderDelivery qty - "+underdel_qty+" , OverDelivery qty - "+overdel_qty+" , Dispatch qty - "+dispatch+" , UnderDelivery can be done only for "+deliver_qty+" quantity;;;Pass");
							//Report_AddStep("testcase", "UnderDelivery qty - "+underdel_qty+" , OverDelivery qty - "+overdel_qty+" , Dispatch qty - "+dispatch+" , UnderDelivery can be done only for "+deliver_qty+" quantity","","", "Pass");
							htmlToExtent(cName,mName,extLogger,driver," Warehouse under delivery cannot be performed, since it is equal to dispatch  quantity.Please perform overdelivery now to continue!!;;;Pass");
							//Report_AddStep("testcase", " Warehouse under delivery cannot be performed, since it is equal to dispatch  quantity.Please perform overdelivery now to continue!!","","", "Pass");
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"UnderDelivery qty - "+underdel_qty+" , OverDelivery qty - "+overdel_qty+" , Dispatch qty - "+dispatch+" , UnderDelivery can be done only for "+deliver_qty+" quantity;;;Pass");
							//Report_AddStep("testcase", "UnderDelivery qty - "+underdel_qty+" , OverDelivery qty - "+overdel_qty+" , Dispatch qty - "+dispatch+" , UnderDelivery can be done only for "+deliver_qty+" quantity","","", "Pass"); 
							quantity = objStockAdjPage.adjustSOH_whDelivery(objStockAdj,dispatch_qty,UOM,2,endSOHvalue,UOMname,pack_size,deliver_qty,driver);  // entering adjusted SOH value more than dispatch quantity
							htmlToExtent(cName,mName,extLogger,driver,"UnderDelivery done only for "+quantity+" quantity;;;Pass");
							//Report_AddStep("testcase", "UnderDelivery done only for "+quantity+" quantity","","", "Pass");
							quantity=quantity+underdel_qty;
							objStockAdjPage.authcode(objStockAdj,500);	
							objStockAdjPage.saveSOH(objStockAdj,2,driver);
							//objStockAdjPage.saveSOH(objStockAdj,1);
							underdel_results = sql.executeQuery(getContext(), underdel_sql);
							underdel = underdel_results.get(0).get(2).toString();
							underdel = decimalFormat(underdel);
							quantity_appln = ""+quantity;
							if(quantity_appln.equals(underdel))
							{
								htmlToExtent(cName,mName,extLogger,driver,"Adjusted SOH matched with DB;"+quantity_appln+";"+underdel+";Pass");
								//Report_AddStep("testcase", "Adjusted SOH matched with DB",quantity_appln,underdel, "Pass"); //--11
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver,"Adjusted SOH conflicts with DB;"+quantity_appln+";"+underdel+";Fail");
								//Report_AddStep("testcase", "Adjusted SOH conflicts with DB",quantity_appln,underdel, "Fail");
							}				
							String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
							results = sql.executeQuery(getContext(), recentHistory_sql);
							List myList = new ArrayList();
							myList.add(ranArticle);
							List<List<Object>> recentHisList = objStockAdjPage.RHdetails(results);
							objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);		

							String History_sql = data.getText("history").replace("article_num", ranArticle);
							results = sql.executeQuery(getContext(), History_sql);
							objStockAdjPage.History(objStockAdj, myList,results,driver);

						}

						objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
						click(objStockAdj.sohSearchBox);
						objStockAdj.sohSearchBox.sendKeys(ranArticle);
						click(objStockAdj.sohArticleSearch);
						waitForJSandJQueryToLoad(driver);			
						selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Over Delivery");
						htmlToExtent(cName,mName,extLogger,driver, "User can able to select W/hse over Delivery in dropdown;;;Pass");
						//Report_AddStep("testcase", "User can able to select W/hse over Delivery in dropdown","","", "Pass");  //--1
						click(objStockAdj.orderSearch);
						order_no = objStockAdjPage.orderListTable(objStockAdj,2,ranArticle,o_no,driver); 
						overdel_results = sql.executeQuery(getContext(), overdel_sql);
						if(overdel_results.size()!=0)
						{
							overdel = overdel_results.get(0).get(2).toString();
							overdel = decimalFormat(overdel);
							overdel_qty=Integer.parseInt(overdel);
						}
						else
						{
							overdel_qty=0;
						}
						deliver_qty = overdel_qty;
						baseUOM_results = sql.executeQuery(getContext(), baseUOM_sql);
						endSOHvalue=objStockAdjPage.endSOHvalue(objStockAdj,baseUOM_results,driver);
						baseUOM =objStockAdjPage.baseUOM(objStockAdj,baseUOM_results,driver);
						htmlToExtent(cName,mName,extLogger,driver,"UnderDelivery qty - "+underdel+" , OverDelivery qty - "+overdel_qty+" , Dispatch qty - "+dispatch+";;;Pass");
						//Report_AddStep("testcase", "UnderDelivery qty - "+underdel+" , OverDelivery qty - "+overdel_qty+" , Dispatch qty - "+dispatch+"","","", "Pass");
						quantity = objStockAdjPage.adjustSOH_whDelivery(objStockAdj,dispatch_qty,UOM,1,endSOHvalue,UOMname,pack_size,deliver_qty,driver);
						htmlToExtent(cName,mName,extLogger,driver,"OverDelivery done only for "+quantity+" quantity;;;Pass");
						//Report_AddStep("testcase", "OverDelivery done only for "+quantity+" quantity","","", "Pass");
						objStockAdjPage.authcode(objStockAdj,500);	
						objStockAdjPage.saveSOH(objStockAdj,1,driver);
						htmlToExtent(cName,mName,extLogger,driver,"User is not restricted with order dispatche quantity for warehouse over delivery;;;Pass");
						//Report_AddStep("testcase", "User is not restricted with order dispatche quantity for warehouse over delivery","","", "Pass"); //--7
						overdel_results = sql.executeQuery(getContext(), overdel_sql);
						overdel = overdel_results.get(0).get(2).toString();
						overdel = decimalFormat(overdel);
						quantity_appln = ""+quantity;
						if(quantity_appln.equals(overdel))
						{
							htmlToExtent(cName,mName,extLogger,driver,"Adjusted SOH matched with DB;"+quantity_appln+";"+overdel+";Pass");
							//Report_AddStep("testcase", "Adjusted SOH matched with DB",quantity_appln,overdel, "Pass"); //--11
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Adjusted SOH conflicts with DB;"+quantity_appln+";"+overdel+";Fail");
							//Report_AddStep("testcase", "Adjusted SOH conflicts with DB",quantity_appln,overdel, "Fail");
						}
						String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), recentHistory_sql);
						List<List<Object>> recentHisList = objStockAdjPage.RHdetails(results);
						List myList = new ArrayList();
						myList.add(ranArticle);
						objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

						String History_sql = data.getText("history").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), History_sql);
						objStockAdjPage.History(objStockAdj, myList,results,driver);

						objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
						click(objStockAdj.sohSearchBox);
						objStockAdj.sohSearchBox.sendKeys(ranArticle);
						click(objStockAdj.sohArticleSearch);
						waitForJSandJQueryToLoad(driver);	
						selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Under Delivery");
						htmlToExtent(cName,mName,extLogger,driver, "User can able to select W/hse Under Delivery in dropdown;;;Pass");
						//Report_AddStep("testcase", "User can able to select W/hse Under Delivery in dropdown","","", "Pass");  //--1
						click(objStockAdj.orderSearch);
						order_no = objStockAdjPage.orderListTable(objStockAdj,2,ranArticle,o_no,driver); 
						overdel_results = sql.executeQuery(getContext(), overdel_sql);
						overdel = overdel_results.get(0).get(2).toString();
						overdel = decimalFormat(overdel);
						overdel_qty=Integer.parseInt(overdel);
						underdel_results = sql.executeQuery(getContext(), underdel_sql);
						underdel = underdel_results.get(0).get(2).toString();
						underdel = decimalFormat(underdel);
						underdel_qty=Integer.parseInt(underdel);
						deliver_qty = ((dispatch+overdel_qty)-underdel_qty);
						baseUOM_results = sql.executeQuery(getContext(), baseUOM_sql);
						endSOHvalue=objStockAdjPage.endSOHvalue(objStockAdj,baseUOM_results,driver);
						baseUOM =objStockAdjPage.baseUOM(objStockAdj,baseUOM_results,driver);
						htmlToExtent(cName,mName,extLogger,driver,"UnderDelivery qty - "+underdel+" , OverDelivery qty - "+overdel+" , Dispatch qty - "+dispatch+" , UnderDelivery can be done only for "+deliver_qty+" quantity;;;Pass");
						//Report_AddStep("testcase", "UnderDelivery qty - "+underdel+" , OverDelivery qty - "+overdel+" , Dispatch qty - "+dispatch+" , UnderDelivery can be done only for "+deliver_qty+" quantity","","", "Pass");
						quantity = objStockAdjPage.adjustSOH_whDelivery(objStockAdj,dispatch_qty,UOM,2,endSOHvalue,UOMname,pack_size,deliver_qty,driver);  // entering adjusted SOH value more than dispatch quantity
						htmlToExtent(cName,mName,extLogger,driver,"UnderDelivery done only for "+quantity+" quantity;;;Pass");
						//Report_AddStep("testcase", "UnderDelivery done only for "+quantity+" quantity","","", "Pass");
						quantity=quantity+underdel_qty;
						objStockAdjPage.authcode(objStockAdj,500);	
						objStockAdjPage.saveSOH(objStockAdj,2,driver);
						underdel_results = sql.executeQuery(getContext(), underdel_sql);
						underdel = underdel_results.get(0).get(2).toString();
						underdel = decimalFormat(underdel);
						quantity_appln = ""+quantity;
						if(quantity_appln.equals(underdel))
						{
							htmlToExtent(cName,mName,extLogger,driver,"Adjusted SOH matched with DB;"+quantity_appln+";"+underdel+";Pass");
							//Report_AddStep("testcase", "Adjusted SOH matched with DB",quantity_appln,underdel, "Pass"); --11
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Adjusted SOH conflicts with DB;"+quantity_appln+";"+underdel+";Fail");
							//Report_AddStep("testcase", "Adjusted SOH conflicts with DB",quantity_appln,underdel, "Fail");
						}
						recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), recentHistory_sql);
						recentHisList = objStockAdjPage.RHdetails(results);
						objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

						History_sql = data.getText("history").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), History_sql);
						objStockAdjPage.History(objStockAdj, myList,results,driver);

					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"End SOH value not present for the article "+ranArticle+" in application;;;Fail");
						//Report_AddStep("testcase", "End SOH value not present for the article "+ranArticle+" in application","","", "Fail");	
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"This order number "+order_no+" is applicable twice for "+ranArticle+" article;;;Pass");
					//Report_AddStep("testcase", "This order number "+order_no+" is applicable twice for "+ranArticle+" article","","", "Pass");
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,""+ranArticle+" article is KG article;;;Pass");
				//Report_AddStep("testcase", ""+ranArticle+" article is KG article","","", "Pass");

			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No article found!!!;;;Fail");
			//Report_AddStep("testcase", "No article found!!!","","", "Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check WareHouse Delivery")
	public void wareHouseemptyORDERlist() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();	
		try
		{
		navToStockAdj(status);
		String ranArticle;	
		String articles_sql = data.getText("allarticles"); //get article which has order with 1 dispatch quantity row
		results = sql.executeQuery(getContext(), articles_sql);	// to get article number
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			click(objStockAdj.sohSearchBox);
			objStockAdj.sohSearchBox.sendKeys(ranArticle);
			click(objStockAdj.sohArticleSearch);
			waitFor(5);
			selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Under Delivery");
			click(objStockAdj.orderSearch);
			String order_no = objStockAdjPage.orderListTable(objStockAdj,1,ranArticle,"0",driver); //if order no is empty -- code
			click(objStockAdj.noORDERlistcancel);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles in DB;;;Fail");
			//Report_AddStep("testcase", "No articles in DB","","", "Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check IDT and Reverse IDT")
	public void checkNoNodeIDforIDTandRIDT() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		List<List<Object>> results;
		List<List<Object>> IDTresults;
		String node_id=null;
		String ranArticle;	
		TestStatus status = getTestStatus();	
		try
		{
		navToStockAdj(status);

		if(StoreNo.equals("3064")||StoreNo.equals("1786")||StoreNo.equals("1338")||StoreNo.equals("1108"))
		{	
			/*String nodeid_sql = data.getText("getNODEid"); 
			results = sql.executeQuery(getContext(), nodeid_sql);	//get node id
			if(results.size()!=0)
			{
				int i=0;
				do
				{				
					node_id=results.get(i).get(5).toString();
					String nodeid=node_id+"%";
					String IDTarticles_sql = data.getText("getIDTarticle").replace("nodeid", nodeid); 
					IDTresults = sql.executeQuery(getContext(), IDTarticles_sql);	// to get IDT article number
					if(IDTresults.size()!=0)
					{
						break;
					}
					i++;
				}while(i<(results.size()));*/
				String IDTarticles_sql = data.getText("getIDTarticle");
				IDTresults = sql.executeQuery(getContext(), IDTarticles_sql);	// to get IDT article number
				if(IDTresults.size()!=0)
				{
					int num = common.RandomFromDB(IDTresults);
					ranArticle = IDTresults.get(num).get(0).toString();
					click(objStockAdj.sohSearchBox);
					objStockAdj.sohSearchBox.sendKeys(ranArticle);
					click(objStockAdj.sohArticleSearch);
					waitForJSandJQueryToLoad(driver);
					if(objStockAdj.noClaimList.size()!=0)
					{
						objStockAdj.noClaim.click();
						waitForJSandJQueryToLoad(driver);
						waitFor(1);
					}
					selectByVisibleText(objStockAdj.reasonsForSOH,"IDT Purchase");	
					htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is available in drop down;;;Pass");
					//Report_AddStep("testcase", "IDT purchase is available in drop down","","", "Pass"); //--1
					if(objStockAdj.cannotrvsemsg1.size()!=0)
					{
						String msg=objStockAdj.cannotrvsemsg.getText();
						if(msg.equals("Article cannot be purchased."))
						{
							htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is not applicable since sub cateogary is not maintained in IDT matrix;;;Pass"); //--1
							//Report_AddStep("testcase", "IDT purchase is not applicable since sub cateogary is not maintained in IDT matrix","","", "Pass"); //--1
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is not applicable since "+msg+";;;Pass");
							//Report_AddStep("testcase", "IDT purchase is not applicable since "+msg+"","","", "Pass"); //--1
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is applicable even sub cateogary is not maintained in IDT matrix;;;Fail");
						//Report_AddStep("testcase", "IDT purchase is applicable even sub cateogary is not maintained in IDT matrix","","", "Fail");
					}
				}
			//}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"IDT and Reverse IDT is not applicable for BWS store;;;Pass");
			//Report_AddStep("testcase", "IDT and Reverse IDT is not applicable for BWS store","","", "Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check IDT and Reverse IDT")
	public void checkIDTandRIDT() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+17;}
		List<List<Object>> results;
		List<List<Object>> IDTresults;
		List<List<Object>> DDresults;
		List<List<Object>> baseUOM_results;
		List<List<Object>> storeSOH_results;
		List<List<Object>> packsize_results;
		List<List<Object>> IDTlimit_results;
		List<List<Object>> article_results;
		List<List<Object>> code_results;
		List<List<Object>> UN_results;
		String node_id=null;
		String nodeid=null;
		int endSOHvalue =0;
		int afterendSOHvalue =0;
		String baseUOM=null;
		int inc=0;
		int length=0;
		TestStatus status = getTestStatus();		
		try
		{
		navToStockAdj(status);
		String ranArticle;	

		if(StoreNo.equals("3064")||StoreNo.equals("1786")||StoreNo.equals("1338")||StoreNo.equals("1108"))
		{
			String nodeid_sql = data.getText("getNODEid"); 
			results = sql.executeQuery(getContext(), nodeid_sql);	//get node id
			if(results.size()!=0)
			{
				int i=0;
				do
				{				
					node_id=results.get(i).get(1).toString();				
					nodeid=node_id+"%";
					String IDTarticles_sql = data.getText("getIDTarticle").replace("nodeid", nodeid); 
					IDTresults = sql.executeQuery(getContext(), IDTarticles_sql);	// to get IDT article number
					if(IDTresults.size()!=0)
					{
						break;
					}
					i++;
				}while(i<(results.size())); 
				length=node_id.length();
				int a = length-1;
				int b = length-3;
				String todept=node_id.substring(b,length);
				if(IDTresults.size()!=0)
				{
					int num = common.RandomFromDB(IDTresults);
					ranArticle = IDTresults.get(num).get(0).toString();
					click(objStockAdj.sohSearchBox);
					objStockAdj.sohSearchBox.sendKeys(ranArticle);
					click(objStockAdj.sohArticleSearch);
					waitFor(5);
					if(objStockAdj.noClaimList.size()!=0)
					{
						objStockAdj.noClaim.click();
						waitFor(2);
					}
					if(!(objStockAdj.endSOHUom.getText()).equals("KG"))
					{
						selectByVisibleText(objStockAdj.reasonsForSOH,"Rvse IDT");
						htmlToExtent(cName,mName,extLogger,driver,"Reverse IDT is available in drop down;;;Pass");
						//Report_AddStep("testcase", "Reverse IDT is available in drop down","","", "Pass"); //--1
						String DDvalues_sql = data.getText("getDDvalues").replace("nodeid", node_id); 
						DDresults = sql.executeQuery(getContext(), DDvalues_sql);	
						DDresults = removeExtraSpaces(DDresults,3);
						if(objStockAdj.SOHUDerrorlist.size()!=0)
						{
							String reverseIDTerrormsg=objStockAdj.cannotrvsemsg.getText();
							if(reverseIDTerrormsg.equals("Item cannot be reversed, no purchase found."))
							{
								htmlToExtent(cName,mName,extLogger,driver,"Reverse IDT cannot be done since IDT is not performed for the article "+ranArticle+";;;Pass"); //--9
								//Report_AddStep("testcase", "Reverse IDT cannot be done since IDT is not performed for the article "+ranArticle+"","","", "Pass"); //--9
							}
							click(objStockAdj.noStockAdj);
						}
						else
						{
							inc++;
							objStockAdjPage.RIDT(objStockAdj, DDresults);
							click(objStockAdj.sohSearchBox);
							objStockAdj.sohSearchBox.sendKeys(ranArticle);
							click(objStockAdj.sohArticleSearch);
							waitFor(5);
						}
						selectByVisibleText(objStockAdj.reasonsForSOH,"IDT Purchase");	
						htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is available in drop down;;;Pass");
						//Report_AddStep("testcase", "IDT purchase is available in drop down","","", "Pass"); //--1
						htmlToExtent(cName,mName,extLogger,driver, "IDT purchase stock adjustment can be posted since sub cateogary of "+ranArticle+" is maintained in IDT matrix;;;Pass"); //--2
						//Report_AddStep("testcase", "IDT purchase stock adjustment can be posted since sub cateogary of "+ranArticle+" is maintained in IDT matrix","","", "Pass"); //--2
						//String DDvalues_sql = data.getText("getDDvalues").replace("nodeid", node_id); 
						//DDresults = sql.executeQuery(getContext(), DDvalues_sql);	
						//DDresults = removeExtraSpaces(DDresults,3);
						String ddselec = null;
						//String to_dept_appl = objStockAdjPage.IDTDDvalue(objStockAdj, DDresults,1); //to select drop down value
						String ddselect = objStockAdjPage.IDTDDvalue(objStockAdj, DDresults,1,ddselec,driver); //to select drop down value

						String baseUOM_sql = data.getText("baseUOM").replace("art_no", ranArticle); //to know base UOM
						baseUOM_results = sql.executeQuery(getContext(), baseUOM_sql);
						String storeSOH_sql = data.getText("baseUOMs").replace("art_no", ranArticle); //to know base UOM
						storeSOH_results = sql.executeQuery(getContext(), storeSOH_sql);

						baseUOM =objStockAdjPage.baseUOM(objStockAdj,baseUOM_results,driver); //--6

						//check - 99,999,IDT limit
						String UOMname=objStockAdj.adjSOHvalue.getAttribute("id"); // UOM in textbox
						String packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
						packsize_results = sql.executeQuery(getContext(), packsize_sql);
						String packsize=packsize_results.get(0).get(2).toString(); 
						packsize = decimalFormat(packsize);
						int pack_size=Integer.parseInt(packsize);
						int SOH99 = objStockAdjPage.warning99check(objStockAdj,pack_size,2,0,0,0,driver); //99check
						objStockAdjPage.warning999check(objStockAdj,pack_size,2,0,0,0,driver); //999check
						String IDTlimit_sql = data.getText("IDTpurchaselimit"); //to know IDT limit
						IDTlimit_results = sql.executeQuery(getContext(), IDTlimit_sql);
						String IDTsize=IDTlimit_results.get(0).get(3).toString(); 
						IDTsize = decimalFormat(IDTsize);
						int IDT_size=Integer.parseInt(IDTsize);
						objStockAdjPage.warning25check(objStockAdj,pack_size,IDT_size,0,driver);

						int SOHadjust1 = objStockAdjPage.random_no(23);
						SOHadjust1=SOHadjust1+1;
						String SOHadjust=null;
						int totalUOM=objStockAdj.adjSOHlist.size();
						if(totalUOM>2)
						{
							totalUOM=2;
						}
						endSOHvalue=objStockAdjPage.endSOHvalue(objStockAdj,storeSOH_results,driver);
						for(int l=1;l<=totalUOM;l++)
						{
							WebElement SOHenter = objStockAdjPage.lvalue(objStockAdj, l);					
							int SOH_tbe=0;		
							if(totalUOM==2)
							{
								if(l==2)
								{
									UOMname = SOHenter.getAttribute("id");
									packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
									packsize_results = sql.executeQuery(getContext(), packsize_sql);
									packsize=packsize_results.get(0).get(2).toString(); 
									packsize = decimalFormat(packsize);
									pack_size=Integer.parseInt(packsize);
									SOH_tbe=((int) Math.round(((23-Integer.parseInt(SOHadjust))/pack_size)))-1;
									if(SOH_tbe<=0)
									{
										SOH_tbe=1;
									}
									SOHadjust=""+SOH_tbe;	
									SOHenter.sendKeys(SOHadjust);
								}
							}
							if(l==1)
							{
								SOH_tbe=((int) Math.round(((objStockAdjPage.random_no(23))/pack_size)))-1;
								if(SOH_tbe<=0)
								{
									SOH_tbe=1;
								}
								SOHadjust=""+SOH_tbe;	
								SOHenter.sendKeys(SOHadjust);
							}
						}
						String afterendSOH=objStockAdj.endSOHValue.getText();
						if(afterendSOH.contains("."))
						{
							afterendSOH = afterendSOH.replaceAll("\\.?0+$","");
						}
						afterendSOHvalue = Integer.parseInt(afterendSOH);
						if(afterendSOHvalue<endSOHvalue)
						{
							htmlToExtent(cName,mName,extLogger,driver,"End SOH decreased before save in IDT;;;Pass");
							//Report_AddStep("testcase", "End SOH decreased before save in IDT","","", "Pass");
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"End SOH not decreased before save in IDT;;;Fail");
							//Report_AddStep("testcase", "End SOH not decreased before save in IDT","","", "Fail");
						}
						String commentIDT_appl = "comments for "+ranArticle+""; //check
						objStockAdj.IDTcomments.sendKeys(commentIDT_appl);

						if(inc==1)
						{
							objStockAdj.saveSOH.click(); 
							waitFor(1);
							if(objStockAdj.warning99.isDisplayed())
							{
								objStockAdj.warning99.click();//IDT limit warning alert
							}
							if(objStockAdj.stockAdjFail.isDisplayed())
							{
								String msg=objStockAdj.stockAdjFail.getText();
								if(msg.equals("Stock Adjustment Successful"))
								{
									String SOH=objStockAdj.successmsg.getText();
									String[] SOHvalue = objStockAdjPage.fromtoSOH(SOH);
									objStockAdj.msgclose.click();
									htmlToExtent(cName,mName,extLogger,driver,"Entered Adjust SOH value is successfull;"+SOHvalue[0]+";"+SOHvalue[1]+";Pass");
									//Report_AddStep("testcase", "Entered Adjust SOH value is successfull",SOHvalue[0],SOHvalue[1], "Pass");							
									/*waitFor(4);
									if(objStockAdj.msgclose1.size()==1)
									{
										objStockAdj.msgclose.click();
									}
									else
									{
										objStockAdj.msgclose.click();
									}*/
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver,"Entered Adjust SOH value is not successfull;;;Fail");
									//Report_AddStep("testcase", "Entered Adjust SOH value is not successfull","","", "Fail");
									waitFor(4);
									objStockAdj.msgclose.click();
								}
							}
						}
						else
						{
							objStockAdjPage.saveSOH(objStockAdj,3,driver);
						}
						//objStockAdj.msgclose.click();

						if(objStockAdj.msgclose.isDisplayed()){
							objStockAdj.msgclose.click();
							waitFor(1);
						}
						
						String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), recentHistory_sql);
						List myList = new ArrayList();
						myList.add(ranArticle);
						List<List<Object>> recentHisList = objStockAdjPage.RHdetails(results);
						String[] td = objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);	

						String transsid = null;
						if(td[0].contains("/"))
						{					
							String[] t1=td[0].split("/");
							transsid=t1[2]+t1[1]+t1[0]+td[1]+"00000000";				
						}

						String tIDidt_sql = data.getText("gettransactionID").replace("tID", transsid).replace("art_no", ranArticle);
						results = sql.executeQuery(getContext(), tIDidt_sql);
						String tranIDidt=results.get(0).get(1).toString();
						//System.out.println("idt - " +tranIDidt);

						String History_sql = data.getText("history").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), History_sql);
						objStockAdjPage.History(objStockAdj, myList,results,driver);

						String tID = objStockAdjPage.checkreverseIDT(objStockAdj, endSOHvalue, afterendSOHvalue, ranArticle, baseUOM, DDresults,0,ddselect,driver);

						if(tID.contains("/"))
						{
							String[] t=tID.split(" ");					
							String[] t1=t[0].split("/");
							String t2=t[1].replace(":", "");
							tID=t1[2]+t1[1]+t1[0]+t2+"00000000";				
						}
						String IDTcomment_sql = data.getText("IDTcomment").replace("transactionID", tID);
						results = sql.executeQuery(getContext(), IDTcomment_sql);
						if(results.size()!=0)
						{
						String IDTcomment_DB = results.get(0).get(0).toString();
						removeExtraSpaces(results, 0);
						if(IDTcomment_DB.equals(commentIDT_appl))
						{
							htmlToExtent(cName,mName,extLogger,driver,"comments added succesfully in DB for IDT;;;Pass");
							//Report_AddStep("testcase", "comments added succesfully in DB for IDT","","", "Pass");
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "comments not added succesfully in DB for IDT;;;Pass");
							//Report_AddStep("testcase", "comments not added succesfully in DB for IDT","","", "Pass");
						}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "comments not added succesfully in DB for IDT;;;Fail");
						}
						htmlToExtent(cName,mName,extLogger,driver, "*****Backend Validations*****;;;Pass");
						//Report_AddStep("testcase", "*****Backend Validations*****","","", "");
						String tID_sql = data.getText("gettransactionID").replace("tID", tID).replace("art_no", ranArticle);
						results = sql.executeQuery(getContext(), tID_sql);
						String store_no=results.get(0).get(0).toString();
						String tranID=results.get(0).get(1).toString();
						String SAPid=results.get(0).get(2).toString();
						String RC_sql = data.getText("getreasoncode");
						results = sql.executeQuery(getContext(), RC_sql);
						String RC=results.get(0).get(0).toString();
						String BWART=results.get(0).get(3).toString();
						String fromdept_sql = data.getText("getfromdept").replace("nodeid", node_id);
						results = sql.executeQuery(getContext(), fromdept_sql);
						String fromdept=results.get(0).get(1).toString();
						String article_sql = data.getText("verifyarticle").replace("tranid", tranID);
						article_results = sql.executeQuery(getContext(), article_sql);
						String code_sql = data.getText("verifycode").replace("tranid", tranID);
						code_results = sql.executeQuery(getContext(), code_sql);
						String UN_sql = data.getText("verifyusername").replace("tranid", tranID);
						UN_results = sql.executeQuery(getContext(), UN_sql);
						//System.out.println(tranID);
						String userName = getContext().getStringProperty("username");
						objStockAdjPage.backendverification(objStockAdj,ranArticle,store_no,tranID,SAPid,RC,BWART,fromdept,article_results,code_results,UN_results,endSOHvalue,afterendSOHvalue,baseUOM,todept,driver,userName);
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,""+ranArticle+" article is KG article;;;Pass");
						//Report_AddStep("testcase", ""+ranArticle+" article is KG article","","", "Pass");

					}
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No Sub cateogary available in DB;;;Pass");
				//Report_AddStep("testcase", "No Sub cateogary available in DB","","", "Pass");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"IDT and reverse IDT is not applicable for BWS store;;;Pass");
			//Report_AddStep("testcase", "IDT and reverse IDT is not applicable for BWS store","","", "Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check IDT and Reverse IDT for weighted articles")
	public void checkIDTandRIDT_weighted() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{	
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> IDTresults;
		List<List<Object>> DDresults;
		List<List<Object>> baseUOM_results;
		List<List<Object>> storeSOH_results;
		List<List<Object>> packsize_results;
		List<List<Object>> IDTlimit_results;
		List<List<Object>> article_results;
		List<List<Object>> code_results;
		List<List<Object>> UN_results;
		String node_id=null;
		String nodeid=null;
		int endSOHvalue =0;
		int afterendSOHvalue =0;
		String baseUOM=null;
		int inc=0;
		int length=0;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		String ranArticle;	

		if(StoreNo.equals("3064")||StoreNo.equals("1786")||StoreNo.equals("1338")||StoreNo.equals("1108"))

		{
			String IDTarticles_sql = data.getText("getart"); 
			IDTresults = sql.executeQuery(getContext(), IDTarticles_sql);	//get node id
			if(IDTresults.size()!=0)
			{
				int num = common.RandomFromDB(IDTresults);
				ranArticle = IDTresults.get(num).get(0).toString();
				//ranArticle="797129";
				click(objStockAdj.sohSearchBox);
				objStockAdj.sohSearchBox.sendKeys(ranArticle);
				click(objStockAdj.sohArticleSearch);
				waitFor(5);
				if(objStockAdj.noClaimList.size()!=0)
				{
					objStockAdj.noClaim.click();
					waitFor(2);
				}
				selectByVisibleText(objStockAdj.reasonsForSOH,"Rvse IDT");	
				htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is available in drop down;;;Pass");
				//Report_AddStep("testcase", "Reverse IDT is available in drop down","","", "Pass"); //--1
				/*String DDvalues_sql = data.getText("getDDvalues").replace("nodeid", node_id); 
			DDresults = sql.executeQuery(getContext(), DDvalues_sql);	
			DDresults = removeExtraSpaces(DDresults,3);*/
				if(objStockAdj.SOHUDerrorlist.size()!=0)
				{
					String reverseIDTerrormsg=objStockAdj.cannotrvsemsg.getText();
					if(reverseIDTerrormsg.equals("Item cannot be reversed, no purchase found."))
					{
						htmlToExtent(cName,mName,extLogger,driver,"Reverse IDT cannot be done since IDT is not performed for the article "+ranArticle+";;;Pass"); //--9
						//Report_AddStep("testcase", "Reverse IDT cannot be done since IDT is not performed for the article "+ranArticle+"","","", "Pass"); //--9
					}
					click(objStockAdj.noStockAdj);
				}
				else
				{
					inc++;
					selectByIndex(objStockAdj.subcatDD1,1);	
					selectByIndex(objStockAdj.idtToQtyList, 1); //////checkkk
					objStockAdjPage.saveSOH(objStockAdj,4,driver);
					//objStockAdjPage.RIDT(objStockAdj, DDresults);
					click(objStockAdj.sohSearchBox);
					objStockAdj.sohSearchBox.sendKeys(ranArticle);
					click(objStockAdj.sohArticleSearch);
					waitFor(5);
				}
				selectByVisibleText(objStockAdj.reasonsForSOH,"IDT Purchase");	
				htmlToExtent(cName,mName,extLogger,driver, "IDT purchase is available in drop down;;;Pass");
				//Report_AddStep("testcase", "IDT purchase is available in drop down","","", "Pass"); //--1
				htmlToExtent(cName,mName,extLogger,driver,"IDT purchase stock adjustment can be posted since sub cateogary of "+ranArticle+" is maintained in IDT matrix;;;Pass"); //--2
				//Report_AddStep("testcase", "IDT purchase stock adjustment can be posted since sub cateogary of "+ranArticle+" is maintained in IDT matrix","","", "Pass"); //--2
				//String DDvalues_sql = data.getText("getDDvalues").replace("nodeid", node_id); 
				//DDresults = sql.executeQuery(getContext(), DDvalues_sql);	
				//DDresults = removeExtraSpaces(DDresults,3);

				//String to_dept_appl = objStockAdjPage.IDTDDvalue(objStockAdj, DDresults,1); //to select drop down value
				selectByIndex(objStockAdj.subcatDD,1);	
				String dd = getText(objStockAdj.IDTdd);

				String baseUOM_sql = data.getText("baseUOM").replace("art_no", ranArticle); //to know base UOM
				baseUOM_results = sql.executeQuery(getContext(), baseUOM_sql);
				String storeSOH_sql = data.getText("baseUOMs").replace("art_no", ranArticle); //to know base UOM
				storeSOH_results = sql.executeQuery(getContext(), storeSOH_sql);

				baseUOM =objStockAdjPage.baseUOM(objStockAdj,baseUOM_results,driver); //--6

				//check - 99,999,IDT limit
				String UOMname=objStockAdj.adjSOHvalue_wt.getAttribute("id"); // UOM in textbox
				String packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
				packsize_results = sql.executeQuery(getContext(), packsize_sql);
				String packsize=packsize_results.get(0).get(2).toString(); 
				packsize = decimalFormat(packsize);
				int pack_size=Integer.parseInt(packsize);
				int SOH99 = objStockAdjPage.warning99check(objStockAdj,pack_size,2,1,0,0,driver); //99check
				objStockAdjPage.warning999check(objStockAdj,pack_size,2,1,0,0,driver); //999check
				String IDTlimit_sql = data.getText("IDTpurchaselimit"); //to know IDT limit
				IDTlimit_results = sql.executeQuery(getContext(), IDTlimit_sql);
				String IDTsize=IDTlimit_results.get(0).get(3).toString(); 
				IDTsize = decimalFormat(IDTsize);
				int IDT_size=Integer.parseInt(IDTsize);
				objStockAdjPage.warning25check(objStockAdj,pack_size,IDT_size,1,driver);

				int SOHadjust1 = objStockAdjPage.random_no(23);
				SOHadjust1=SOHadjust1+1;
				String SOHadjust=null;
				int totalUOM=objStockAdj.adjSOHlist.size();
				if(totalUOM>2)
				{
					totalUOM=2;
				}
				endSOHvalue=objStockAdjPage.endSOHvalue(objStockAdj,storeSOH_results,driver);
				for(int l=1;l<=totalUOM;l++)
				{
					WebElement SOHenter = objStockAdjPage.mvalue(objStockAdj, l);					
					int SOH_tbe=0;		
					if(totalUOM==2)
					{
						if(l==2)
						{
							UOMname = SOHenter.getAttribute("id");
							packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
							packsize_results = sql.executeQuery(getContext(), packsize_sql);
							packsize=packsize_results.get(0).get(2).toString(); 
							packsize = decimalFormat(packsize);
							pack_size=Integer.parseInt(packsize);
							SOH_tbe=((int) Math.round(((23-Integer.parseInt(SOHadjust))/pack_size)))-1;
							if(SOH_tbe<=0)
							{
								SOH_tbe=1;
							}
							SOHadjust=""+SOH_tbe;
							SOHadjust =SOHadjust+".";
							SOHenter.sendKeys(SOHadjust);
						}
					}
					if(l==1)
					{
						SOH_tbe=((int) Math.round(((objStockAdjPage.random_no(23))/pack_size)))-1;
						if(SOH_tbe<=0)
						{
							SOH_tbe=1;
						}
						SOHadjust=""+SOH_tbe;
						SOHenter.clear();
						SOHadjust = SOHadjust+".";
						SOHenter.sendKeys(SOHadjust);
					}
				}
				String afterendSOH=objStockAdj.endSOHValue.getText();
				if(afterendSOH.contains("-"))
				{
					afterendSOH = afterendSOH.replace("-", "");
					afterendSOH=decimalFormat(afterendSOH);
					if(afterendSOH.contains("."))
					{
						afterendSOHvalue = (int)Math.round(Float.parseFloat(afterendSOH));
					}
					else
					{
						afterendSOHvalue = Integer.parseInt(afterendSOH);
					}				
					afterendSOHvalue = -afterendSOHvalue;
				}
				else if(afterendSOH.contains("."))
				{
					afterendSOHvalue = (int)Math.round(Float.parseFloat(afterendSOH));
				}
				else
				{
					afterendSOH=decimalFormat(afterendSOH);
					afterendSOHvalue = Integer.parseInt(afterendSOH);
				}
				if(afterendSOHvalue<endSOHvalue)
				{
					htmlToExtent(cName,mName,extLogger,driver, "End SOH decreased before save in IDT;;;Pass");
					//Report_AddStep("testcase", "End SOH decreased before save in IDT","","", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "End SOH not decreased before save in IDT;;;Fail");
					//Report_AddStep("testcase", "End SOH not decreased before save in IDT","","", "Fail");
				}
				String commentIDT_appl = "comments for "+ranArticle+""; //check
				objStockAdj.IDTcomments.sendKeys(commentIDT_appl);

				if(inc==1)
				{
					objStockAdj.saveSOH.click();
					if(objStockAdj.warning99.isDisplayed())
					{
						objStockAdj.warning99.click();//IDT limit warning alert
					}
					if(objStockAdj.stockAdjFail.isDisplayed())
					{
						String msg=objStockAdj.stockAdjFail.getText();
						if(msg.equals("Stock Adjustment Successful"))
						{
							String SOH=objStockAdj.successmsg.getText();
							String[] SOHvalue = objStockAdjPage.fromtoSOH(SOH);
							htmlToExtent(cName,mName,extLogger,driver, "Entered Adjust SOH value is successfull;"+SOHvalue[0]+";"+SOHvalue[1]+";Pass");
							//Report_AddStep("testcase", "Entered Adjust SOH value is successfull",SOHvalue[0],SOHvalue[1], "Pass");							
							waitFor(2);
							objStockAdj.msgclose.click();
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Entered Adjust SOH value is not successfull;;;Fail");
							//Report_AddStep("testcase", "Entered Adjust SOH value is not successfull","","", "Fail");
							waitFor(2);
							objStockAdj.msgclose.click();
						}
					}
				}
				else
				{
					objStockAdjPage.saveSOH(objStockAdj,3,driver);
				}
				if(objStockAdj.msgclose.isDisplayed()){
				objStockAdj.msgclose.click();}

				String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
				results = sql.executeQuery(getContext(), recentHistory_sql);
				List myList = new ArrayList();
				myList.add(ranArticle);
				List<List<Object>> recentHisList = objStockAdjPage.RHdetails(results);
				String[] td = objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);	

				String transsid = null;
				if(td[0].contains("/"))
				{					
					String[] t1=td[0].split("/");
					transsid=t1[2]+t1[1]+t1[0]+td[1]+"00000000";				
				}

				String tIDidt_sql = data.getText("gettransactionID").replace("tID", transsid).replace("art_no", ranArticle);
				results = sql.executeQuery(getContext(), tIDidt_sql);
				String tranIDidt=results.get(0).get(1).toString();
				//System.out.println("idt - " +tranIDidt);

				String History_sql = data.getText("history").replace("article_num", ranArticle);
				results = sql.executeQuery(getContext(), History_sql);
				objStockAdjPage.History(objStockAdj, myList,results,driver);

				String tID = objStockAdjPage.checkreverseIDT1(objStockAdj, endSOHvalue, afterendSOHvalue, ranArticle, baseUOM,1,dd,driver);

				if(tID.contains("/"))
				{
					String[] t=tID.split(" ");					
					String[] t1=t[0].split("/");
					String t2=t[1].replace(":", "");
					tID=t1[2]+t1[1]+t1[0]+t2+"00000000";				
				}
				String IDTcomment_sql = data.getText("IDTcomment").replace("transactionID", tID);
				results = sql.executeQuery(getContext(), IDTcomment_sql);
				if(results.size()!=0)
				{
				String IDTcomment_DB = results.get(0).get(0).toString();
				removeExtraSpaces(results, 0);
				if(IDTcomment_DB.equals(commentIDT_appl))
				{
					htmlToExtent(cName,mName,extLogger,driver, "comments added succesfully in DB for IDT;;;Pass");
					//Report_AddStep("testcase", "comments added succesfully in DB for IDT","","", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "comments not added succesfully in DB for IDT;;;Pass");
					//Report_AddStep("testcase", "comments not added succesfully in DB for IDT","","", "Pass");
				}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "comments not added succesfully in DB for IDT;;;Fail");
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "No Sub cateogary available in DB;;;Pass");
				//Report_AddStep("testcase", "No Sub cateogary available in DB","","", "Pass");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "IDT and reverse IDT is not applicable for BWS store;;;Pass");
			//Report_AddStep("testcase", "IDT and reverse IDT is not applicable for BWS store","","", "Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check IDT and Reverse IDT for random weighted articles")
	public void checkIDTandRIDT_randomweighted() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{	
		List<List<Object>> results;
		List<List<Object>> IDTresults;
		List<List<Object>> DDresults;
		List<List<Object>> baseUOM_results;
		List<List<Object>> storeSOH_results;
		List<List<Object>> packsize_results;
		List<List<Object>> IDTlimit_results;
		List<List<Object>> article_results;
		List<List<Object>> code_results;
		List<List<Object>> UN_results;
		String node_id=null;
		String nodeid=null;
		int endSOHvalue =0;
		int afterendSOHvalue =0;
		String baseUOM=null;
		int inc=0;
		int length=0;
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		String ranArticle;	

		if(StoreNo.equals("3064")||StoreNo.equals("1786")||StoreNo.equals("1338")||StoreNo.equals("1108"))

		{
			String IDTarticles_sql = data.getText("getart"); 
			IDTresults = sql.executeQuery(getContext(), IDTarticles_sql);	//get node id
			if(IDTresults.size()!=0)
			{
				int num = common.RandomFromDB(IDTresults);
				ranArticle = /*"307736";*/IDTresults.get(num).get(0).toString();
				click(objStockAdj.sohSearchBox);
				objStockAdj.sohSearchBox.sendKeys(ranArticle);
				click(objStockAdj.sohArticleSearch);
				waitForJSandJQueryToLoad(driver);
				try
				{
					if(objStockAdj.whseWarnClose.isDisplayed())
					{
						click(objStockAdj.whseWarnClose);
					}
				}
				catch(WebDriverException e)
				{
					
				}
				selectByVisibleText(objStockAdj.reasonsForSOH,"Rvse IDT");	
				htmlToExtent(cName,mName,extLogger,driver,"Reverse IDT is available in drop down;;;Pass");
				//Report_AddStep("testcase", "Reverse IDT is available in drop down","","", "Pass"); //--1
				/*String DDvalues_sql = data.getText("getDDvalues").replace("nodeid", node_id); 
			DDresults = sql.executeQuery(getContext(), DDvalues_sql);	
			DDresults = removeExtraSpaces(DDresults,3);*/
				if(objStockAdj.SOHUDerrorlist.size()!=0)
				{
					String reverseIDTerrormsg=objStockAdj.cannotrvsemsg.getText();
					if(reverseIDTerrormsg.equals("Item cannot be reversed, no purchase found."))
					{
						htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT cannot be done since IDT is not performed for the article "+ranArticle+";;;Pass"); //--9
						//Report_AddStep("testcase", "Reverse IDT cannot be done since IDT is not performed for the article "+ranArticle+"","","", "Pass"); //--9
					}
					click(objStockAdj.noStockAdj);
				}
				else
				{
					inc++;
					selectByIndex(objStockAdj.subcatDD1,1);	
					selectByIndex(objStockAdj.idtToQtyList, 1); //////checkkk
					objStockAdjPage.saveSOH(objStockAdj,4,driver);
					//objStockAdjPage.RIDT(objStockAdj, DDresults);
					click(objStockAdj.sohSearchBox);
					objStockAdj.sohSearchBox.sendKeys(ranArticle);
					click(objStockAdj.sohArticleSearch);
					waitFor(5);
					if(objStockAdj.whseWarnClose.isDisplayed())
					{
						click(objStockAdj.whseWarnClose);
					}
				}
				selectByVisibleText(objStockAdj.reasonsForSOH,"IDT Purchase");	
				htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is available in drop down;;;Pass");
				//Report_AddStep("testcase", "IDT purchase is available in drop down","","", "Pass"); //--1
				htmlToExtent(cName,mName,extLogger,driver,"IDT purchase stock adjustment can be posted since sub cateogary of "+ranArticle+" is maintained in IDT matrix;;;Pass"); //--2
				if(objStockAdj.ArtMsg1.size()>0){
					if(objStockAdj.ArtMsg.isDisplayed())
					{
						htmlToExtent(cName,mName,extLogger,driver,"Cannot be proceeded further, since "+objStockAdj.ArtMsg.getText()+";;;Fail");
					}
					else{
						waitFor(2);
						selectByIndex(objStockAdj.subcatDD,1);
						//selectByValue(objStockAdj.subcatDD,"30");
						String dd = getText(objStockAdj.IDTdd);

						String baseUOM_sql = data.getText("baseUOM").replace("art_no", ranArticle); //to know base UOM
						baseUOM_results = sql.executeQuery(getContext(), baseUOM_sql);
						String storeSOH_sql = data.getText("baseUOMs").replace("art_no", ranArticle); //to know base UOM
						storeSOH_results = sql.executeQuery(getContext(), storeSOH_sql);

						baseUOM =objStockAdjPage.baseUOM(objStockAdj,baseUOM_results,driver); //--6

						//check - 99,999,IDT limit
						String UOMname=objStockAdj.adjSOHvalue_wt.getAttribute("id"); // UOM in textbox
						String packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
						packsize_results = sql.executeQuery(getContext(), packsize_sql);
						String packsize=packsize_results.get(0).get(2).toString(); 
						packsize = decimalFormat(packsize);
						int pack_size=Integer.parseInt(packsize);
						int SOH99 = objStockAdjPage.warning99check(objStockAdj,pack_size,2,1,0,0,driver); //99check
						objStockAdjPage.warning999check(objStockAdj,pack_size,2,1,0,0,driver); //999check
						String IDTlimit_sql = data.getText("IDTpurchaselimit"); //to know IDT limit
						IDTlimit_results = sql.executeQuery(getContext(), IDTlimit_sql);
						String IDTsize=IDTlimit_results.get(0).get(3).toString(); 
						IDTsize = decimalFormat(IDTsize);
						int IDT_size=Integer.parseInt(IDTsize);
						objStockAdjPage.warning25check(objStockAdj,pack_size,IDT_size,1,driver);

						int SOHadjust1 = objStockAdjPage.random_no(23);
						SOHadjust1=SOHadjust1+1;
						String SOHadjust=null;
						int totalUOM=objStockAdj.adjSOHlist.size();
						if(totalUOM>2)
						{
							totalUOM=2;
						}
						endSOHvalue=objStockAdjPage.endSOHvalue(objStockAdj,storeSOH_results,driver);
						for(int l=1;l<=totalUOM;l++)
						{
							WebElement SOHenter = objStockAdjPage.mvalue(objStockAdj, l);					
							int SOH_tbe=0;		
							if(totalUOM==2)
							{
								if(l==2)
								{
									UOMname = SOHenter.getAttribute("id");
									packsize_sql = data.getText("packsize").replace("art_no", ranArticle).replace("uomname", UOMname); //to know pack size
									packsize_results = sql.executeQuery(getContext(), packsize_sql);
									packsize=packsize_results.get(0).get(2).toString(); 
									packsize = decimalFormat(packsize);
									pack_size=Integer.parseInt(packsize);
									SOH_tbe=((int) Math.round(((23-Integer.parseInt(SOHadjust))/pack_size)))-1;
									if(SOH_tbe<=0)
									{
										SOH_tbe=1;
									}
									SOHadjust=""+SOH_tbe;
									SOHadjust =SOHadjust+".";
									SOHenter.sendKeys(SOHadjust);
								}
							}
							if(l==1)
							{
								SOH_tbe=((int) Math.round(((objStockAdjPage.random_no(23))/pack_size)))-1;
								if(SOH_tbe<=0)
								{
									SOH_tbe=1;
								}
								SOHadjust=""+SOH_tbe;
								SOHenter.clear();
								SOHadjust = SOHadjust+".";
								SOHenter.sendKeys(SOHadjust);
							}
						}
						String afterendSOH=objStockAdj.endSOHValue.getText();
						if(afterendSOH.contains("-"))
						{
							afterendSOH = afterendSOH.replace("-", "");
							afterendSOH=decimalFormat(afterendSOH);
							if(afterendSOH.contains("."))
							{
								afterendSOHvalue = (int)Math.round(Float.parseFloat(afterendSOH));
							}
							else
							{
								afterendSOHvalue = Integer.parseInt(afterendSOH);
							}				
							afterendSOHvalue = -afterendSOHvalue;
						}
						else
						{
							/*afterendSOH=decimalFormat(afterendSOH);
					afterendSOHvalue = Integer.parseInt(afterendSOH);*///Changed by Kiruthika
							afterendSOHvalue=doubleToInt(afterendSOH);
						}
						if(afterendSOHvalue<endSOHvalue)
						{
							htmlToExtent(cName,mName,extLogger,driver, "End SOH decreased before save in IDT;;;Pass");
							//Report_AddStep("testcase", "End SOH decreased before save in IDT","","", "Pass");
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "End SOH not decreased before save in IDT;;;Fail");
							//Report_AddStep("testcase", "End SOH not decreased before save in IDT","","", "Fail");
						}
						String commentIDT_appl = "comments for "+ranArticle+""; //check
						objStockAdj.IDTcomments.sendKeys(commentIDT_appl);

						if(inc==1)
						{
							objStockAdj.saveSOH.click();
							if(objStockAdj.warning99List.size()>0){
								if(objStockAdj.warning99.isDisplayed())
								{
									objStockAdj.warning99.click();//IDT limit warning alert
								}}
							if(objStockAdj.stockAdjFail1.isDisplayed())
							{
								String msg=objStockAdj.stockAdjFail1.getText();
								waitFor(2);
								if(msg.equals("Stock Adjustment Successful"))
								{
									String SOH=objStockAdj.successmsg.getText();
									String[] SOHvalue = objStockAdjPage.fromtoSOH(SOH);
									htmlToExtent(cName,mName,extLogger,driver, "Entered Adjust SOH value is successfull;"+SOHvalue[0]+";"+SOHvalue[1]+";Pass");
									//Report_AddStep("testcase", "Entered Adjust SOH value is successfull",SOHvalue[0],SOHvalue[1], "Pass");							
									waitFor(2);
									objStockAdj.msgclose.click();
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Entered Adjust SOH value is not successfull;;;Fail");
									//Report_AddStep("testcase", "Entered Adjust SOH value is not successfull","","", "Fail");
									waitFor(2);
									objStockAdj.msgclose.click();
								}
							}
						}
						else
						{
							objStockAdjPage.saveSOH(objStockAdj,3,driver);
						}
						//objStockAdj.msgclose.click();

						String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), recentHistory_sql);
						List myList = new ArrayList();
						myList.add(ranArticle);
						List<List<Object>> recentHisList = objStockAdjPage.RHdetails(results);
						String[] td = objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);	

						String transsid = null;
						if(td[0].contains("/"))
						{					
							String[] t1=td[0].split("/");
							transsid=t1[2]+t1[1]+t1[0]+td[1]+"00000000";				
						}

						String tIDidt_sql = data.getText("gettransactionID").replace("tID", transsid).replace("art_no", ranArticle);
						results = sql.executeQuery(getContext(), tIDidt_sql);
						String tranIDidt=results.get(0).get(1).toString();
						//System.out.println("idt - " +tranIDidt);

						String History_sql = data.getText("history").replace("article_num", ranArticle);
						results = sql.executeQuery(getContext(), History_sql);
						objStockAdjPage.History(objStockAdj, myList,results,driver);

						String tID = objStockAdjPage.checkreverseIDT1(objStockAdj, endSOHvalue, afterendSOHvalue, ranArticle, baseUOM,1,dd,driver);

						if(tID.contains("/"))
						{
							String[] t=tID.split(" ");					
							String[] t1=t[0].split("/");
							String t2=t[1].replace(":", "");
							tID=t1[2]+t1[1]+t1[0]+t2+"00000000";				
						}
						String IDTcomment_sql = data.getText("IDTcomment").replace("transactionID", tID);
						results = sql.executeQuery(getContext(), IDTcomment_sql);
						if(results.size()!=0)
						{
							String IDTcomment_DB = results.get(0).get(0).toString();
							removeExtraSpaces(results, 0);
							if(IDTcomment_DB.equals(commentIDT_appl))
							{
								htmlToExtent(cName,mName,extLogger,driver, "comments added succesfully in DB for IDT;;;Pass");
								//Report_AddStep("testcase", "comments added succesfully in DB for IDT","","", "Pass");
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "comments not added succesfully in DB for IDT;;;Pass");
								//Report_AddStep("testcase", "comments not added succesfully in DB for IDT","","", "Pass");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "comments not added succesfully in DB for IDT;;;Fail");
						}
					}}}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "No Sub cateogary available in DB;;;Pass");
				//Report_AddStep("testcase", "No Sub cateogary available in DB","","", "Pass");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"IDT and reverse IDT is not applicable for BWS store;;;Pass");
			//Report_AddStep("testcase", "IDT and reverse IDT is not applicable for BWS store","","", "Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,"-----------------Logout from Application------------------;;;Pass");
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check IDT and Reverse IDT is applicable for BWS articles")
	public void checkBWSarticle() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try{
		navToStockAdjBWS(status);
		//System.setProperty("store", getContext().getStringProperty("BWSstore"));
		String BWSart_sql = data.getText("BWSarticle"); 
		results = sql.executeQueryStore(getContext(), BWSart_sql, getContext().getStringProperty("BWSstore"));
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			//String ranArticle = "760582";
			/*if(objStockAdj.noStockAdj.isDisplayed())
			{
				click(objStockAdj.noStockAdj);
			}*/
			click(objStockAdj.sohSearchBox);
			objStockAdj.sohSearchBox.sendKeys(ranArticle);
			click(objStockAdj.sohArticleSearch);
			waitForJSandJQueryToLoad(driver);
			if(objStockAdj.BWSerremsg.size()!=0)
			{
				String msg=objStockAdj.BWSerroremsg.getText();
				htmlToExtent(cName,mName,extLogger,driver,""+msg+" for "+ranArticle+";;;Fail");
				//Report_AddStep("testcase", ""+msg+" for "+ranArticle+"","","", "Fail"); //--1
			}
			else
			{
				List<String> options = getOptionsText(objStockAdj.reasonsForSOH);
				//List<WebElement> options = getAllOptions(objStockAdj.reasonsForSOH);
				if(options.contains("Rvse IDT"))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Reverse IDT is available in drop down for article - "+ranArticle+" in BWS store;;;Fail"); //--1
					//Report_AddStep("testcase", "Reverse IDT is available in drop down for article - "+ranArticle+" in BWS store","","", "Fail"); //--1
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Reverse IDT is not available in drop down for article - "+ranArticle+" in BWS store;;;Pass"); //--1
					//Report_AddStep("testcase", "Reverse IDT is not available in drop down for article - "+ranArticle+" in BWS store","","", "Pass"); //--1
				}
				options = getOptionsText(objStockAdj.reasonsForSOH);
				//options = getAllOptions(objStockAdj.reasonsForSOH);
				if(options.contains("IDT Purchase"))
				{
					htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is available in drop down for article - "+ranArticle+" in BWS store;;;Fail");
					//Report_AddStep("testcase", "IDT purchase is available in drop down for article - "+ranArticle+" in BWS store","","", "Fail"); //--1
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"IDT purchase is not available in drop down for article - "+ranArticle+" in BWS store;;;Pass");
					//Report_AddStep("testcase", "IDT purchase is not available in drop down for article - "+ranArticle+" in BWS store","","", "Pass"); //--1
				}
			}
		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	public void navToStockAdj(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver,"---------------Login into Application--------------------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		if(System.getProperty("store")==null){
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver,"Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("store"),"","", "Pass");
			objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("store"),driver);
		}else{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver,"Login with the Store : " + store+";;;Pass");
			//Report_AddStep("testcase", "Login with the Store : " + store,"","", "Pass");
			objStockAdjPage = loginPage.navToStockAdj(store,driver);
		}

		log.info("-------------Navigate to Stock Adjustment Page------------");
		htmlToExtent(cName,mName,extLogger,driver,"----------------Navigate to Stock Adjustment Page---------------------;;;Pass");
		//Report_AddStep("testcase", "----------------Navigate to Stock Adjustment Page---------------------","","", "Pass");
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		/*click(objStockAdj.stockAdjTab);
		waitFor(1);
		click(objStockAdj.stockAdjSubTab);*/
	}
	public void navToStockAdjBWS(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver,"---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		//	System.setProperty("store", getContext().getStringProperty("BWSstore"));
		/*if(System.getProperty("store")==null){
			storeprop.getStoreDetails(System.getProperty("BWSstore"));
			Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
			objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("BWSstore"));
		}else{*/
		storeprop.getStoreDetails(getContext().getStringProperty("BWSstore").trim());
		//System.out.println("Eclipse:"+ store);
		htmlToExtent(cName,mName,extLogger,driver,"Login with the Store : " + getContext().getStringProperty("BWSstore")+";;;Pass");
		//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
		objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("BWSstore"),driver);
		//}

		log.info("-------------Navigate to Stock Adjustment Page------------");
		htmlToExtent(cName,mName,extLogger,driver,"----------------Navigate to Stock Adjustment Page---------------------;;;Pass");
		//Report_AddStep("testcase", "----------------Navigate to Stock Adjustment Page---------------------","","", "Pass");
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		click(objStockAdj.stockAdjTab);
		waitFor(1);
		click(objStockAdj.stockAdjSubTab);
	}
	
	public void navToStockAdjPetrol(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver,"---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		//	System.setProperty("store", getContext().getStringProperty("BWSstore"));
		/*if(System.getProperty("store")==null){
			storeprop.getStoreDetails(System.getProperty("BWSstore"));
			Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
			objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("BWSstore"));
		}else{*/
		storeprop.getStoreDetails(getContext().getStringProperty("PetrolStore").trim());
		//System.out.println("Eclipse:"+ store);
		htmlToExtent(cName,mName,extLogger,driver,"Login with the Store : " + getContext().getStringProperty("PetrolStore")+";;;Pass");
		//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
		objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("PetrolStore"),driver);
		//}

		log.info("-------------Navigate to Stock Adjustment Page------------");
		htmlToExtent(cName,mName,extLogger,driver,"----------------Navigate to Stock Adjustment Page---------------------;;;Pass");
		//Report_AddStep("testcase", "----------------Navigate to Stock Adjustment Page---------------------","","", "Pass");
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		click(objStockAdj.stockAdjTab);
		waitFor(1);
		click(objStockAdj.stockAdjSubTab);
	}
	
	public void navToStockAdjPEL(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver,"---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		//	System.setProperty("store", getContext().getStringProperty("BWSstore"));
		/*if(System.getProperty("store")==null){
			storeprop.getStoreDetails(System.getProperty("BWSstore"));
			Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
			objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("BWSstore"));
		}else{*/
		storeprop.getStoreDetails(getContext().getStringProperty("NZstore").trim());
		//System.out.println("Eclipse:"+ store);
		htmlToExtent(cName,mName,extLogger,driver,"Login with the Store : " + getContext().getStringProperty("NZstore")+";;;Pass");
		//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
		objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("NZstore"),driver);
		//}

		log.info("-------------Navigate to Stock Adjustment Page------------");
		htmlToExtent(cName,mName,extLogger,driver,"----------------Navigate to Stock Adjustment Page---------------------;;;Pass");
		//Report_AddStep("testcase", "----------------Navigate to Stock Adjustment Page---------------------","","", "Pass");
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		click(objStockAdj.stockAdjTab);
		waitFor(1);
		click(objStockAdj.stockAdjSubTab);
	}
	
	public void navToStockAdjBigW(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver,"---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		//	System.setProperty("store", getContext().getStringProperty("BWSstore"));
		/*if(System.getProperty("store")==null){
			storeprop.getStoreDetails(System.getProperty("BWSstore"));
			Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
			objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("BWSstore"));
		}else{*/
		storeprop.getStoreDetails(getContext().getStringProperty("BigWstore").trim());
		//System.out.println("Eclipse:"+ store);
		htmlToExtent(cName,mName,extLogger,driver,"Login with the Store : " + getContext().getStringProperty("BigWstore")+";;;Pass");
		//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("BWSstore"),"","", "Pass");
		objStockAdjPage = loginPage.navToStockAdj(getContext().getStringProperty("BigWstore"),driver);
		//}

		log.info("-------------Navigate to Stock Adjustment Page------------");
		htmlToExtent(cName,mName,extLogger,driver,"----------------Navigate to Stock Adjustment Page---------------------;;;Pass");
		//Report_AddStep("testcase", "----------------Navigate to Stock Adjustment Page---------------------","","", "Pass");
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		click(objStockAdj.stockAdjTab);
		waitFor(1);
		click(objStockAdj.stockAdjSubTab);
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for linked Articles")
	public void verifyStockAdjLinkedArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+4;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		TestStatus status = getTestStatus();
		//System.out.println("Parameter : "+System.getProperty("store"));
		//System.out.println(store);
		try{
		navToStockAdj(status);
		//String parentArticle ="134923";
		//String childArticle ="134932";
		String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,ranArtPLU,lastrcvdqty=null,pack_size=null;

		//System.out.println("Linked article Query"+data.getText("linkedarticles") );
		String linked_articles_sql = data.getText("linkedarticles");
		results = sql.executeQuery(getContext(), linked_articles_sql);replacenullToZero(results);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+results.get(num).toString()+";;;Info");
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			articleOM = results.get(num).get(7).toString();
			UOM = results.get(num).get(5).toString();
			store_soh = results.get(num).get(8).toString();
			ranArtPLU = results.get(num).get(6).toString();
			pack_size = results.get(num).get(10).toString();
			pack_size = decimalFormat(pack_size);
			storeSOH = decimalFormat(store_soh);
			/*if(UOM.equals("KG")){
				storeSOH = store_soh;
				soh_ea = results.get(num).get(9).toString();
				SOH_EA = decimalFormat(soh_ea);
			}
			else{
				storeSOH = decimalFormat(store_soh);
			}*/
			//parentArticle = results.get(num).get(1).toString();


			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String enteredSoh = data.getText("sohvalidation");

			objStockAdjPage.fnStockAdjustmentLinkedArticles(objStockAdj,myList,ranArticle,test,driver);
			objStockAdjPage.fnAdjustSohLinkedArticles(objStockAdj,myList,enteredSoh,test,driver);


			//Child Article Verification
			String childArticle, linkageFactor, recentDBSOH, childArticleSOH, finalDBSOH;
			waitFor(1);
			objStockAdj.sohSearchBox.clear();
			do{
				String linked_childarticles_sql = data.getText("childarticle").replace("article_num", ranArticle);;
				results = sql.executeQuery(getContext(), linked_childarticles_sql);
				num = common.RandomFromDB(results);
				//System.out.println("Db values"+ num);
				childArticle = results.get(num).get(0).toString();
				linkageFactor = results.get(num).get(2).toString();

			}while(results.size()==0);
			myList.add(childArticle);
			myList.add(linkageFactor);

			String ajustSohChild = data.getText("childsohvalidation");

			String recentDBSOH_sql = data.getText("currentSOH").replace("article_num", ranArticle);;
			results = sql.executeQuery(getContext(), recentDBSOH_sql);
			recentDBSOH = results.get(0).get(0).toString();
			recentDBSOH = decimalFormat(recentDBSOH);

			objStockAdjPage.fnStockAdjustmentLinkedArticlesChild(objStockAdj,recentDBSOH,childArticle,test,driver);
			String childSOH = objStockAdjPage.fnAdjustSohLinkedArticlesChild(objStockAdj,myList,ajustSohChild,recentDBSOH,test,driver);

			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

			String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results,driver);

			objStockAdjPage.verifyFinalSOH(objStockAdj, childSOH,driver);


			waitFor(1);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Item Linkage Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Item Linkage Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for linked Articles - Descrption")
	public void verifyStockAdjLinkedArticlesDescription() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+4;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		//String parentArticle ="134923";
		//String childArticle ="134932";
		String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,ranArtPLU,lastrcvdqty=null,pack_size=null;

		//System.out.println("Linked article Query"+data.getText("linkedarticles") );
		String linked_articles_sql = data.getText("linkedarticles");
		results = sql.executeQuery(getContext(), linked_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+results.get(num).toString()+";;;Info");
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			articleOM = results.get(num).get(7).toString();
			UOM = results.get(num).get(5).toString();
			store_soh = results.get(num).get(8).toString();
			ranArtPLU = results.get(num).get(6).toString();
			pack_size = results.get(num).get(10).toString();
			pack_size = decimalFormat(pack_size);
			storeSOH = decimalFormat(store_soh);

			//parentArticle = results.get(num).get(1).toString();

			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Theft:Sample Stock:Rvse Sample Stock:Rvse Theft");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String enteredSoh = data.getText("validation99");

			objStockAdjPage.fnStockAdjustmentLinkedArticles(objStockAdj,myList,ranArticleDesc,test,driver);
			objStockAdjPage.fnAdjustSohLinkedArticles(objStockAdj,myList,enteredSoh,test,driver);

			//Child Article Verification
			String childArticle, linkageFactor, recentDBSOH, childArticleSOH, finalDBSOH;
			waitFor(1);
			objStockAdj.sohSearchBox.clear();
			do{
				String linked_childarticles_sql = data.getText("childarticle").replace("article_num", ranArticle);;
				results = sql.executeQuery(getContext(), linked_childarticles_sql);
				num = common.RandomFromDB(results);
				//System.out.println("Db values"+ num);
				childArticle = results.get(num).get(0).toString();
				linkageFactor = results.get(num).get(2).toString();

			}while(results.size()==0);
			myList.add(childArticle);
			myList.add(linkageFactor);

			String ajustSohChild = data.getText("validation99Child");

			String recentDBSOH_sql = data.getText("currentSOH").replace("article_num", ranArticle);;
			results = sql.executeQuery(getContext(), recentDBSOH_sql);
			recentDBSOH = results.get(0).get(0).toString();
			recentDBSOH = decimalFormat(recentDBSOH);

			objStockAdjPage.fnStockAdjustmentLinkedArticlesChild(objStockAdj,recentDBSOH,childArticle,test,driver);
			String childSOH = objStockAdjPage.fnAdjustSohLinkedArticlesChild(objStockAdj,myList,ajustSohChild,recentDBSOH,test,driver);

			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

			String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results,driver);

			objStockAdjPage.verifyFinalSOH(objStockAdj, childSOH,driver);


			waitFor(1);	
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Item Linkage Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Item Linkage Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for linked Articles - PLU")
	public void verifyStockAdjLinkedArticlesPLU() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+4;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		//String parentArticle ="134923";
		//String childArticle ="134932";

		String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,ranArtPLU,lastrcvdqty=null,pack_size=null;

		//System.out.println("Linked article Query"+data.getText("linkedarticles") );
		String linked_articles_sql = data.getText("linkedarticles");
		results = sql.executeQuery(getContext(), linked_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+results.get(num).toString()+";;;Info");
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			articleOM = results.get(num).get(7).toString();
			UOM = results.get(num).get(5).toString();
			store_soh = results.get(num).get(8).toString();
			ranArtPLU = results.get(num).get(6).toString();
			pack_size = results.get(num).get(10).toString();
			pack_size = decimalFormat(pack_size);
			storeSOH = decimalFormat(store_soh);

			//parentArticle = results.get(num).get(1).toString();

			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String enteredSoh = data.getText("sohvalidation");

			objStockAdjPage.fnStockAdjustmentLinkedArticles(objStockAdj,myList,ranArtPLU,test,driver);
			objStockAdjPage.fnAdjustSohLinkedArticles(objStockAdj,myList,enteredSoh,test,driver);

			//Child Article Verification
			String childArticle, linkageFactor, recentDBSOH, childArticleSOH, finalDBSOH;
			waitFor(1);
			objStockAdj.sohSearchBox.clear();
			do{
				String linked_childarticles_sql = data.getText("childarticle").replace("article_num", ranArticle);;
				results = sql.executeQuery(getContext(), linked_childarticles_sql);
				num = common.RandomFromDB(results);
				//System.out.println("Db values"+ num);
				childArticle = results.get(num).get(0).toString();
				linkageFactor = results.get(num).get(2).toString();

			}while(results.size()==0);
			myList.add(childArticle);
			myList.add(linkageFactor);

			String ajustSohChild = data.getText("childsohvalidation");

			String recentDBSOH_sql = data.getText("currentSOH").replace("article_num", ranArticle);;
			results = sql.executeQuery(getContext(), recentDBSOH_sql);
			recentDBSOH = results.get(0).get(0).toString();
			recentDBSOH = decimalFormat(recentDBSOH);

			objStockAdjPage.fnStockAdjustmentLinkedArticlesChild(objStockAdj,recentDBSOH,childArticle,test,driver);
			String childSOH = objStockAdjPage.fnAdjustSohLinkedArticlesChild(objStockAdj,myList,ajustSohChild,recentDBSOH,test,driver);

			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);
			waitFor(2);

			String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results,driver);

			objStockAdjPage.verifyFinalSOH(objStockAdj, childSOH,driver);

			waitFor(1);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Item Linkage Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Item Linkage Article found in DB ","" ,"" , "Pass");

		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for linked Articles - EAN")
	public void verifyStockAdjLinkedArticlesEAN() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		//String parentArticle ="134923";
		//String childArticle ="134932";

		String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,ranArtPLU,ranArticleEAN,lastrcvdqty=null,pack_size=null;

		//System.out.println("Linked article Query"+data.getText("linkedarticles") );
		String linked_articles_sql = data.getText("linkedarticles");
		results = sql.executeQuery(getContext(), linked_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+results.get(num).toString()+";;;Info");
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			articleOM = results.get(num).get(7).toString();
			UOM = results.get(num).get(5).toString();
			store_soh = results.get(num).get(8).toString();
			ranArtPLU = results.get(num).get(6).toString();
			ranArticleEAN = results.get(num).get(4).toString();
			pack_size = results.get(num).get(10).toString();
			pack_size = decimalFormat(pack_size);
			storeSOH = decimalFormat(store_soh);

			//parentArticle = results.get(num).get(1).toString();

			//}while(results.size()==0);


			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(SOH_EA);
			myList.add(UOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			String lar_rcvd_qty_sql = data.getText("lastrcvdqty").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), lar_rcvd_qty_sql);
			if(results.size()==0){
				lastrcvdqty ="0";
			}
			else{
				lastrcvdqty = results.get(0).get(1).toString();
				String part[] =  lastrcvdqty.split(" ");
				lastrcvdqty = part[0];
				lastrcvdqty = decimalFormat(lastrcvdqty);
				lastrcvdqty = lastrcvdqty+" "+part[1];
			}
			myList.add(lastrcvdqty);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String highSoh = data.getText("validation999");
			String enteredSoh = data.getText("sohvalidation");
			waitFor(2);
			objStockAdjPage.fnStockAdjustmentLinkedArticles(objStockAdj,myList,ranArticleEAN,test,driver);
			objStockAdjPage.verify999Validation(objStockAdj,myList,highSoh,test,driver);
			objStockAdjPage.fnAdjustSohLinkedArticles(objStockAdj,myList,enteredSoh,test,driver);

			//Child Article Verification
			String childArticle, linkageFactor, recentDBSOH, childArticleSOH, finalDBSOH;
			waitFor(1);
			objStockAdj.sohSearchBox.clear();
			do{
				String linked_childarticles_sql = data.getText("childarticle").replace("article_num", ranArticle);;
				results = sql.executeQuery(getContext(), linked_childarticles_sql);
				num = common.RandomFromDB(results);
				//System.out.println("Db values"+ num);
				childArticle = results.get(num).get(0).toString();
				linkageFactor = results.get(num).get(2).toString();

			}while(results.size()==0);
			myList.add(childArticle);
			myList.add(linkageFactor);

			String ajustSohChild = data.getText("childsohvalidation");
			String childhighSoh = data.getText("validation999child");

			String recentDBSOH_sql = data.getText("currentSOH").replace("article_num", ranArticle);;
			results = sql.executeQuery(getContext(), recentDBSOH_sql);
			recentDBSOH = results.get(0).get(0).toString();
			recentDBSOH = decimalFormat(recentDBSOH);

			objStockAdjPage.fnStockAdjustmentLinkedArticlesChild(objStockAdj,recentDBSOH,childArticle,test,driver);
			objStockAdjPage.verify999Validation(objStockAdj,myList,childhighSoh,test,driver);
			objStockAdjPage.fnAdjustSohLinkedArticlesChild(objStockAdj,myList,ajustSohChild,recentDBSOH,test,driver);

			waitFor(1);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "No Item Linkage Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Item Linkage Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment from lookup for linked Articles")
	public void verifylookupLinkedArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try
		{
		navToEnhancedarticle(status);
		//String parentArticle ="134923";
		//String childArticle ="134932";
		String parentArticle, childArticle;

		//System.out.println("Linked article Query"+data.getText("linkedarticles") );
		String linked_articles_sql = data.getText("linkedarticles");
		results = sql.executeQuery(getContext(), linked_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			parentArticle = results.get(num).get(1).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+parentArticle+";;;Info");
			click(objStockAdj.searchText);
			objStockAdj.searchText.clear();
			objStockAdj.searchText.sendKeys(parentArticle);
			click(objStockAdj.clickGO);

			waitForJSandJQueryToLoad(driver);


			//String sohValue = getText(objStockAdj.sohValue);
			click(objStockAdj.sohValue);
			String sohTitle = getText(objStockAdj.sohArticleTitle);
			sohTitle = sohTitle.replaceAll("\\s+","");
			String[] parts = sohTitle.split("-");
			if(parentArticle.contains(parts[0])){
				htmlToExtent(cName,mName,extLogger,driver,  "Stock adjustment can be done for Parent Article :"+parentArticle +" from Lookup screen;;;Pass");
				//Report_AddStep("testcase", "Stock adjustment can be done for Parent Article :"+parentArticle +" from Lookup screen","","", "Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment Fails for Parent Article :"+parentArticle +" from Lookup screen;;;Fail");
				//Report_AddStep("testcase","Stock adjustment Fails for Parent Article :"+parentArticle +" from Lookup screen","","", "Fail");
			}
			waitFor(1);
			click(objStockAdj.backBtn);
			waitForJSandJQueryToLoad(driver);
			click(objStockAdj.backBtn);
			waitForJSandJQueryToLoad(driver);

			objStockAdj.searchText.clear();
			//childArticle ="134932";
			do{
				//System.out.println("Linked article Query"+data.getText("linkedarticles") );
				linked_articles_sql = data.getText("linkedarticles");
				results = sql.executeQuery(getContext(), linked_articles_sql);
				num = common.RandomFromDB(results);
				//System.out.println("Db values"+ num);
				childArticle = results.get(num).get(0).toString();

			}while(results.size()==0);

			objStockAdj.searchText.sendKeys(childArticle);
			waitFor(1);
			click(objStockAdj.clickGO);
			waitForJSandJQueryToLoad(driver);

			String sohValueChild = getText(objStockAdj.sohValue);
			click(objStockAdj.sohValue);

			String error = getText(objStockAdj.childArticleError);
			if(objStockAdj.childArticleErrorList.size()!=0){
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment cannot be done for child Article Number: "+childArticle+ ". Warning Message :"+error+" is displayed;;;Pass");
				//Report_AddStep("testcase", "Stock adjustment cannot be done for child Article Number: "+childArticle+ ". Warning Message :"+error+" is displayed","","", "Pass");
				click(objStockAdj.childArticleErrorOkButton);
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment is possible for child Article Number:"+childArticle+ "from lookup screen;;;Fail");
				//Report_AddStep("testcase","Stock adjustment is possible for child Article Number:"+childArticle+ "from lookup screen","","", "Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Item Linkage Article found in DB;;;Pass");
			//Report_AddStep("testcase", "No Item Linkage Article found in DB ","" ,"" , "Pass");

		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for Display Articles")
	public void verifyStockAdjDisplayArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{		
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		List<List<Object>> childDetails;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		//String parentArticle ="475060";
		List myList =  new ArrayList();

		String ranArticle,ranArticleDesc,ranArticleEAN,ranArtPLU,lastrcvdqty=null,pack_size=null;

		String display_articles_sql = data.getText("displayarticles");
		results = sql.executeQuery(getContext(), display_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			ranArtPLU = results.get(num).get(2).toString();
			ranArticleEAN = results.get(num).get(3).toString();

			myList.add(ranArticle);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);

			String enteredSoh = data.getText("sohvalue");
			String test = data.getText("testcase");
			String childSoh = data.getText("childsohvalue");

			String childArticleList_sql = data.getText("childdetails").replace("parentArticle", ranArticle);
			childDetails = sql.executeQuery(getContext(), childArticleList_sql);


			objStockAdjPage.fnDisplayParentArticleValidation(objStockAdj,ranArticle,ranArticle, test,driver);
			objStockAdjPage.fnAdjustSohDisplayArticles(objStockAdj,myList, childDetails,enteredSoh,childSoh,test,driver);

			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

			//History check
			String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results,driver);

		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "No Display Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Display Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for Display Articles")
	public void verifyStockAdjDisplayArticlesDescription() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{		
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		List<List<Object>> childDetails;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		//String parentArticle ="475060";
		List myList =  new ArrayList();

		String ranArticle,ranArticleDesc,ranArticleEAN,ranArtPLU,lastrcvdqty=null,pack_size=null;

		String display_articles_sql = data.getText("displayarticles");
		results = sql.executeQuery(getContext(), display_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			ranArtPLU = results.get(num).get(2).toString();
			ranArticleEAN = results.get(num).get(3).toString();

			myList.add(ranArticle);

			List<List<Object>> list_reasonCodes = StringToListCreation("Theft:Sample Stock:Rvse Sample Stock:Rvse Theft");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);

			String enteredSoh = data.getText("validation99");
			String test = data.getText("testcase");
			String childSoh = data.getText("childsohvalue");


			String childArticleList_sql = data.getText("childdetails").replace("parentArticle", ranArticle);
			childDetails = sql.executeQuery(getContext(), childArticleList_sql);


			objStockAdjPage.fnDisplayParentArticleValidation(objStockAdj,ranArticle,ranArticleDesc,test,driver);
			objStockAdjPage.fnAdjustSohDisplayArticles(objStockAdj,myList, childDetails,enteredSoh,childSoh,test,driver);


			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

			//History check
			String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results,driver);

		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Display Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Display Article found in DB ","" ,"" , "Pass");

		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	/*@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for Display Articles")
	public void verifyStockAdjDisplayArticlesPLU() throws IOException, AWTException, SQLException, NumberFormatException, ParseException{

		List<List<Object>> results;
		List<List<Object>> recentHisList;
		List<List<Object>> childDetails;
		TestStatus status = getTestStatus();
		//System.out.println("Parameter : "+System.getProperty("store"));
		//System.out.println(store);
		navToStockAdj(status);
		//String parentArticle ="401458";
		List myList =  new ArrayList();

		String ranArticle,ranArticleDesc,ranArticleEAN,ranArtPLU,lastrcvdqty=null,pack_size=null;

		String display_articles_sql = data.getText("displayarticles");
		results = sql.executeQuery(getContext(), display_articles_sql);
		if(results.size()!=0)
		{
		int num = common.RandomFromDB(results);
		//System.out.println("Db values"+ num);
		ranArticle = results.get(num).get(0).toString();
		ranArticleDesc = results.get(num).get(1).toString();
		ranArtPLU = results.get(num).get(2).toString();
		ranArticleEAN = results.get(num).get(3).toString();

		myList.add(ranArticle);

		List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Reverse Damaged Stock:Reverse Out of Date:Stock Write Off:Reverse Stock Write Off:Insurance Stock:Reverse Insurance Stock");
		int listCnt = list_reasonCodes.get(0).size();
		int index = (int)(Math.random() * listCnt);
		String reasonCode = list_reasonCodes.get(0).get(index).toString();
		String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
		results = sql.executeQuery(getContext(), mulFactor_sql);
		String multFactor = results.get(0).get(0).toString();
		myList.add(reasonCode);
		myList.add(multFactor);
		String allCharityCodes_sql = data.getText("charitycodes");
		results = sql.executeQuery(getContext(), allCharityCodes_sql);
		int num3 = common.RandomFromDB(results);
		String charityCode = results.get(num3).get(1).toString();
		myList.add(charityCode);

		String enteredSoh = data.getText("sohvalue");
		String test = data.getText("testcase");
		String childSoh = data.getText("childsohvalue");


		String childArticleList_sql = data.getText("childdetails").replace("parentArticle", ranArticle);
		childDetails = sql.executeQuery(getContext(), childArticleList_sql);

		//Currently PLU value is not there for article, so passing ranArticle in 3rd field in below function.
		//Once PLU value available, will change it to ranArtPLU
		//objStockAdjPage.fnDisplayParentArticleValidation(objStockAdj,ranArticle,ranArtPLU,test);
		objStockAdjPage.fnDisplayParentArticleValidation(objStockAdj,ranArticle,ranArticle,test);
		objStockAdjPage.fnAdjustSohDisplayArticles(objStockAdj,myList, childDetails,enteredSoh,childSoh,test);


		//Recent History check
		String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
		results = sql.executeQuery(getContext(), recentHistory_sql);
		recentHisList = objStockAdjPage.RHdetails(results);
		objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList);

		//History check
		String History_sql = data.getText("history").replace("article_num", ranArticle);
		results = sql.executeQuery(getContext(), History_sql);
		objStockAdjPage.History(objStockAdj, myList,results);

		}
		else
		{
			Report_AddStep("testcase", "No Display Article found in DB ","" ,"" , "Pass");

		}

		log.info("-----------------Logout from Application------------------");
		loginPage.logoutSADJ(stockAdjArtScenarios, stockAdjArttestname,driver);
		status.assertAll();
	}*/

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for Display Articles")
	public void verifyStockAdjDisplayArticlesEAN() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		List<List<Object>> childDetails;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		//String parentArticle ="401458";
		List myList =  new ArrayList();
		//myList.add(parentArticle);

		String ranArticle,ranArticleDesc,ranArticleEAN,ranArtPLU,lastrcvdqty=null,pack_size=null;

		String display_articles_sql = data.getText("displayarticles");
		results = sql.executeQuery(getContext(), display_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for article - "+ranArticle+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			ranArtPLU = results.get(num).get(2).toString();
			ranArticleEAN = results.get(num).get(3).toString();

			myList.add(ranArticle);		

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);


			String enteredSoh = data.getText("sohvalue");
			String highSoh = data.getText("validation999");
			String test = data.getText("testcase");
			String childSoh = data.getText("childsohvalue");


			String childArticleList_sql = data.getText("childdetails").replace("parentArticle", ranArticle);
			childDetails = sql.executeQuery(getContext(), childArticleList_sql);


			objStockAdjPage.fnDisplayParentArticleValidation(objStockAdj,ranArticle,ranArticleEAN,test,driver);
			objStockAdjPage.verifyDisplay999Validation(objStockAdj,highSoh,test,driver);
			objStockAdjPage.fnAdjustSohDisplayArticles(objStockAdj,myList, childDetails,enteredSoh,childSoh,test,driver);

		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Display Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Display Article found in DB ","" ,"" , "Pass");

		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment from lookup for linked Articles")
	public void verifylookupDisplayArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try
		{
		navToEnhancedarticle(status);
		String parentArticle;
		//String childArticle ="134932";
		//String parentArticle ="401458";

		String display_articles_sql = data.getText("displayarticles");
		results = sql.executeQuery(getContext(), display_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			parentArticle = results.get(num).get(0).toString();
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+parentArticle+";;;Pass");
			objStockAdj.searchText.sendKeys(parentArticle);
			waitFor(1);
			click(objStockAdj.clickGO);
			waitForJSandJQueryToLoad(driver);

			//String sohValue = getText(objStockAdj.sohValue);
			click(objStockAdj.sohValue);
			try{
				if(objStockAdj.check.isDisplayed())
				{
					for(int i=1;i<=objStockAdj.check1.size();i++)
					{
						WebElement e = prepareWebElementWithDynamicXpathWithInt(objStockAdj.check2, i, driver);
						if(e.getText().equals(parentArticle))
						{
							 e = prepareWebElementWithDynamicXpathWithInt(objStockAdj.check3, i, driver);
							 e.click();
							 break;
						}
					}
				}
			}catch(Exception e){}
			String sohTitle = getText(objStockAdj.sohArticleTitle);
			sohTitle = sohTitle.replaceAll("\\s+","");
			String[] parts = sohTitle.split("-");
			if(parentArticle.contains(parts[0])){
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment can be done for Parent Article : "+parentArticle +" from Lookup screen;;;Pass");
				//Report_AddStep("testcase", "Stock adjustment can be done for Parent Article : "+parentArticle +" from Lookup screen","","", "Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment Fails for Parent Article : "+parentArticle +" from Lookup screen;;;Fail");
				//Report_AddStep("testcase","Stock adjustment Fails for Parent Article : "+parentArticle +" from Lookup screen","","", "Fail");
			}
			waitFor(1);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Display Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Display Article found in DB ","" ,"" , "Pass");

		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for Weighed Articles")
	public void verifyStockAdjWeighedArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		//String parentArticle ="134923";
		//String childArticle ="134932";
		String ranArticle,ranArticleDesc,articleOM,store_soh,UOM,storeSOH,soh_ea,SOH_EA = null,ranArtPLU,lastrcvdqty=null,pack_size=null;

		//System.out.println("Weighed article Query"+data.getText("weighedarticles") );
		String weighed_articles_sql = data.getText("weighedarticles");
		results = sql.executeQuery(getContext(), weighed_articles_sql); replacenullToZero(results);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+ranArticle+";;;Pass");
			ranArticleDesc = results.get(num).get(1).toString();
			ranArtPLU = results.get(num).get(4).toString();
			articleOM = results.get(num).get(5).toString();
			storeSOH = results.get(num).get(6).toString();
			pack_size = results.get(num).get(8).toString();
			pack_size = decimalFormat(pack_size);

			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(storeSOH);
			myList.add(articleOM);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock:Theft:Sample Stock:Rvse Sample Stock:Rvse Theft:+Stock Correction:-Stock Correction");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			myList.add(articleOM);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String EAValue = data.getText("EAValue");
			String CARValue = data.getText("CARValue");
			String validation99 = data.getText("validation99");
			String validation999 = data.getText("validation999");
			String endSOH = data.getText("endSOH");

			objStockAdjPage.fnStockAdjustmentWeighedArticles(objStockAdj,myList,ranArticle,driver);
			objStockAdjPage.fnAdjustSohWeighedArticles(objStockAdj,myList,validation99,validation999,driver);
			objStockAdjPage.fnAdjustSohWeighedArticlesEAandCAR(objStockAdj,myList, EAValue, CARValue,driver);
			objStockAdjPage.fnAdjustSohWeighedArticleForPIVerify(objStockAdj,myList, endSOH,driver);

			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);

			String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results,driver);
			waitFor(1);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Weighed Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Weighed Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment from lookup for Weight Articles")
	public void verifylookupWeightArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try
		{
		navToEnhancedarticle(status);
		//String randomWeightArticle ="120044";

		String weightArticle;

		//System.out.println("Random article Query"+data.getText("WeightArticles") );
		String weight_articles_sql = data.getText("WeightArticles");
		results = sql.executeQuery(getContext(), weight_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			weightArticle = results.get(num).get(0).toString();
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+weightArticle+";;;Pass");
			objStockAdj.searchText.sendKeys(weightArticle);
			waitFor(1);
			click(objStockAdj.clickGO);
			waitForJSandJQueryToLoad(driver);

			//String sohValue = getText(objStockAdj.sohValue);
			click(objStockAdj.sohValue);
			String sohTitle = getText(objStockAdj.sohArticleTitle);
			sohTitle = sohTitle.replaceAll("\\s+","");
			String[] parts = sohTitle.split("-");
			if(weightArticle.contains(parts[0])){
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment can be done for Weight Article :"+weightArticle +" from Lookup screen;;;Pass");
				//Report_AddStep("testcase", "Stock adjustment can be done for Weight Article :"+weightArticle +" from Lookup screen","","", "Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment Fails for Weight Article :"+weightArticle +" from Lookup screen;;;Fail");
				//Report_AddStep("testcase","Stock adjustment Fails for Weight Article :"+weightArticle +" from Lookup screen","","", "Fail");
			}

		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No WeightedArticle found in DB ;;;Pass");
			//Report_AddStep("testcase", "No WeightedArticle found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment for Random Weighed Articles")
	public void verifyStockAdjRandomWeighedArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		List<List<Object>> recentHisList;
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		String ranArticle,ranArticleDesc,articleOM,piOM,UOM,kgSOH,eaSOH,soh_ea,SOH_EA = null,lastrcvdqty=null,pack_size=null;

		//System.out.println("Random Weighed article Query"+data.getText("randomweighedarticles") );
		String random_weighed_articles_sql = data.getText("randomweighedarticles");
		results = sql.executeQuery(getContext(), random_weighed_articles_sql);replacenullToZero(results);
		if(results.size()!=0)
		{			
			int num = 2;// common.RandomFromDB(results);
			System.out.println(num);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+ranArticle+";;;Info");
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+results.get(num).toString()+";;;Info");
			ranArticleDesc = results.get(num).get(1).toString();
			//ranArtPLU = results.get(num).get(4).toString();
			articleOM = results.get(num).get(5).toString();
			piOM = results.get(num).get(6).toString();
			kgSOH = results.get(num).get(7).toString();
			eaSOH = results.get(num).get(8).toString();
			pack_size = results.get(num).get(8).toString();
			pack_size = decimalFormat(pack_size);

			List myList = new ArrayList();
			myList.add(ranArticle);
			myList.add(ranArticleDesc);
			myList.add(articleOM);
			myList.add(piOM);
			myList.add(kgSOH);
			myList.add(eaSOH);
			waitFor(1);

			List<List<Object>> list_reasonCodes = StringToListCreation("Damaged Stock:Out of Date:Rvse Damaged Stock:Rvse Out of Date:Stock Write-Off:Rvse Stock Write Off:Insurance Stock:Rvse Insurance Stock:Theft:Sample Stock:Rvse Sample Stock:Rvse Theft:+Stock Correction:-Stock Correction");
			int listCnt = list_reasonCodes.get(0).size();
			int index = (int)(Math.random() * listCnt);
			String reasonCode = list_reasonCodes.get(0).get(index).toString();
			htmlToExtent(cName, mName, extLogger, driver, "resasoncode - "+reasonCode+";;;Info");
			String mulFactor_sql = data.getText("multiplefactor").replace("reasoncodes", reasonCode);
			results = sql.executeQuery(getContext(), mulFactor_sql);
			String multFactor="";if(results.size()!=0){multFactor = results.get(0).get(0).toString();}
			myList.add(reasonCode);
			myList.add(multFactor);
			String allCharityCodes_sql = data.getText("charitycodes");
			results = sql.executeQuery(getContext(), allCharityCodes_sql);
			int num3 = common.RandomFromDB(results);
			String charityCode = results.get(num3).get(1).toString();
			myList.add(charityCode);
			myList.add(pack_size);
			String test=data.getText("testcase");
			String KGValue = data.getText("KGValue");
			String CARValue = data.getText("CARValue");
			String validation99 = data.getText("validation99");
			String validation999 = data.getText("validation999");
			String endEASOH = data.getText("endEASOH");
			String endKGSOH = data.getText("endKGSOH");

			objStockAdjPage.fnStockAdjustmentRandomWeighedArticles(objStockAdj,myList,ranArticle,driver);
			objStockAdjPage.fnAdjustSohRandomWeighedArticles(objStockAdj,myList,validation99,validation999,driver);
			objStockAdjPage.fnAdjustSohRandomWeighedArticlesKGandCAR(objStockAdj,myList, KGValue, CARValue,driver);
			objStockAdjPage.fnAdjustSohRandomWeighedArticleForPIVerify(objStockAdj,myList, endEASOH, endKGSOH,driver);

			//Recent History check
			String recentHistory_sql = data.getText("recenthistory").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), recentHistory_sql);
			recentHisList = objStockAdjPage.RHdetails(results);
			objStockAdjPage.recentHistoryCheck(objStockAdj, myList,recentHisList,driver);


			/*	String History_sql = data.getText("history").replace("article_num", ranArticle);
			results = sql.executeQuery(getContext(), History_sql);
			objStockAdjPage.History(objStockAdj, myList,results);
			waitFor(1);
			 */
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "No Weighed Article found in DB ;;;Pass");
			//Report_AddStep("testcase", "No Weighed Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verifying Stock Adjustment from lookup for Random Weight Articles")
	public void verifylookupRandomWeightArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		List<List<Object>> results;
		TestStatus status = getTestStatus();
		try
		{
		navToEnhancedarticle(status);
		//String randomWeightArticle ="120044";

		String randomWeightArticle;

		//System.out.println("Random article Query"+data.getText("RandomWeightArticles") );
		String Rweight_articles_sql = data.getText("RandomWeightArticles");
		results = sql.executeQuery(getContext(), Rweight_articles_sql);
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			//System.out.println("Db values"+ num);
			randomWeightArticle = results.get(num).get(0).toString();
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+randomWeightArticle+";;;Pass");
			objStockAdj.searchText.sendKeys(randomWeightArticle);
			waitFor(1);
			click(objStockAdj.clickGO);
			waitForJSandJQueryToLoad(driver);

			//String sohValue = getText(objStockAdj.sohValue);
			click(objStockAdj.sohValue);
			String sohTitle = getText(objStockAdj.sohArticleTitle);
			sohTitle = sohTitle.replaceAll("\\s+","");
			String[] parts = sohTitle.split("-");
			if(randomWeightArticle.contains(parts[0])){
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment can be done for Random Weight Article :"+randomWeightArticle +" from Lookup screen;;;Pass");
				//Report_AddStep("testcase", "Stock adjustment can be done for Random Weight Article :"+randomWeightArticle +" from Lookup screen","","", "Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Stock adjustment Fails for Parent Article :"+randomWeightArticle +" from Lookup screen;;;Fail");
				//Report_AddStep("testcase","Stock adjustment Fails for Parent Article :"+randomWeightArticle +" from Lookup screen","","", "Fail");
			}

		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Random Weight Article found in DB;;;Pass");
			//Report_AddStep("testcase", "No Random Weight Article found in DB ","" ,"" , "Pass");

		}

		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check WareHouse Delivery")
	public void checkWHDeliveryCPBD() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{	
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		List<List<Object>> results,cpbdResults,allCpbdResults;

		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		String ranArticle,o_no,baseUOM,om,recv_qty;	
		String articles_sql = data.getText("cpbdArticles"); 
		results = sql.executeQuery(getContext(), articles_sql);	// to get article number

		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+ranArticle+";;;Pass");
			o_no = results.get(num).get(1).toString();

			recv_qty = results.get(num).get(2).toString();
			String cpbdArt = data.getText("getCPBDArticle").replace("art_no", ranArticle); 
			cpbdResults = sql.executeQuery(getContext(), cpbdArt);
			String cpbdArticle =  cpbdResults.get(0).get(0).toString();
			om = cpbdResults.get(0).get(1).toString();
			String allCpbdArt = data.getText("allCPBDArticle").replace("carArt", cpbdArticle); 
			allCpbdResults = sql.executeQuery(getContext(), allCpbdArt);
			baseUOM =  allCpbdResults.get(0).get(1).toString();
			click(objStockAdj.sohSearchBox);
			objStockAdj.sohSearchBox.sendKeys(ranArticle);
			click(objStockAdj.sohArticleSearch);
			waitFor(5);
			selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Over Delivery");
			click(objStockAdj.orderSearch);
			objStockAdjPage.orderSelect(objStockAdj,o_no,driver); 
			objStockAdjPage.authcode(objStockAdj,500);
			objStockAdjPage.warehouseCPBDSOHCalc(objStockAdj,baseUOM, om, recv_qty,1,driver);
			objStockAdj.saveSOH.click();
			try
			{
				if(objStockAdj.contYes.isDisplayed())
				{
					objStockAdj.contYes.click();
				}
			}
			catch(WebDriverException warning99)
			{

			}
			waitFor(3);
			try
			{
				if(objStockAdj.successmsg.isDisplayed())
				{
					htmlToExtent(cName,mName,extLogger,driver,"Stock Adjustment is posted successfully for CPBD Article;;;Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Stock Adjustment is posted successfully for CPBD Article;;;Fail");
				}
			}
			catch(WebDriverException e)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Stock Adjustment is posted successfully for CPBD Article;;;Fail");
			}
			objStockAdj.SuccessMessageClose.click();
			click(objStockAdj.sohSearchBox);
			objStockAdj.sohSearchBox.sendKeys(ranArticle);
			click(objStockAdj.sohArticleSearch);
			waitFor(5);
			selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Under Delivery");
			click(objStockAdj.orderSearch);
			objStockAdjPage.orderSelect(objStockAdj,o_no,driver); 
			objStockAdjPage.authcode(objStockAdj,500);
			boolean adjustable = objStockAdjPage.warehouseCPBDSOHCalc(objStockAdj,baseUOM, om, recv_qty,2,driver);
			if(adjustable==true)
			{
				objStockAdj.saveSOH.click();
				try
				{
					if(objStockAdj.contYes.isDisplayed())
					{
						objStockAdj.contYes.click();
					}
				}
				catch(WebDriverException warning99)
				{

				}
				try
				{
					if(objStockAdj.successmsg.isDisplayed())
					{
						htmlToExtent(cName,mName,extLogger,driver,"Stock Adjustment is posted successfully for CPBD Article;;;Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Stock Adjustment is posted successfully for CPBD Article;;;Fail");
					}
				}
				catch(WebDriverException e)
				{
					htmlToExtent(cName,mName,extLogger,driver,"Stock Adjustment is posted successfully for CPBD Article;;;Fail");
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Warehouse Under delivery cannot be done for this article as received qty is lesser than pack size of the article;;;Pass");
			}

		}

		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles in DB;;;Fail");
		}


		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Warehouse Over Delivery for Weighted and RandomWeighted Article")
	public void checkWHDelWeiRandomWeiArt() //throws IOException, AWTException, SQLException
	{
		List<List<Object>> artResult;
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+2;}
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		List articles = new ArrayList<>();
		articles.add("weightedArt");
		articles.add("ranWeiArt");
		for(int i=0;i<2;i++)
		{
			String artType="";
			if(i==0)
			{
				artType="Weighted";
			}
			else
			{
				artType = "Random Weighted";
			}
			//Warehouse Over Delivery
			String art = data.getText(articles.get(i).toString());
			artResult = sql.executeQuery(getContext(),art);

			if(artResult.size()!=0)
			{
				int ran = common.RandomFromDB(artResult);
				String ranWeightedArt = artResult.get(ran).get(0).toString();
				htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+ranWeightedArt+";;;Pass");
				//System.out.println("Article: "+ranWeightedArt);
				String o_no = artResult.get(ran).get(1).toString();
				String recvQty = artResult.get(ran).get(3).toString();
				//backuntil(objStockAdj.stockAdjustment);
				//backuntil(objStockAdj.searchArticle);
				click(objStockAdj.sohSearchBox);
				objStockAdj.sohSearchBox.sendKeys(ranWeightedArt);
				click(objStockAdj.sohArticleSearch);
				waitFor(2);
				try
				{
					if(objStockAdj.whseWarnClose.isDisplayed())
					{
						click(objStockAdj.whseWarnClose);
					}
				}
				catch(WebDriverException e)
				{

				}
				waitFor(2);
				selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Over Delivery");
				waitFor(2);
				click(objStockAdj.orderSearch);
				objStockAdjPage.orderSelect(objStockAdj,o_no,driver); 
				waitFor(3);
				objStockAdjPage.authcode(objStockAdj,500);
				//objStockAdjPage.warehouseCPBDSOHCalc(objStockAdj,baseUOM, om, recv_qty,1);
				waitFor(1);
				int qty = doubleToInt(recvQty)+1;
				waitFor(3);
				if(i==0)
				{
					try
					{
						objStockAdj.adjustSohPI.sendKeys(Integer.toString(qty));
					}
					catch(WebDriverException e)
					{
							
					}
					waitFor(2);
					try
					{
						objStockAdj.adjustSohPI1.sendKeys(Integer.toString(qty));
					}
					catch(WebDriverException e)
					{
							
					}
					
				}
				else
				{
					try
					{
						if(objStockAdj.adjustRanWeiKG.isDisplayed())
						{
							objStockAdj.adjustRanWeiKG.sendKeys(Integer.toString(qty));
						}
					}
					catch(WebDriverException kg)
					{

					}
					try
					{
						if(objStockAdj.adjustRanWeiCA1.isDisplayed())
						{
							objStockAdj.adjustRanWeiCA1.sendKeys(Integer.toString(qty));
						}
					}
					catch(WebDriverException kg)
					{

					}

				}
				objStockAdj.saveSOH.click();
				try
				{
					if(objStockAdj.contYes.isDisplayed())
					{
						objStockAdj.contYes.click();
					}
				}
				catch(WebDriverException warning99)
				{

				}
				waitFor(3);
				try
				{
					if(objStockAdj.successmsg.isDisplayed())
					{
						htmlToExtent(cName,mName,extLogger,driver,"Warehouse Over delivery - Stock Adjustment is posted successfully for "+artType+" Article;;;Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Warehouse Over delivery - Stock Adjustment is posted successfully for "+artType+" Article;;;Fail");
					}
				}
				catch(WebDriverException e)
				{
					htmlToExtent(cName,mName,extLogger,driver,"Warehouse Over delivery - Stock Adjustment is posted successfully for "+artType+" Article;;;Fail");
				}
				objStockAdj.SuccessMessageClose.click();
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "No "+artType+" Articles with active orders are available in DB to do Warehouse Over delivery;;;Fail");
			}
			//Warehouse Under Delivery
			art = data.getText(articles.get(i).toString());
			artResult = sql.executeQuery(getContext(),art);
			if(artResult.size()!=0)
			{
				int weiRan = common.RandomFromDB(artResult);
				String ranWeiArticle = artResult.get(weiRan).get(0).toString();
				String o_no = artResult.get(weiRan).get(1).toString();
				//System.out.println("Order no:"+o_no);
				String dmd = data.getText("recvQty").replace("art_no", ranWeiArticle);
				List<List<Object>> dmdQty = sql.executeQuery(getContext(),dmd);
				String demQty="0";
				if(dmdQty.size()!=0)
				{
					demQty = dmdQty.get(0).get(0).toString();
				}
				//backuntil(objStockAdj.stockAdjustment);
				//objStockAdj.wHseUnder.click();
				//objStockAdj.footerNext.click();
				//			positiveWareHouseFlow(ranCPBDArticle,o_no,demQty,"under");
				click(objStockAdj.sohSearchBox);
				objStockAdj.sohSearchBox.sendKeys(ranWeiArticle);
				click(objStockAdj.sohArticleSearch);
				waitFor(2);
				try
				{
					if(objStockAdj.whseWarnClose.isDisplayed())
					{
						click(objStockAdj.whseWarnClose);
					}
				}
				catch(WebDriverException e)
				{

				}
				waitFor(2);
				selectByVisibleText(objStockAdj.reasonsForSOH,"W/hse Under Delivery");
				click(objStockAdj.orderSearch);
				objStockAdjPage.orderSelect(objStockAdj,o_no,driver); 
				objStockAdjPage.authcode(objStockAdj,500);
				waitFor(1);
				//objStockAdjPage.warehouseCPBDSOHCalc(objStockAdj,baseUOM, om, recv_qty,1);
				//int qty = doubleToInt(demQty)-1;
				if(i==0)
				{
					//objStockAdj.adjustSohPI.sendKeys(Integer.toString(qty));
					try
					{
						objStockAdj.adjustSohPI.sendKeys("0.1");
					}
					catch(WebDriverException e)
					{
							
					}
					waitFor(2);
					try
					{
						objStockAdj.adjustSohPI1.sendKeys("0.1");
					}
					catch(WebDriverException e)
					{
							
					}
				}
				else
				{
					try
					{
						if(objStockAdj.adjustRanWeiKG.isDisplayed())
						{
							objStockAdj.adjustRanWeiKG.sendKeys("0.1");
						}
					}
					catch(WebDriverException kg)
					{

					}
					try
					{
						if(objStockAdj.adjustRanWeiCA1.isDisplayed())
						{
							objStockAdj.adjustRanWeiCA1.sendKeys("0.1");
						}
					}
					catch(WebDriverException kg)
					{

					}
				}
				objStockAdj.saveSOH.click();
				try
				{
					if(objStockAdj.contYes.isDisplayed())
					{
						objStockAdj.contYes.click();
					}
				}
				catch(WebDriverException warning99)
				{

				}
				waitFor(3);
				try
				{
					if(objStockAdj.successmsg.isDisplayed())
					{
						htmlToExtent(cName,mName,extLogger,driver,"Warehouse Under delivery - Stock Adjustment is posted successfully for "+artType+" Article;;;Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Warehouse Under delivery - Stock Adjustment is posted successfully for "+artType+" Article;;;Fail");
					}
				}
				catch(WebDriverException e)
				{
					htmlToExtent(cName,mName,extLogger,driver,"Warehouse Under delivery - Stock Adjustment is posted successfully for "+artType+" Article;;;Fail");
				}
				objStockAdj.SuccessMessageClose.click();
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "No "+artType+" Articles with active orders are available in DB to do Warehouse Under delivery;;;Fail");
			}

		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	

	//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "checkIDTPurchaseCPBD")
	public void checkIDTPurchaseCPBDArt() //throws IOException, AWTException,	SQLException, NumberFormatException, ParseException 
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);

		if(StoreNo.equals("3064")||StoreNo.equals("1786")||StoreNo.equals("1338")||StoreNo.equals("1108"))

		{
			List<List<Object>> IDTPurLimit_Results;
			List<List<Object>> IDTresults,IDTRanresults;
			String IDTArt_sql = data.getText("getIDTarticle");
			String IDTranArticle;
			IDTresults = sql.executeQuery(getContext(), IDTArt_sql);
			
			
			if(IDTresults.size()!=0)
			{
				int num = common.RandomFromDB(IDTresults);
				int numRan = common.RandomFromDB(IDTresults);
				IDTranArticle = IDTresults.get(num).get(0).toString();
				htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+IDTranArticle+";;;Pass");
				String randomIDTArt = IDTresults.get(numRan).get(0).toString();
				if (IDTresults.size() != 0) {
					//System.out.println(IDTranArticle);
					objStockAdj.sohSearchBox.clear();
					objStockAdj.sohSearchBox.sendKeys(IDTranArticle);
					objStockAdj.sohArticleSearch.click();
					waitFor(5);
					if(objStockAdj.noClaimList.size()!=0)
					{
						objStockAdj.noClaim.click();
						waitFor(2);
					}
					waitFor(2);
					selectByValue(objStockAdj.reasonsForSOH, "76");
					objStockAdj.adjSOHvalue.sendKeys("1");
					selectByIndex(objStockAdj.subcatDD,1);
					String commentIDT_appl = "comments for "+IDTranArticle+""; //check
					objStockAdj.IDTcomments.sendKeys(commentIDT_appl);
					objStockAdj.saveSOH.click();
					try
					{
						if(objStockAdj.warning99.isDisplayed())
						{
							objStockAdj.warning99.click();
						}
					}
					catch(WebDriverException war99)
					{

					}
					try{
						if(objStockAdj.unReceivedPopup.isDisplayed())
						{
							objStockAdj.continueBtn.click();
						}
					}
					catch(WebDriverException unrec)
					{

					}
					try
					{
						if(objStockAdj.SuccessMessage.isDisplayed())
						{
							htmlToExtent(cName,mName,extLogger,driver, "IDT is posted successfully;;;Pass");
							objStockAdj.SuccessMessageClose.click();
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "IDT is posted successfully;;;Fail");
						}
					}
					catch(WebDriverException revIDT)
					{
						htmlToExtent(cName,mName,extLogger,driver, "IDT is posted successfully;;;Fail");
					}
					objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
					objStockAdj.sohSearchBox.clear();
					objStockAdj.sohSearchBox.sendKeys(IDTranArticle);
					objStockAdj.sohArticleSearch.click();
					waitFor(5);
					if(objStockAdj.noClaimList.size()!=0)
					{
						objStockAdj.noClaim.click();
						waitFor(2);
					}
					waitFor(2);
					selectByValue(objStockAdj.reasonsForSOH, "26");
					selectByIndex(objStockAdj.subcatDD1,1);
					selectByIndex(objStockAdj.idtToQtyList, 1);
					String commentIDT_applRev = "comments for Rev IDT "+IDTranArticle+""; //check
					objStockAdj.IDTcomments.sendKeys(commentIDT_applRev);
					objStockAdj.saveSOH.click();

					try{
						if(objStockAdj.unReceivedPopup.isDisplayed())
						{
							objStockAdj.continueBtn.click();
						}
					}
					catch(WebDriverException unrec)
					{

					}
					try
					{
						if(objStockAdj.SuccessMessage.isDisplayed())
						{
							htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is posted successfully;;;Pass");
							objStockAdj.SuccessMessageClose.click();
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is posted successfully;;;Fail");
						}
					}
					catch(WebDriverException revIDT)
					{
						htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is posted successfully;;;Fail");
					}

				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "No IDT Records found;;;Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "IDT is not applicable for other than Super Market;;;Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check CPBP Articles")
	public void cpbpArticles() //throws IOException, AWTException, SQLException, NumberFormatException, ParseException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+10;}
		List<List<Object>> results,allCpbdArt,allCpbdArtDB,allCpbdArtDB1,recHistDB;
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		objStockAdjPage.clickOnArticle(objStockAdj,driver);
		String cpbpArt = data.getText("cpbdArticles");
		results = sql.executeQuery(getContext(), cpbpArt);
		if(results.size()!=0){
		int num = common.RandomFromDB(results);
		String ranArticle = results.get(num).get(0).toString();
		htmlToExtent(cName, mName, extLogger, driver, "Below details is for article - "+ranArticle+";;;Pass");
		String carArt = results.get(num).get(2).toString();
		String currSoh = results.get(num).get(3).toString();
		//System.out.println("Car Article: "+carArt);
		waitFor(3);
		objStockAdj.searchBox.clear();
		objStockAdj.searchBox.sendKeys(ranArticle);
		//System.out.println(ranArticle);
		objStockAdj.articleGO.click();
		waitFor(10);
		objStockAdj.soh.click();
		List<String> cpbdArtUI = new ArrayList<String>();
		int allArtUI = objStockAdj.allCpbdArt.size();
		for (int i=0;i<allArtUI;i++)
		{
			cpbdArtUI.add(objStockAdj.allCpbdArt.get(i).getText().trim());
		}
		//System.out.println(cpbdArtUI);
		List<String> cpbdArtDB = new ArrayList<String>();
		String cpbpArticle = data.getText("allCPBDArticle").replace("carArt", carArt);
		allCpbdArt = sql.executeQuery(getContext(), cpbpArticle);
		String[] all3Art = null;
		for(int j = 0;j<allCpbdArt.size();j++)
		{
			cpbdArtDB.add(allCpbdArt.get(j).get(0).toString());
		}
		//System.out.println(cpbdArtDB);
		if (cpbdArtUI.containsAll(cpbdArtDB)) {
			//System.out.println("Array comparision");
			htmlToExtent(cName,mName,extLogger,driver, "The Articles are allowed to edit SOH in all the levels;;;Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver, "The Articles are allowed to edit SOH in all the levels;;;Fail");
		}
		waitFor(3);
		objStockAdj.selectSOH.get(0).click();
		objStockAdjPage.checkAllRC();
		objStockAdjPage.warning99checkCPBD(objStockAdj,1,1,doubleToInt(currSoh),driver);
		objStockAdjPage.warning999checkCPBD(objStockAdj,1,1,doubleToInt(currSoh),driver);
		//System.out.println("End SOH: "+currSoh);
		int sohInput = doubleToInt(currSoh)+1;
		//System.out.println("Soh: "+sohInput);
		//selectByValue(objStockAdj.reasonsForSOH, "PI");
		objStockAdj.adjustSohPI.clear();
		objStockAdj.adjustSohPI.sendKeys(Integer.toString(sohInput));
		objStockAdj.saveSOH.click();

		try{
			if(objStockAdj.contYes.isDisplayed())
			{
				objStockAdj.contYes.click();
			}
		}
		catch(WebDriverException contYes)
		{

		}
		try{
			if(objStockAdj.continueBtn.isDisplayed())
			{
				objStockAdj.continueBtn.click();
			}
		}
		catch(WebDriverException unorderCont)
		{

		}
		try
		{
			if (objStockAdj.SuccessMessage.isDisplayed())
			{
				//System.out.println("Success message is displayed");
				htmlToExtent(cName,mName,extLogger,driver, "Soh is adjusted successfully;;;Pass");
				objStockAdj.SuccessMessageClose.click();
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "Soh is not adjusted successfully;;;Fail");
			}
		}
		catch(WebDriverException succSoh)
		{
			htmlToExtent(cName,mName,extLogger,driver, "Soh is not adjusted successfully;;;Fail");
			//Report_AddStep("testcase","Soh is adjusted successfully","", "", "Fail");
		}

		String indUOMQty = allCpbdArt.get(0).get(1).toString();
		int carValue = sohInput/doubleToInt(indUOMQty);
		int eaValue = sohInput%doubleToInt(indUOMQty);
		objStockAdjPage.sohSplit(objStockAdj,carValue,eaValue,driver);
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		waitFor(3);
		objStockAdj.sohSearchBox.sendKeys(ranArticle);
		objStockAdj.sohArticleSearch.click();
		//System.out.println("End SOH: "+currSoh);
		int sohInputInSDJScreen = doubleToInt(currSoh)+2;
		//System.out.println("Soh2: "+sohInputInSDJScreen);
		waitFor(2);
		selectByValue(objStockAdj.reasonsForSOH, "PI");
		objStockAdjPage.warning99checkCPBD(objStockAdj,1,1,doubleToInt(currSoh)+1,driver);
		objStockAdjPage.warning999checkCPBD(objStockAdj,1,1,doubleToInt(currSoh)+1,driver);
		objStockAdj.adjustSohPI.clear();
		objStockAdj.adjustSohPI.sendKeys(Integer.toString(sohInputInSDJScreen));
		objStockAdj.saveSOH.click();
		try{
			if(objStockAdj.contYes.isDisplayed())
			{
				objStockAdj.contYes.click();
			}
		}
		catch(WebDriverException contYes)
		{

		}
		try{
			if(objStockAdj.continueBtn.isDisplayed())
			{
				objStockAdj.continueBtn.click();
			}
		}
		catch(WebDriverException unorderCont)
		{

		}
		try
		{
			if (objStockAdj.SuccessMessage.isDisplayed())
			{
				//System.out.println("Success message is displayed");
				htmlToExtent(cName,mName,extLogger,driver, "Soh is adjusted successfully;;;Pass");
				objStockAdj.SuccessMessageClose.click();
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "Soh is adjusted successfully;;;Fail");
			}
		}
		catch(WebDriverException succSoh)
		{
			htmlToExtent(cName,mName,extLogger,driver, "Soh is adjusted successfully;;;Fail");
		}
		//Recent History Check
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		String cpbpArtRecHistory = data.getText("recenthistory").replace("article_num", ranArticle);
		recHistDB = sql.executeQuery(getContext(), cpbpArtRecHistory);
		List<List<Object>> recentHisListDB = objStockAdjPage.RHdetails(recHistDB);
		List myList = new ArrayList();
		myList.add(ranArticle);
		objStockAdjPage.recentHistoryCheck(objStockAdj, myList, recentHisListDB,driver);
		//Recent History Check End
		String cpbpArticleAfterUpdate1 = data.getText("allCPBDArticle").replace("carArt", carArt);
		allCpbdArtDB1 = sql.executeQuery(getContext(), cpbpArticleAfterUpdate1);
		String soh_qty1 = allCpbdArtDB1.get(0).get(3).toString();
		if(sohInputInSDJScreen==doubleToInt(soh_qty1))
		{
			//System.out.println("SOH is updated successfully in DB");
			htmlToExtent(cName,mName,extLogger,driver,"SOH is updated successfully in backend;;;Pass");
		}
		else{
			//System.out.println("SOH is not updated successfully in DB");
			htmlToExtent(cName,mName,extLogger,driver,"SOH is updated successfully in backend;;;Fail");
		}
		//History Check
		String History_sql = data.getText("history").replace("article_num", ranArticle);
		results = sql.executeQuery(getContext(), History_sql);
		objStockAdjPage.History(objStockAdj, myList,results,driver);
		//History check End
		}else{
			htmlToExtent(cName,mName,extLogger,driver,"No article found in DB;;;Fail");
			}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "MPK and CAR articles")
	public void mpkAndCARArticles() //throws IOException, AWTException, SQLException
	{		
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+7;}
		List<List<Object>> results,allCpbdArt,packSize,allCpbdArtDB;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		String cpbpArt = data.getText("cpbdArticles");
		results = sql.executeQuery(getContext(), cpbpArt);
		if(results.size()!=0){
		int num = common.RandomFromDB(results);
		String ranArticle = results.get(num).get(0).toString();
		htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+ranArticle+";;;Pass");
		String carArt = results.get(num).get(2).toString();
		//System.out.println("Car Article: "+carArt);
		
		objStockAdjPage.clickOnArticle(objStockAdj,driver);
		//objStockAdj.searchBox.clear();
		objStockAdj.searchBox.sendKeys(ranArticle);
		//System.out.println(ranArticle);
		objStockAdj.articleGO.click();
		waitForJSandJQueryToLoad(driver);
		objStockAdj.soh.click();
		int allArtUI = objStockAdj.allCpbdArt.size();
		for (int i=1;i<allArtUI;i++)
		{
			objStockAdj.selectSOH.get(i).click();
			waitFor(2);
			selectByValue(objStockAdj.reasonsForSOH, "PI");
			try
			{
				if(objStockAdj.piErrorForMPKandCAR.isDisplayed())
				{
					htmlToExtent(cName,mName,extLogger,driver,"PI verify is restricted for MPK and CAR Articles;;;Pass");
					//Report_AddStep("testcase","PI verify is restricted for MPK and CAR Articles","", "", "Pass");
					objStockAdj.piErrorForMPKandCARPopUp.click();
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"PI verify is restricted for MPK and CAR Articles;;;Fail");
					//Report_AddStep("testcase","PI verify is restricted for MPK and CAR Articles","", "", "Fail");
				}
			}
			catch(WebDriverException piVerify)
			{
				htmlToExtent(cName,mName,extLogger,driver,"PI verify is restricted for MPK and CAR Articles;;;Fail");
				//Report_AddStep("testcase","PI verify is restricted for MPK and CAR Articles","", "", "Pass");
			}
			if(i==(allArtUI-1))
			{
				break;
			}
			objStockAdjPage.clickOnArticle(objStockAdj,driver);
			objStockAdj.searchBox.clear();
			objStockAdj.searchBox.sendKeys(ranArticle);
			objStockAdj.articleGO.click();
			waitFor(10);
			objStockAdj.soh.click();
		}
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		String cpbpArticle = data.getText("allCPBDArticle").replace("carArt", carArt);
		allCpbdArt = sql.executeQuery(getContext(), cpbpArticle);
		//System.out.println("Size of DB entry: "+allCpbdArt.size());
		for(int j = 1;j<allCpbdArt.size();j++)
		{
			String art = allCpbdArt.get(j).get(0).toString();

			String indUOMQty = allCpbdArt.get(0).get(1).toString();
			String soh = allCpbdArt.get(0).get(3).toString();
			String indUOMQty2= allCpbdArt.get(j).get(1).toString();
			int packSiz = doubleToInt(indUOMQty)/doubleToInt(indUOMQty2); 
			//System.out.println("Articles are: "+art);
			objStockAdj.sohSearchBox.sendKeys(art);
			//System.out.println("indUOMQTY: "+indUOMQty);
			objStockAdj.sohArticleSearch.click();
			waitForJSandJQueryToLoad(driver);
			selectByValue(objStockAdj.reasonsForSOH, "PI");
			try
			{
				if(objStockAdj.piErrorForMPKandCAR.isDisplayed())
				{
					htmlToExtent(cName,mName,extLogger,driver,"PI verify is restricted for MPK and CAR Articles;;;Pass");
					objStockAdj.piErrorForMPKandCARPopUp.click();
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"PI verify is restricted for MPK and CAR Articles;;;Fail");
				}
			}
			catch(WebDriverException piVerifySDJ)
			{
				htmlToExtent(cName,mName,extLogger,driver,"PI verify is restricted for MPK and CAR Articles;;;Fail");
			}
			if(j==1)
			{
				objStockAdjPage.adjustAndEndSOHCheck(objStockAdj,driver);
			}
			selectByValue(objStockAdj.reasonsForSOH, "32");
			objStockAdjPage.warning99checkCPBD(objStockAdj,packSiz,0,doubleToInt(soh),driver);
			objStockAdjPage.warning999checkCPBD(objStockAdj,packSiz,0,doubleToInt(soh),driver);
			//String beforeEndSoh = null;
			WebElement e = prepareWebElementWithDynamicXpathWithInt(objStockAdj.endSOHValue1, 2, driver);
			if(!e.isDisplayed()){e = prepareWebElementWithDynamicXpathWithInt(objStockAdj.endSOHValue1, 1, driver);}
			String beforeEndSoh = e.getText();
			//try{beforeEndSoh = objStockAdj.endSOHValue.getText();}catch(Exception e){}
			//if(beforeEndSoh.equals("")){beforeEndSoh="0";}
			objStockAdj.adjustSohPI.sendKeys("2");			
			String adjustSoh = objStockAdj.endSohValueAdj.getText();
			int adjSohCalc = packSiz*2;
			int afterEndSoh = doubleToInt(beforeEndSoh)+adjSohCalc;
			//System.out.println("adj from db: "+adjSohCalc);
			//System.out.println("adj from UI: "+adjustSoh);
			if(adjSohCalc==(Integer.parseInt(adjustSoh)))
			{
				//System.out.println("Value entered is in terms of individual article uom");
				htmlToExtent(cName,mName,extLogger,driver,"Value entered by user in Adjust SOH by text box must be in terms of Individual Article's UOM level;;;Pass");
				//Report_AddStep("testcase","Value entered by user in Adjust SOH by text box must be in terms of Individual Article's UOM level","", "", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Value entered by user in Adjust SOH by text box must be in terms of Individual Article's UOM level;;;Fail");
				//Report_AddStep("testcase","Value entered by user in Adjust SOH by text box must be in terms of Individual Article's UOM level","", "", "Fail");
			}
			if(Integer.parseInt(e.getText())==afterEndSoh)
			{
				//System.out.println("End SOH is in terms of individual article uom");
				htmlToExtent(cName,mName,extLogger,driver,"For MPK and CAR Article values of End SOH is calculated in terms of Reference Article UOM;;;Pass");
				//Report_AddStep("testcase","For MPK and CAR Article values of End SOH is calculated in terms of Reference Article UOM","", "", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"For MPK and CAR Article values of End SOH is calculated in terms of Reference Article UOM;;;Fail");
				//Report_AddStep("testcase","For MPK and CAR Article values of End SOH is calculated in terms of Reference Article UOM","", "", "Fail");
			}
			objStockAdj.saveSOH.click();
			waitForJSandJQueryToLoad(driver);
			try{
				if(objStockAdj.contYes.isDisplayed())
				{
					objStockAdj.contYes.click();waitForJSandJQueryToLoad(driver);
				}
			}
			catch(WebDriverException contYes)
			{

			}
			//waitFor(3);
			try{
				if(objStockAdj.continueBtn.isDisplayed())
				{
					objStockAdj.continueBtn.click();waitForJSandJQueryToLoad(driver);
				}
			}
			catch(WebDriverException unorderCont)
			{

			}
		//	waitFor(3);
			try
			{
				if (objStockAdj.SuccessMessage.isDisplayed())
				{
					//System.out.println("Success message is displayed");
					htmlToExtent(cName,mName,extLogger,driver,"Soh is adjusted successfully;;;Pass");
					//Report_AddStep("testcase","Soh is adjusted successfully","", "", "Pass");
					objStockAdj.SuccessMessageClose.click();
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Soh is adjusted successfully;;;Fail");
				}
			}
			catch(WebDriverException succSoh)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Soh is adjusted successfully;;;Fail");
			}
			if(j==allCpbdArt.size()-1)
			{
				break;
			}
			//objStockAdjPage.clickOnArticleReportReport(objStockAdj);
			try
			{
				objStockAdj.discard.click();
			}
			catch(WebDriverException discard1)
			{

			}
			String cpbpArticleAfterUpdate = data.getText("allCPBDArticle").replace("carArt", carArt);
			allCpbdArtDB = sql.executeQuery(getContext(), cpbpArticleAfterUpdate);
			String soh_qty = allCpbdArtDB.get(0).get(3).toString();
			if(afterEndSoh==doubleToInt(soh_qty))
			{
				//System.out.println("SOH is updated successfully in DB");
				htmlToExtent(cName,mName,extLogger,driver,"SOH is updated successfully in backend;;;Pass");
			}
			else{
				//System.out.println("SOH is not updated successfully in DB");
				htmlToExtent(cName,mName,extLogger,driver,"SOH is updated successfully in backend;;;Fail");
			}
		}
		objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
		try
		{
			objStockAdj.discard.click();
		}
		catch(WebDriverException discard1)
		{

		}}else
		{
			htmlToExtent(cName,mName,extLogger,driver,"no article found in DB;;;Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "CPBD EA Article - Unreceived Orders")
	public void cpbdArticleUnreceivedOrders() //throws IOException, AWTException, SQLException
	{
		List<List<Object>> results,orders = null;
		TestStatus status = getTestStatus();
		try{
		navToStockAdj(status);
		String all_articles_sql = data.getText("cpbdArticle");
		results = sql.executeQuery(getContext(), all_articles_sql);
		if(results.size()!=0){
		int num = common.RandomFromDB(results);
		String ranArticle = results.get(num).get(2).toString();
		htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+ranArticle+";;;Pass");
		/*List ord=new ArrayList();
		for(int k=0;k<results.get(num).size();k++)
		{
			ord.add(results.get(num).get(k).toString());
		}
		orders.add(ord);*/
		//System.out.println("Article: "+ranArticle);
		String orderSQL = data.getText("orders").replace("art_no", ranArticle);
		orders = sql.executeQuery(getContext(), orderSQL);
		//System.out.println("Orders "+orders);
		objStockAdj.sohSearchBox.clear();
		objStockAdj.sohSearchBox.sendKeys(ranArticle);
		objStockAdj.sohArticleSearch.click();
		waitForJSandJQueryToLoad(driver);
		selectByVisibleText(objStockAdj.reasonsForSOH, "+Stock Correction");
		//selectByValue(objStockAdj.reasonsForSOH, "55");
		objStockAdj.adjSOHvalue.sendKeys("1");
		objStockAdj.saveSOH.click();
		try{
			if(objStockAdj.unReceivedPopup.isDisplayed())
			{
				objStockAdjPage.orderCheck(objStockAdj,objStockAdj.unrecOrders,orders,driver);
				objStockAdj.continueBtn.click();
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No Unreceived orders Popup is displayed;;;Fail");
			}
		}
		catch(WebDriverException unrec)
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Unreceived orders Popup is displayed;;;Fail");
		}
		}else
		{
			htmlToExtent(cName,mName,extLogger,driver,"no article found in DB;;;Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Random weighted Article")
	public void checkIDTPurchaseRanWeiArt() //throws IOException, AWTException,	SQLException, NumberFormatException, ParseException 
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+1;}
		TestStatus status = getTestStatus();
		try
		{
		navToStockAdj(status);
		List<List<Object>> IDTresults;
		List articles = new ArrayList<>();
		articles.add("getIDTarticleWeiArt");
		articles.add("getIDTarticleRanWeiArt");

		if(StoreNo.equals("3064")||StoreNo.equals("1786")||StoreNo.equals("1338")||StoreNo.equals("1108"))

		{
			for(int i=0;i<2;i++)
			{
				String artType="";
				if(i==0)
				{
					artType="Weighted";
				}
				else
				{
					artType = "Random Weighted";
				}
				String IDTArt_sql = data.getText(articles.get(i).toString());
				IDTresults = sql.executeQuery(getContext(), IDTArt_sql);
				if (IDTresults.size() != 0) 
				{
					int numRan = common.RandomFromDB(IDTresults);
					String randomIDTArt = IDTresults.get(numRan).get(0).toString();
					htmlToExtent(cName,mName,extLogger,driver,"Below details is for article - "+randomIDTArt+";;;Pass");
					//System.out.println(randomIDTArt);
					objStockAdj.sohSearchBox.clear();
					objStockAdj.sohSearchBox.sendKeys(randomIDTArt);
					objStockAdj.sohArticleSearch.click();
					waitFor(5);
					if(objStockAdj.noClaimList.size()!=0)
					{
						objStockAdj.noClaim.click();
						waitFor(2);
					}
					waitFor(2);
					selectByValue(objStockAdj.reasonsForSOH, "76");
					waitFor(2);
					objStockAdj.adjSOHvalue.sendKeys("1");
					selectByIndex(objStockAdj.subcatDD,1);
					try
					{
						if(objStockAdj.whseWarnClose.isDisplayed())
						{
							click(objStockAdj.whseWarnClose);
						}
					}
					catch(WebDriverException e)
					{

					}
					String commentIDT_appl = "comments for "+randomIDTArt+""; //check
					objStockAdj.IDTcomments.sendKeys(commentIDT_appl);
					objStockAdj.saveSOH.click();
					try
					{
						if(objStockAdj.warning99.isDisplayed())
						{
							objStockAdj.warning99.click();
						}
					}
					catch(WebDriverException war99)
					{

					}
					try{
						if(objStockAdj.unReceivedPopup.isDisplayed())
						{
							objStockAdj.continueBtn.click();
						}
					}
					catch(WebDriverException unrec)
					{

					}
					try
					{
						if(objStockAdj.SuccessMessage.isDisplayed())
						{
							htmlToExtent(cName,mName,extLogger,driver, "IDT is posted successfully for "+artType+" Article;;;Pass");
							objStockAdj.SuccessMessageClose.click();
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "IDT is posted successfully for "+artType+" Article;;;Fail");
						}
					}
					catch(WebDriverException revIDT)
					{
						htmlToExtent(cName,mName,extLogger,driver, "IDT is posted successfully for "+artType+" Article;;;Fail");
					}
					objStockAdjPage.clickOnArticleReportReport(objStockAdj,driver);
					objStockAdj.sohSearchBox.clear();
					objStockAdj.sohSearchBox.sendKeys(randomIDTArt);
					objStockAdj.sohArticleSearch.click();
					waitFor(5);
					if(objStockAdj.noClaimList.size()!=0)
					{
						objStockAdj.noClaim.click();
						waitFor(2);
					}
					waitFor(2);
					try
					{
						if(objStockAdj.whseWarnClose.isDisplayed())
						{
							click(objStockAdj.whseWarnClose);
						}
					}
					catch(WebDriverException e)
					{

					}
					selectByValue(objStockAdj.reasonsForSOH, "26");
					selectByIndex(objStockAdj.subcatDD1,1);
					selectByIndex(objStockAdj.idtToQtyList, 1);
					String commentIDT_applRev = "comments for Rev IDT "+randomIDTArt+""; //check
					objStockAdj.IDTcomments.sendKeys(commentIDT_applRev);
					objStockAdj.saveSOH.click();

					try{
						if(objStockAdj.unReceivedPopup.isDisplayed())
						{
							objStockAdj.continueBtn.click();
						}
					}
					catch(WebDriverException unrec)
					{

					}
					try
					{
						if(objStockAdj.SuccessMessage.isDisplayed())
						{
							htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is posted successfully for "+artType+" Article;;;Pass");
							objStockAdj.SuccessMessageClose.click();
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is posted successfully for "+artType+" Article;;;Fail");
						}
					}
					catch(WebDriverException revIDT)
					{
						htmlToExtent(cName,mName,extLogger,driver, "Reverse IDT is posted successfully for "+artType+" Article;;;Fail");
					}

				}


				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "No IDT Records found;;;Fail");
				}

			}
		}

		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "IDT is not applicable for other than Super Market;;;Pass");
		}
		
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();

	}
	
	//Progression
	//Srivinith
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "CPBD EA Article - Unreceived Orders")
	public void reasonCodeValidation() //throws IOException, AWTException, SQLException
	{
		if(stockAdjArtpreCount2==-1){
			MCcount=MCcount+20;}
		List<List<Object>> results,orders = null;
		List<List<Object>> results1;
		TestStatus status = getTestStatus();
		try{
		//SMKT Store
		htmlToExtent(cName,mName,extLogger,driver,"SMKT Store;;;Pass");
		navToStockAdj(status);
		String articleNumberList = data.getText("randomArticle");
		results = sql.executeQuery(getContext(), articleNumberList);
		
		String reasonList = data.getText("reasonList");
		results1 = sql.executeQuery(getContext(), reasonList);
		
		if(results.size()!=0){
		int num = common.RandomFromDB(results);
		String ranArticle = results.get(num).get(0).toString();
		htmlToExtent(cName,mName,extLogger,driver,"The Article Number is "+ranArticle+";;;Pass");
		objStockAdjPage.reasonCodeValidation(ranArticle,results1,"SMKT","1",objStockAdj,objEnhancedArticleLookup,driver);
		
		objEnhancedarticleLookUpPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		objEnhancedArticleLookup.clickGO.click();
		waitForJSandJQueryToLoad(driver);	
		waitFor(1);
		objEnhancedArticleLookup.SOH.click();
		waitForJSandJQueryToLoad(driver);	
		waitFor(1);
		
		objStockAdjPage.reasonCodeValidation(ranArticle,results1,"SMKT","2",objStockAdj,objEnhancedArticleLookup,driver);
		}
		
		//BWS Store
		loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver);
		htmlToExtent(cName,mName,extLogger,driver,"BWS Store;;;Pass");
		navToStockAdjBWS(status);
		
		String articleNumberListBWS = data.getText("randomArticle");
		results = sql.executeQueryStore(getContext(), articleNumberListBWS,getContext().getStringProperty("BWSstore"));
		
		String reasonListBWS = data.getText("reasonList");
		results1 = sql.executeQueryStore(getContext(), reasonListBWS,getContext().getStringProperty("BWSstore"));
		
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver,"The Article Number is "+ranArticle+";;;Pass");
			objStockAdjPage.reasonCodeValidation(ranArticle,results1,"BWS","1",objStockAdj,objEnhancedArticleLookup,driver);
			
			objEnhancedarticleLookUpPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
			objEnhancedArticleLookup.clickGO.click();
			waitForJSandJQueryToLoad(driver);	
			waitFor(1);
			objEnhancedArticleLookup.SOH.click();
			waitForJSandJQueryToLoad(driver);	
			waitFor(1);
			
			objStockAdjPage.reasonCodeValidation(ranArticle,results1,"BWS","2",objStockAdj,objEnhancedArticleLookup,driver);
		}
		
		//Petrol Store
		loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver);
		htmlToExtent(cName,mName,extLogger,driver,"Petrol Store;;;Pass");
		navToStockAdjPetrol(status);
				
		String articleNumberListPetrol = data.getText("randomArticle");
		results = sql.executeQueryStore(getContext(), articleNumberListPetrol,getContext().getStringProperty("PetrolStore"));
				
		String reasonListPetrol = data.getText("reasonList");
		results1 = sql.executeQueryStore(getContext(), reasonListPetrol,getContext().getStringProperty("PetrolStore"));
				
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver,"The Article Number is "+ranArticle+";;;Pass");
			objStockAdjPage.reasonCodeValidation(ranArticle,results1,"Petrol","1",objStockAdj,objEnhancedArticleLookup,driver);
				
			objEnhancedarticleLookUpPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
			objEnhancedArticleLookup.clickGO.click();
			waitForJSandJQueryToLoad(driver);	
			waitFor(1);
			objEnhancedArticleLookup.SOH.click();
			waitForJSandJQueryToLoad(driver);	
			waitFor(1);
				
			objStockAdjPage.reasonCodeValidation(ranArticle,results1,"Petrol","2",objStockAdj,objEnhancedArticleLookup,driver);
		}
		
		//BigW Store
		loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver);
		htmlToExtent(cName,mName,extLogger,driver,"BigW Store;;;Pass");
		navToStockAdjBigW(status);
						
		String articleNumberListBigW = data.getText("randomArticle");
		results = sql.executeQueryStore(getContext(), articleNumberListBigW,getContext().getStringProperty("BigWstore"));
						
		String reasonListBigW = data.getText("reasonList");
		results1 = sql.executeQueryStore(getContext(), reasonListBigW,getContext().getStringProperty("BigWstore"));
						
		if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"The Article Number is "+ranArticle+";;;Pass");
				objStockAdjPage.reasonCodeValidation(ranArticle,results1,"BigW","1",objStockAdj,objEnhancedArticleLookup,driver);
						
				objEnhancedarticleLookUpPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
				objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
				objEnhancedArticleLookup.clickGO.click();
				waitForJSandJQueryToLoad(driver);	
				waitFor(1);
				objEnhancedArticleLookup.SOH.click();
				waitForJSandJQueryToLoad(driver);	
				waitFor(1);
						
				objStockAdjPage.reasonCodeValidation(ranArticle,results1,"BigW","2",objStockAdj,objEnhancedArticleLookup,driver);
			}
		
		//PEL Store
		loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver);
		htmlToExtent(cName,mName,extLogger,driver,"PEL Store;;;Pass");
		navToStockAdjPEL(status);
						
		String articleNumberListPEL = data.getText("randomArticle");
		results = sql.executeQueryStore(getContext(), articleNumberListPEL,getContext().getStringProperty("NZstore"));
								
		String reasonListPEL = data.getText("reasonList");
		results1 = sql.executeQueryStore(getContext(), reasonListPEL,getContext().getStringProperty("NZstore"));
								
		if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"The Article Number is "+ranArticle+";;;Pass");
				objStockAdjPage.reasonCodeValidation(ranArticle,results1,"PEL","1",objStockAdj,objEnhancedArticleLookup,driver);
							
				objEnhancedarticleLookUpPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
				objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
				objEnhancedArticleLookup.clickGO.click();
				waitForJSandJQueryToLoad(driver);	
				waitFor(1);
				objEnhancedArticleLookup.SOH.click();
				waitForJSandJQueryToLoad(driver);	
				waitFor(1);
								
				objStockAdjPage.reasonCodeValidation(ranArticle,results1,"PEL","2",objStockAdj,objEnhancedArticleLookup,driver);
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
		
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}	

	public void navToEnhancedarticle(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName, mName, extLogger, driver, "---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		if(System.getProperty("store")==null){
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName, mName, extLogger, driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("store"),"","", "Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objEnhancedarticleLookUpPage = loginPage.navToEnhancedarticle(getContext().getStringProperty("store"),driver);
		}else{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName, mName, extLogger, driver, "Login with the Store : " +store+";;;Pass");
			//Report_AddStep("testcase", "Login with the Store : " + store,"","", "Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objEnhancedarticleLookUpPage = loginPage.navToEnhancedarticle(store,driver);
		}

		log.info("-------------Navigate to Article Look Up Page------------");
		htmlToExtent(cName, mName, extLogger, driver,  "----------------Navigate to Article Look Up Page--------------------;;;Pass");
		//Report_AddStep("testcase", "----------------Navigate to Article Look Up Page--------------------","","", "Pass");
		objEnhancedarticleLookUpPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		waitFor(1);
		//driver.navigate().to("http://ngbo-acpt.gss.woolworths.com.au/StoreCentral/1005/articlelookup/onPageLoad.htm");
		//waitFor(1);
	}

	/*@BeforeMethod(alwaysRun=true)
	public void setUp(Method m,ITestContext testcontext  ITest annotation, Constructor testConstructor) throws IOException{	

		initializeTestcontext();

		 if (m.isAnnotationPresent(KnownBug.class)) 
	           doKnownBugs(annotation, testMethod); 
	           } 
	           } 

		if (getContext().getStringProperty("store").equals("5796")) 
		{ 
			annotation.setEnabled(false);
		}

		RunCondition annotation = m.getAnnotation(RunCondition.class);
	       if (annotation != null) {
	           int[] admissibleValues = annotation.envVar();
	           for (int val : admissibleValues) {
	               if (getContext().getStringProperty("store").equals(val)) {
	                   // if environmental variable matches one of admissible values then do not skip
	                   throw new SkipException("skip because of RunCondition");
	               }
	           }
	       }

		//System.out.println("test1 - beforemethod");
		log.info("Loading Testdata for the test case: " + m.getName().toString());
		data.getTCNameFromChildren(m.getName().toString().trim());
		createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser"));
		testcontext.setAttribute("WebDriver", driver);
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		moduledesc = m.getName().toString().trim();
		dtmoduledesc = m.getAnnotation(Test.class).description();
		testcasesttime = new Date();
		objStockAdj = PageFactory.initElements(this.driver, StockAdjObjects.class);
		BaseObj = PageFactory.initElements(this.driver, BasePage.class);
		common = PageFactory.initElements(this.driver, CommonFunctions.class);
		storeprop = PageFactory.initElements(this.driver, StoreProperties.class);
		objArticleLookup = PageFactory.initElements(this.driver, ArticleLookUpObjects.class);

		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("MMddyyyy_hmmss");
		String formattedDate = sdf.format(date);
		//System.out.println(formattedDate); // 12/01/2011 4:48:16 PM
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		String formattedDate1 = dateFormat.format(date);
		//System.out.println(formattedDate1); // 12/01/2011 4:48:16 PM
		String dat = formattedDate1;
		Report_Header("testcase", reportPath , moduledesc, dat);

	}*/

	@BeforeMethod(alwaysRun=true)
	public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
		mName=m9.getName().toString().trim();			
			if(!methodList.contains(m9.getName().toString().trim())){
			methodList.add(m9.getName().toString().trim());
			extLogger = extReport.startTest(m9.getName().toString().trim());
			}
		initializeTestcontext();
	System.out.println("test1 - beforemethod");
		log.info("Loading Testdata for the test case: " + m9.getName().toString());
		data.getTCNameFromChildren(m9.getName().toString().trim());
		
		if(isFirstTest){
			driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
		}else{
			String title = driver.getCurrentUrl();
			if(title.contains("logginOut"))
			{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
			}else{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
				if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
				{
					if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
						WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
						scrolltoElement(home,driver);
						home.click();
						TimeUnit.SECONDS.sleep(5);
						loginPage.Logout(RoutinesArtScenarios, RoutinesArttestname, driver);
						driver.navigate().refresh();
						TimeUnit.SECONDS.sleep(5);}
				}
			}
		}
			isFirstTest=false;
		
		//driver=createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser")); setDriver(driver);
		testcontext.setAttribute("WebDriver", driver);
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m9.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		stockAdjArttestname = m9.getName().toString().trim();
		stockAdjArttestdesc = m9.getAnnotation(Test.class).description();

		objStockAdj = PageFactory.initElements(driver, StockAdjObjects.class);
		objEnhancedArticleLookup = PageFactory.initElements(driver, EnhancedArticleLookUpObjects.class);
		objEnhancedarticleLookUpPage = PageFactory.initElements(driver, EnhancedArticleLookUpPage.class);
		//objInStoreDisplayPromotionsObjects = PageFactory.initElements(this.driver, InStoreDisplayPromotionsObjects.class);
		BaseObj = PageFactory.initElements(driver, BasePage.class);
		common = PageFactory.initElements(driver, CommonFunctions.class);
		storeprop = PageFactory.initElements(driver, StoreProperties.class);

		Date ppStartdat1 = new Date();
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		String formattedDatepp = dateFormat.format(ppStartdat1);
		//System.out.println(formattedDatepp); // 12/01/2011 4:48:16 PM
		stockAdjArtStartdat = formattedDatepp;

	}

	@BeforeClass
	public void loadXMLFile(){	
		//initializeTestcontext();		
		System.out.println("test1 - Beforeclass");
		data = new XMLDataReader(log);
		customreport=new CustomExtentReports();
		log.info("Loading data for the class: " );
		data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\stockAdj.xml");
		customreport.createExtentReport();
		cName=this.getClass().getSimpleName();
		reportPath = new File(TestContext.getStringProperty("reportPath"));			
		extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
		classList.add(this.getClass().getSimpleName());
	}

	@AfterClass(alwaysRun=true)
	public void tearDown() throws IOException, ParseException{
		waitFor(1);
		System.out.println("afterclass");
		sceCtMap.put(cName+"_totalCt", methodList.size());
		sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
		sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
		tcCt.put(this.getClass().getSimpleName().toString(),195 /*MCcount*/);
		//System.out.println(extentList);
		//System.out.println(methodList);
        extReport.endTest(extLogger);
		extReport.flush();
		removeDriver();	
		closeDriver(driver);
		
		moduleName.put("Modules", stockAdjArtModules);
		waitFor(1);
		Date ppModEnd2 = new Date();
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		stockAdjArtenddateex = dateFormat.format(ppModEnd2);

		//System.out.println(stockAdjArtenddateex);
		waitFor(2);
		int enhancedArtM=MCcount;
		stockAdjArtMC=""+enhancedArtM;
		waitFor(2);
		//System.out.println("stockadj - " +stockAdjArtMC);
		waitFor(2);
	}

	@AfterMethod(alwaysRun=true)
	protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {
		System.out.println("AffterMethod");
		extReport.endTest(extLogger);
		extReport.flush();
		try{
			if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
				htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;INFO");	
				result9.removeAttribute("isFail");
			}}catch(Exception e ){
				//System.out.println();
			
			}
		waitFor(1);
		Date ppMEndDate1 = new Date();
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		stockAdjArtMEndDate = dateFormat.format(ppMEndDate1);
		//System.out.println(stockAdjArtMEndDate); // 12/01/2011 4:48:16 PM
		String stockAdjjArtTime = stockAdjArttestdesc +";"+ stockAdjArtStartdat +";" + stockAdjArtMEndDate;

		stockAdjArtTime.put(stockAdjArttestname, stockAdjjArtTime);
		//Report_AddStep("testcase", "Running Completed Status","","", getResultStatusName(result.getStatus()));
		waitFor(4);
		//closeDriver(driver);
		customreport.getExtentReport().endTest(customreport.getExtentTest());
		customreport.getExtentReport().flush();
		waitFor(1);
		if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")){
			int cnt = stockAdjArtpreCount2+1;
			htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
			stockAdjArtpreCount2++;
		}
		waitFor(1);
		if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail") && stockAdjArtpreCount2!=reCount){
			waitFor(1);
			stockAdjArtTime.removeAll(stockAdjArttestname);
			waitFor(1);
			stockAdjArtScenarios.removeAll(stockAdjArttestname);
		}
		waitFor(1);
		if(stockAdjArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass")){
			stockAdjArtpreCount2=-1;
		}

	}


}
