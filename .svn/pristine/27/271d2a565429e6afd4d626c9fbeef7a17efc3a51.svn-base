package au.wow.ngbomain.pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.regex.Pattern;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.interactions.internal.Coordinates;
import org.openqa.selenium.internal.Locatable;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.relevantcodes.extentreports.ExtentTest;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.GapscanReportObjects;
import au.wow.ngbomain.objects.ReturnToVendorObjects;
import au.wow.ngbomain.objects.RoutineObjects;
import au.wow.ngbomain.objects.oocreportobjects;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.tests.AdjustmentLogReportTests;
import au.wow.ngbomain.tests.OverstockReportsTest;
import au.wow.ngbomain.tests.ReturnToVendorTests;
import au.wow.ngbomain.tests.StoreProperties;
import au.wow.ngbomain.pages.WoWLoginPage;

public class ReturnToVendorPage extends BasePage {

	WebDriver driver ;
	public void setDriver(WebDriver driver){
		this.driver=driver;
	}
	CommonFunctions common = PageFactory.initElements(driver,
			CommonFunctions.class);

	private Logger log = LogManager.getLogger(OverstockReportsTest.class);
	StoreProperties storeprop = PageFactory.initElements(this.driver, StoreProperties.class);
	SQLWrapper sql = new SQLWrapper(log);
	public static String msgtext1;
	ReturnToVendorPage objRoutinesPage;
	XMLDataReader data;
	WoWLoginPage loginPage;
	ExtentTest extLogger=ReturnToVendorTests.extLogger;
	String cName= ReturnToVendorTests.cName;
	String mName=ReturnToVendorTests.mName;

	public void clickOnReturnToVendor(ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws AWTException {
		/*waitForJSandJQueryToLoad(driver);;
		verticalScroll(driver);
		waitForElement(returnToVendorObjects.stockManagementMenu,driver);

		driver.findElement(By.id("stockManage")).click();
		driver.findElement(By.linkText("Return to Vendor and Claims")).click();
		driver.findElement(By.linkText("Raise New Claim")).click();

		waitForInvisibilityOfElement(By.id("statusImg"),driver);
		waitForJSandJQueryToLoad(driver);*/

		waitForJSandJQueryToLoad(driver);;
		waitFor(1);
		Point coordinates = returnToVendorObjects.stockManagementMenu.getLocation();
		Robot robot = new Robot();
		//.mouseMove(coordinates.getX(),coordinates.getY()+100);

		Actions action = new Actions(driver);
		action.moveToElement(returnToVendorObjects.stockManagementMenu).click().build().perform();	
		waitFor(1);

		Actions action1 = new Actions(driver);
		action1.moveToElement(returnToVendorObjects.returnToVendorAndClaims).click().build().perform();	
		waitFor(1);

		Actions action2 = new Actions(driver);
		action2.moveToElement(returnToVendorObjects.raiseNewClaim).click().build().perform();
		waitFor(1);
		robot.mouseMove(5,5);

	}

	public void clickOnReturnToVendorClaimEnquiry(ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws AWTException {
		/*waitForJSandJQueryToLoad(driver);;
		verticalScroll(driver);
		waitForElement(returnToVendorObjects.stockManagementMenu,driver);

		driver.findElement(By.id("stockManage")).click();
		driver.findElement(By.linkText("Return to Vendor and Claims")).click();
		driver.findElement(By.linkText("Raise New Claim")).click();

		waitForInvisibilityOfElement(By.id("statusImg"),driver);
		waitForJSandJQueryToLoad(driver);*/

		waitForJSandJQueryToLoad(driver);;
		waitFor(1);
		Point coordinates = returnToVendorObjects.stockManagementMenu.getLocation();
		Robot robot = new Robot();
		//.mouseMove(coordinates.getX(),coordinates.getY()+100);

		Actions action = new Actions(driver);
		action.moveToElement(returnToVendorObjects.stockManagementMenu).click().build().perform();	
		waitFor(1);

		Actions action1 = new Actions(driver);
		action1.moveToElement(returnToVendorObjects.returnToVendorAndClaims).click().build().perform();	
		waitFor(1);

		Actions action2 = new Actions(driver);
		action2.moveToElement(returnToVendorObjects.claimEnquiry).click().build().perform();
		waitFor(1);
		robot.mouseMove(5,5);

	}

	public List<String> getList(ReturnToVendorObjects returnToVendorObjects,String query1,String query2,String arttype,String store) throws SQLException, AWTException, IOException
	{
		List<String> articleDetailsHawa = new ArrayList<String>();
		String artDesc = null;
		String ean = null;
		String tun = null;
		String plu = null;
		String om= null;
		List<List<Object>> results=null;
		List<List<Object>>results1=null;
		String hawaArticle = testdata.getText(query1);
		if(store.equals("SM")){ //1108
			results = sql.executeQuery(getContext(),hawaArticle);
		}
		if(store.equals("bigW")){ //0858
			results = sql.executeQueryStore(getContext(),hawaArticle, getContext().getStringProperty("BigWstore"));
		}
		if(store.equals("PEL")){ //9384
			results = sql.executeQueryStore(getContext(),hawaArticle, getContext().getStringProperty("NZstore"));
		}
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String ranArticleHawa = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver, "Below details is for "+arttype+" article - "+ranArticleHawa+";;;Pass");
			String hawaArticleDetails = testdata.getText(query2).replaceAll("articleNumber", ranArticleHawa);
			if(store.equals("SM")){
				results1 = sql.executeQuery(getContext(),hawaArticleDetails);
			}
			if(store.equals("bigW")){ //0858
				results1 = sql.executeQueryStore(getContext(),hawaArticleDetails, getContext().getStringProperty("BigWstore"));
			}
			if(store.equals("PEL")){ //9384
				results1 = sql.executeQueryStore(getContext(),hawaArticleDetails, getContext().getStringProperty("NZstore"));
			}
			System.out.println(results1);
			artDesc = results1.get(0).get(1).toString();
			//		removetriplezero(results1, 4);

			if(arttype.equals("Weighted") || arttype.equals("Random Weighted")){
				plu = results1.get(0).get(2).toString();	
				for(int i=0;i<results1.size();i++){ 
					if(!results1.get(i).get(3).toString().equals("")){
						ean = results1.get(i).get(3).toString();
						break;
					}
				}
				for(int i=0;i<results1.size();i++){ 
					if(!results1.get(i).get(4).toString().equals("")){
						tun = results1.get(i).get(4).toString();
						break;
					}
				}
				articleDetailsHawa.add(ranArticleHawa);
				articleDetailsHawa.add(artDesc);
				articleDetailsHawa.add(ean);
				articleDetailsHawa.add(tun);
				articleDetailsHawa.add(plu);
			}
			else{
				for(int i=0;i<results1.size();i++){ 
					if(!results1.get(i).get(2).toString().equals("")){
						ean = results1.get(i).get(2).toString();
						break;
					}
				}
				for(int i=0;i<results1.size();i++){ 
					if(!results1.get(i).get(3).toString().equals("")){
						tun = results1.get(i).get(3).toString();
						break;
					}
				}
				removetriplezero(results1, 4);
				om = results1.get(0).get(4).toString();
				//			String[] a = om.split(".");
				//			String omFinal=a[0];
				//			System.out.println(omFinal);


				articleDetailsHawa.add(ranArticleHawa);
				articleDetailsHawa.add(artDesc);
				articleDetailsHawa.add(ean);
				articleDetailsHawa.add(tun);
				articleDetailsHawa.add(om);
			}

		}

		else{
			htmlToExtent(cName,mName,extLogger,driver, "No "+arttype+" article found in DB;;;Fail");
			clickOnReturnToVendor(returnToVendorObjects,driver);
		}
		return articleDetailsHawa;
	}

	public void inputValidationsForArticleTextBox(List<String> articleDetails,List<String> vendorDetailsResults,ReturnToVendorObjects returnToVendorObjects,WebDriver driver){
		String articleNumber =articleDetails.get(0).toString();
		String articleDescription =articleDetails.get(1);
		String articleEAN =articleDetails.get(2);
		String articleTUN =articleDetails.get(3);
		String om =articleDetails.get(4);

		String articleNumberScreen = null;
		String descriptionScreen =null;
		String omScreen =null;

		String vendorNumber = vendorDetailsResults.get(1);
		String vendorName = vendorDetailsResults.get(2);

		String vendorScreen = null;

		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(2);
		articleNumberScreen = returnToVendorObjects.articleNumberScreen.getText();
		if(articleNumberScreen.contains(articleNumber)){
			htmlToExtent(cName,mName,extLogger,driver, "The Article Number:"+articleNumber+" is same as Expected for Article Number Search;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article Number:"+articleNumber+" is not same as Expected for Article Number Search;;;Fail");
		}
		descriptionScreen = returnToVendorObjects.articleDescriptionScreen.getText();
		if(descriptionScreen.contains(articleDescription)){
			htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is same as Expected for Article Number;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is Not same for Article Number;;;Fail");
		}
		omScreen = returnToVendorObjects.articleOMScreen.getText();
		if(omScreen.contains(om)){
			htmlToExtent(cName,mName,extLogger,driver, "The Article OM:"+om+" is same as Expected for Article Number;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article OM:"+om+" is Not same for Article Number;;;Fail");
		}
		vendorScreen = returnToVendorObjects.vendorNumber.getText();
		String vendorTemp = "Supplied By : "+vendorNumber+"-"+vendorName+"";
		if(vendorScreen.contains(vendorTemp)){
			htmlToExtent(cName,mName,extLogger,driver, "The Article Vendor Details: "+vendorTemp+" is same as Expected for Article Number;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article Vendor Details: "+vendorTemp+" is Not same for Article Number;;;Fail");
		}


		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(articleDescription);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(2);
		if(!returnToVendorObjects.errorMsgDesc.isDisplayed()){
			articleNumberScreen = returnToVendorObjects.articleNumberScreen.getText().trim();
			if(articleNumberScreen.contains(articleNumber)){
				htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is same as Expected for Article Description Search;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is not same as Expected for Article Description Search;;;Fail");
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is not Displayed for Article Description Search;;;Fail");
		}

		driver.navigate().refresh();
		if(!(articleEAN ==null)){
			returnToVendorObjects.articleTextBox.sendKeys(articleEAN);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			waitFor(2);
			articleNumberScreen = returnToVendorObjects.articleNumberScreen.getText();
			if(articleNumberScreen.contains(articleNumber)){
				htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+" is same as Expected for Article EAN Search;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+" is not same as Expected for Article EAN Search;;;Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+" is Not Present in DB;;;Info");
		}
		driver.navigate().refresh();
		if(!(articleTUN ==null)){
			returnToVendorObjects.articleTextBox.sendKeys(articleTUN);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			waitFor(2);
			articleNumberScreen = returnToVendorObjects.articleNumberScreen.getText();
			if(articleNumberScreen.contains(articleNumber)){
				htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+" is same as Expected for Article TUN Search;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+" is not same as Expected for Article TUN Search;;;Fail");
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+" is Not Present in DB;;;Info");
		}

		driver.navigate().refresh();

	}

	public void inputValidationsForRestrictedArticleTextBox(List<String> articleDetails,ReturnToVendorObjects returnToVendorObjects,String artType,WebDriver driver) throws SQLException{
		String articleNumber =articleDetails.get(0).toString();
		String articleDescription =articleDetails.get(1);
		String articleEAN =articleDetails.get(2);
		String articleTUN =articleDetails.get(3);
		if(artType.equals("CPBD"))
		{
			String ArticleDetails = testdata.getText("randomArticleCpbd1").replaceAll("articleNumber", articleNumber);
			List<List<Object>> results1 = sql.executeQuery(getContext(),ArticleDetails);
			articleNumber=results1.get(0).get(0).toString();
		}
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;

		if(artType.equals("Weighted") || artType.equals("Random Weighted") || artType.equals("CPBD") || artType.equals("Display") || artType.equals("Produce")){
			if(returnToVendorObjects.errorClose.size()!=0){
				String errorMsg = returnToVendorObjects.errorMessage.getText();
				if(errorMsg.contains("Claim not allowed for the article \""+articleNumber+"\"") || (errorMsg.contains("Claim cannot be raised for Display/Prepack article"+articleNumber+""))){
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number:"+articleNumber+" is Not Allowed as Expected for Article Number Search;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Error Message is not Displayes as Expected;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article Number:"+articleNumber+" is Allowed as Not Expected for Article Number Search;;;Fail");
			}
		}
		else if(artType.equals("DIEN")){
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String errMsg = returnToVendorObjects.conformationPopup.getText();
				if(errMsg.contains("Cannot raise a claim against this article.")){
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number:"+articleNumber+" is Not Allowed as Expected for Article Number Search;;;Pass");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article Number:"+articleNumber+" is Allowed as Expected for Article Number Search;;;Fail");
			}
		}

		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(articleDescription);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(artType.equals("Weighted") || artType.equals("Random Weighted") || artType.equals("CPBD") || artType.equals("Display")){
			if(!returnToVendorObjects.errorMsgDesc.isDisplayed()){
				if(returnToVendorObjects.errorClose.size()!=0){
					String errorMsg = returnToVendorObjects.errorMessage.getText();
					if(errorMsg.contains("Claim not allowed for the article \""+articleNumber+"\"")  || (errorMsg.contains("Claim cannot be raised for Display/Prepack article"+articleNumber+"\""))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+"is Not Allowed as Expected for Article Description Search;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Error Message is not Displayes as Expected;;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is Allowed as Not Expected for Article Description Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is not Displayed for Article Description Search;;;Fail");
			}
		}
		else if(artType.equals("DIEN")){
			if(!returnToVendorObjects.errorMsgDesc.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String errMsg = returnToVendorObjects.conformationPopup.getText();
					if(errMsg.contains("Cannot raise a claim against this article.")){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is Not Allowed as Expected for Article Description Search;;;Pass");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is Allowed as Not Expected for Article Description Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article Description:"+articleDescription+" is not Displayed for Article Description Search;;;Fail");
			}

		}

		driver.navigate().refresh();
		if(!(articleEAN ==null)){
			returnToVendorObjects.articleTextBox.sendKeys(articleEAN);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(artType.equals("Weighted") || artType.equals("Random Weighted") || artType.equals("CPBD") || artType.equals("Display")){
				if(returnToVendorObjects.errorClose.size()!=0){
					String errorMsg = returnToVendorObjects.errorMessage.getText();
					if(errorMsg.contains("Claim not allowed for the article \""+articleNumber+"\"")  || (errorMsg.contains("Claim cannot be raised for Display/Prepack article"+articleNumber+"\""))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+"is Not Allowed as Expected for Article EAN Search;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Error Message is not Displayes as Expected;;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+" is Allowed as Not Expected for Article EAN Search;;;Fail");
				}
			}
			else if(artType.equals("DIEN")){
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String errMsg = returnToVendorObjects.conformationPopup.getText();
					if(errMsg.contains("Cannot raise a claim against this article.")){
						htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+"is Not Allowed as Expected for Article EAN Search;;;Pass");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+"is Allowed as Not Expected for Article EAN Search;;;Fail");
				}
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article EAN:"+articleEAN+" is Not Present in DB;;;Info");
		}

		driver.navigate().refresh();
		if(!(articleTUN ==null)){
			returnToVendorObjects.articleTextBox.sendKeys(articleTUN);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(artType.equals("Weighted") || artType.equals("Random Weighted") || artType.equals("CPBD") || artType.equals("Display")){
				if(returnToVendorObjects.errorClose.size()!=0){
					String errorMsg = returnToVendorObjects.errorMessage.getText();
					if(errorMsg.contains("Claim not allowed for the article \""+articleNumber+"\"")  || (errorMsg.contains("Claim cannot be raised for Display/Prepack article"+articleNumber+"\""))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+"is Not Allowed as Expected for Article TUN Search;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Error Message is not Displayes as Expected;;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+" is Allowed as Not Expected for Article TUN Search;;;Fail");
				}
			}
			else if(artType.equals("DIEN")){
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String errMsg = returnToVendorObjects.conformationPopup.getText();
					if(errMsg.contains("Cannot raise a claim against this article.")){
						htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+"is Not Allowed as Expected for Article TUN Search;;;Pass");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+"is Allowed as Not Expected for Article TUN Search;;;Fail");
				}
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article TUN:"+articleTUN+" is Not Present in DB;;;Info");
		}

		if(artType.equals("Weighted") || artType.equals("Random Weighted")){
			driver.navigate().refresh();
			String articlePLU =articleDetails.get(4);
			returnToVendorObjects.articleTextBox.sendKeys(articlePLU);
			returnToVendorObjects.searchAddButton.click();
			if(returnToVendorObjects.errorClose.size()!=0){
				String errorMsg = returnToVendorObjects.errorMessage.getText();
				if(errorMsg.contains("Claim not allowed for the article \""+articleNumber+"\"")  || (errorMsg.contains("Claim cannot be raised for Display/Prepack article"+articleNumber+"\""))){
					htmlToExtent(cName,mName,extLogger,driver, "The Article PLU:"+articlePLU+" is Not Allowed as Expected for Article PLU Search;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Error Message is not Displayes as Expected;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article PLU:"+articlePLU+" is Allowed as Not Expected for Article PLU Search;;;Fail");
			}
		}
		driver.navigate().refresh();
	}

	public void inputValidationsForNonReturnArticleTextBox(List<String> articleDetails,ReturnToVendorObjects returnToVendorObjects,String pluArtNumber,String artType,WebDriver driver){
		String articleNumber =articleDetails.get(0).toString();

		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;

		htmlToExtent(cName,mName,extLogger,driver, "Below details is for "+artType+" article - "+articleNumber+" Non Returnable Popup Confirmation;;;Pass");
		if(returnToVendorObjects.errorMsg.size()!=0){
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation Popup is Displayed as Expected;;;Pass");
					returnToVendorObjects.conYesButton.click();
					String msgValidation = returnToVendorObjects.lookUpLinkMenu.getText();
					if(msgValidation.contains("Raise a Claim")){
						htmlToExtent(cName,mName,extLogger,driver, "Yes button is clicked on Conformantion Popup and page Directed to Claim Page;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Yes button is clicked on Conformantion Popup but page is Not Directed to Claim Page;;;Pass");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation Popup is not Displayed as Not Expected;;;Fail");
				}
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Article-"+articleNumber+" is Not Displayed as Expected;;;Fail");
		}
		returnToVendorObjects.deleteArticleButton.click();
		if(returnToVendorObjects.okButtonPopup.isDisplayed()){
			returnToVendorObjects.okButtonPopup.click();
			htmlToExtent(cName,mName,extLogger,driver, "Article is Deleted as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Article is Not Deleted as Expected;;;Fail");
		}

		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.returnQuantity.sendKeys("100000");
		htmlToExtent(cName,mName,extLogger,driver, "Maximum quantity 6 digits-100000 is Entered in Return Quantity text box;;;Pass");
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.errorMsg.size()!=0){
			returnToVendorObjects.conYesButton.click();
			String rtnQty = returnToVendorObjects.returnQuantityCheck1.getText();
			System.out.println(rtnQty);
			if(rtnQty.equals("10000")){
				htmlToExtent(cName,mName,extLogger,driver, "Return quantity 5 digits-10000 is Entered as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Return quantity 5 digits-10000 is not Entered in return quantity text box;;;Fail");
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Article-"+articleNumber+" is Not Displayed as Expected;;;Fail");
		}

		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(pluArtNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.cancelPopupButton.isDisplayed()){
			returnToVendorObjects.cancelPopupButton.click();
			htmlToExtent(cName,mName,extLogger,driver, "PLU Same as Article Number Search is Successfull;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "PLU Same as Article Number Search is Not Successfull;;;Pass");
		}

		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		returnToVendorObjects.conNoButton.click();
		waitForJSandJQueryToLoad(driver);;
		String menuValidation = returnToVendorObjects.topLinkMenu.getText();
		if(menuValidation.contains("Stock Adjustment")){
			htmlToExtent(cName,mName,extLogger,driver, "Page Redirected to Stock Adjustment When No is Clicked on Non Returnable Article Confirmation Message;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Page is Not Redirected to Stock Adjustment When No is Clicked on Non Returnable Article Confirmation Message;;;Pass");
		}

	}

	public void validationForOtherFields(List<String> articleDetails,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,WebDriver driver) throws ParseException{
		int max = 10;
		int min = 2;

		String articleNumber =articleDetails.get(0).toString();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(2);
		scrolltoElement(returnToVendorObjects.finaliseButton, driver);
		returnToVendorObjects.finaliseButton.click();
		returnToVendorObjects.okButtonPopup.click();
		if(returnToVendorObjects.errorCloseClaim.size()!=0){
			String messageValidation = returnToVendorObjects.errorMessageCalim.getText();
			if(messageValidation.contains("Please select a reason for Supplier") && messageValidation.contains("Please enter Return Quantity")){
				returnToVendorObjects.errorCloseClaim1.click();
				htmlToExtent(cName,mName,extLogger,driver, "Error Message is Displayed for Not Entering Reason Code and Return Quantity as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Error Message is Not Displayed for Not Entering Reason Code and Return Quantity;;;Fail");
			}
		}

		returnToVendorObjects.reasonCodeDropdown.click();
		int i = generateRandomNumber(min,max);

		WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
		element.click();
		scrolltoElement(returnToVendorObjects.finaliseButton, driver);
		returnToVendorObjects.finaliseButton.click();
		returnToVendorObjects.okButtonPopup.click();
		if(returnToVendorObjects.errorCloseClaim.size()!=0){
			String messageValidation = returnToVendorObjects.errorMessageCalim.getText();
			if(messageValidation.contains("Please enter Return Quantity")){
				returnToVendorObjects.errorCloseClaim1.click();
				htmlToExtent(cName,mName,extLogger,driver, "Error Message is Displayed for Not Entering Return Quantity as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Error Message is Not Displayed for Not Entering Return Quantity;;;Fail");
			}
		}

		returnToVendorObjects.returnQunatityBottomTextBox.clear();
		waitFor(1);
		returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
		String date= common.getBeforeDateFromCurrentDate();
		returnToVendorObjects.authorisationDate.sendKeys(date);
		returnToVendorObjects.finaliseButton.click();
		returnToVendorObjects.okButtonPopup.click();
		if(returnToVendorObjects.errorCloseClaim.size()!=0){
			String messageValidation = returnToVendorObjects.errorMessageCalim.getText();
			if(messageValidation.contains("Authorisation Date should be Current date")){
				returnToVendorObjects.errorCloseClaim1.click();
				htmlToExtent(cName,mName,extLogger,driver, "Error Message is Displayed for Entering Before Date as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Error Message is Not Displayed for Entering Before Date;;;Fail");
			}
		}

		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(2);
		returnToVendorObjects.reasonCodeDropdown1.click();
		returnToVendorObjects.otherReasonCodeOption.click();
		returnToVendorObjects.reasonCodeTextbox.sendKeys("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
		htmlToExtent(cName,mName,extLogger,driver, "Entered more than 50 Characters in ReasonCode Box;;;Pass");
		scrolltoElement(returnToVendorObjects.finaliseButton, driver);
		returnToVendorObjects.finaliseButton.click();
		returnToVendorObjects.okButtonPopup.click();
		returnToVendorObjects.errorCloseClaim1.click();
		String reasonCodeLength = returnToVendorObjects.reasonCodeTextbox.getAttribute("value");
		int l = reasonCodeLength.length();
		System.out.println(l);
		if(l==50){
			htmlToExtent(cName,mName,extLogger,driver, "Entered characters is 50 Characters in ReasonCode Box as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Entered characters is More than 50 Characters in ReasonCode Box;;;Fail");
		}

		driver.navigate().refresh();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitFor(4);
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(3);
		returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
		waitFor(5);
		returnToVendorObjects.articleTextBox.clear();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(3);
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			htmlToExtent(cName,mName,extLogger,driver, "Confirmation Pop Up box is Displayed for Adding same Article;;;Pass");
			String addingArt = returnToVendorObjects.conformationPopup.getText();
			if(addingArt.equals("Article "+articleNumber+" already exists with Qty "+0+""+returnQuantity+". Do you want to update?")){
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation Pop Up box Message is Displayed as Expected for Adding same Article;;;Pass");
				returnToVendorObjects.PopUpConformationNo.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation Pop Up box Message is Not Displayed as Expected for Adding same Article;;;Fail");
			}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Confirmation Pop Up box Not Displayed for Adding same Article;;;Fail");
		}
	}

	public void validationForMainFields(List<String> articleDetails,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,WebDriver driver) throws ParseException, AWTException{
		String input = "abcdef12345";
		String cartonQty= "12345";


		String articleNumber =articleDetails.get(0).toString();
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation Popup is Displayed as Expected;;;Pass");
				returnToVendorObjects.conYesButton.click();
			}
		}
		waitFor(2);
		scrolltoElement(returnToVendorObjects.finaliseButton, driver);
		returnToVendorObjects.authorasationCodeBox.sendKeys(input);
		String inputverify = returnToVendorObjects.authorasationCodeBox.getAttribute("value");
		if(inputverify.equals(input)){
			htmlToExtent(cName,mName,extLogger,driver, "Alpha Numerical values are accepted in Authoraisation Box;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Mismatch in values given in Authoraisation Box;;;Fail");
		}

		returnToVendorObjects.vehicleRegNoBox.sendKeys(input);
		String inputverifyveh = returnToVendorObjects.vehicleRegNoBox.getAttribute("value");
		if(inputverifyveh.equals(input)){
			htmlToExtent(cName,mName,extLogger,driver, "Alpha Numerical values are accepted in Vehicle Rego Box;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Mismatch in values given in Vehicle Rego Box;;;Fail");
		}

		returnToVendorObjects.vehicleRegNoBox.clear();
		returnToVendorObjects.vehicleRegNoBox.sendKeys("1234656789123456789");
		htmlToExtent(cName,mName,extLogger,driver, "Values Entered More than 15 in Vehicle Rego Box;;;Pass");
		String inputverifyvehmax = returnToVendorObjects.vehicleRegNoBox.getAttribute("value");
		int vehCharLen = inputverifyvehmax.length();
		if(vehCharLen==15){
			htmlToExtent(cName,mName,extLogger,driver, "Value Cannot Enter More than 15 in Vehicle Rego Box as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Value Enter More than 15 in Vehicle Rego Box;;;Fail");
		}


		returnToVendorObjects.cartonPickupQtyBox.sendKeys(cartonQty);
		String cartonQtyCheck = returnToVendorObjects.cartonPickupQtyBox.getAttribute("value");
		if(cartonQtyCheck.equals(cartonQty)){
			htmlToExtent(cName,mName,extLogger,driver, "Numeric Value Able to Enter in Carton Pick up Quantity Box as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Numeric Value Unaable to Enter in Carton Pick up Quantity Box;;;Fail");
		}

		returnToVendorObjects.cartonPickupQtyBox.clear();
		Robot robot = new Robot();
		waitFor(2);
		robot.keyPress(KeyEvent.VK_R);
		//		returnToVendorObjects.cartonPickupQtyBox.sendKeys("abcd");
		cartonQtyCheck = returnToVendorObjects.cartonPickupQtyBox.getAttribute("value");
		if(cartonQtyCheck.equals("")){
			htmlToExtent(cName,mName,extLogger,driver, "Alphabed Value Cannot be Enter in Carton Pick up Quantity Box as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Alphabed Value is Enter in Carton Pick up Quantity Box;;;Fail");
		}

		returnToVendorObjects.cartonPickupQtyBox.clear();
		returnToVendorObjects.cartonPickupQtyBox.sendKeys("123456789");
		htmlToExtent(cName,mName,extLogger,driver, "Numeric Value Enter More than 5 Numbers in Carton Pick up Quantity Box as Expected;;;Pass");
		cartonQtyCheck = returnToVendorObjects.cartonPickupQtyBox.getAttribute("value");
		int carCharLen = cartonQtyCheck.length();
		if(carCharLen==5){
			htmlToExtent(cName,mName,extLogger,driver, "Numeric Value Can be Enter Upto 5 Numbers in Carton Pick up Quantity Box as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Numeric Value Entered More tha 5 Numbers in Carton Pick up Quantity Box;;;Fail");
		}

		returnToVendorObjects.carrierNameBox.sendKeys(input);
		String inputverifycar = returnToVendorObjects.carrierNameBox.getAttribute("value");
		if(inputverifycar.equals(input)){
			htmlToExtent(cName,mName,extLogger,driver, "Alpha Numerical values are accepted in Carrier Name Box;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Mismatch in values given in Carrier Name Box;;;Fail");
		}

		returnToVendorObjects.carrierNameBox.clear();
		returnToVendorObjects.carrierNameBox.sendKeys("1234656789123456789123456789123456789123456789123456789123456789");
		htmlToExtent(cName,mName,extLogger,driver, "Values Entered More than 50 in Carrier Name Box;;;Pass");
		inputverifyvehmax = returnToVendorObjects.carrierNameBox.getAttribute("value");
		int nameCharLen = inputverifyvehmax.length();
		if(nameCharLen==50){
			htmlToExtent(cName,mName,extLogger,driver, "Value Cannot Enter More than 50 in Carrier Name Box as Expected;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Value Enter More than 50 in Carrier Name Box;;;Fail");
		}
	}

	public void validationForKGArticleReturnQuantityDecimal(String articleNumber,ReturnToVendorObjects returnToVendorObjects,String returnQuantity,WebDriver driver) throws ParseException, AWTException{
		driver.navigate().refresh();
		waitFor(2);
		returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
		returnToVendorObjects.searchAddButton.click();
		waitForJSandJQueryToLoad(driver);;
		if(returnToVendorObjects.conformationPopup.isDisplayed()){
			String conMsg= returnToVendorObjects.conformationPopup.getText();
			if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
				returnToVendorObjects.conYesButton.click();
			}
		}
		scrolltoElement(returnToVendorObjects.finaliseButton, driver);
		waitFor(2);
		returnToVendorObjects.returnQuantityCheck.clear();
		returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
		waitFor(2);
		String rtnQtyTemp = returnToVendorObjects.returnQuantityCheck.getAttribute("value");
		if(rtnQtyTemp.equals(returnQuantity)){
			htmlToExtent(cName,mName,extLogger,driver, "The Return Quantity Box Accepts Decimal Values for KG articles;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Return Quantity Box in Not Accepted with Decimal Values for KG articles;;;Fail");
		}
	}

	public void validationForFinaliseClaim(List<String>articleDetailHawa,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String calimNumber = "";

			String articleNumber = articleDetailHawa.get(0);
			String sohArticle = testdata.getText("soh");
			sohArticle = sohArticle.replace("articleNumber", articleNumber);
			List<List<Object>>sohResults = sql.executeQuery(getContext(),sohArticle);
			removetriplezero(sohResults, 0);
			String soh = sohResults.get(0).get(0).toString();

//			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;

			if(artType.equals("Dangerous")){
				if(returnToVendorObjects.dangerousConformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.dangerousConformationPopup.getText();
					if(conMsg.contains("STOP! Dangerous Goods Declaration on CONSIGNMENT NOTE must be read, understood and fully completed")){
						htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed for Dangerous Article Expected;;;Pass");
						returnToVendorObjects.dangerousconYesButton.click();
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed and Error Message is Mismatched for Dangerous;;;Fail");
						returnToVendorObjects.dangerousconYesButton.click();
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Dangerous Article PopUp Message is Not Displayed while adding the Article;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if(returnToVendorObjects.conformationPopup1.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup1.getText();
					if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
					}
				}
			}
			else{
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
					}
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			/*String date= common.getCurrentDate();
		returnToVendorObjects.authorisationDate.sendKeys(date);*/
			waitFor(1);
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled For "+artType+";;;Pass");
			waitFor(1);
			returnToVendorObjects.finaliseButton.click();
			waitFor(2);

			if(artType.equals("Dangerous")){
				if(returnToVendorObjects.dangerousOkButtonPopup.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
					returnToVendorObjects.dangerousOkButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
				}
			}
			else{
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
				}
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(4);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				calimNumber = calimNum.substring(53, 63);
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Displayed and Claim Number is "+calimNumber+";;;Pass");
				if(artType.equals("Dangerous")){
					returnToVendorObjects.dangerousOkButtonPopup.click();
				}
				else{
					returnToVendorObjects.okButtonPopup.click();
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}


			String claimArticle = testdata.getText("claim");
			claimArticle = claimArticle.replace("claimNumber", calimNumber);
			List<String>finaliseResults = sql.executeQueryList(getContext(),claimArticle);

			if(finaliseResults.size()!=0){
				String aticleNumberClaim =  finaliseResults.get(1);
				String storeClaim = finaliseResults.get(0);
				String created_User =  finaliseResults.get(3);

				String StoreNum = getContext().getStringProperty("store");
				String userId = getContext().getStringProperty("username");

				if(aticleNumberClaim.equals(articleNumber)){
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB;;;Fail");
				}

				if(storeClaim.equals(StoreNum)){
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB;;;Fail");
				}

				if(created_User.equals(userId)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
			}

			String sohArticleFinal = testdata.getText("soh");
			sohArticleFinal = sohArticleFinal.replace("articleNumber", articleNumber);
			List<List<Object>>sohResultsFinal = sql.executeQuery(getContext(),sohArticleFinal);
			removetriplezero(sohResultsFinal, 0);
			String sohFinal = sohResultsFinal.get(0).get(0).toString();

			double sohint = Integer.valueOf(soh);
			double sohintFinal = Integer.valueOf(sohFinal);
			double returnQtyint = Integer.valueOf(returnQuantity);

			if(sohintFinal ==(sohint-returnQtyint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article is Not Matching with DB after Creating Claim;;;Fail");
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void validationForFinaliseClaimInternational(List<String>articleDetailHawa,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,String store,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			String calimNumber = "";
			int max = 10;
			int min = 2;
			String claimNumber1 = "";
			String claimNumber2 = "";
			List<List<Object>>sohResults = null;
			String articleNumber1 = articleDetailHawa.get(0);
			String articleNumber2 = articleDetailHawa.get(1);
			
			
			String sohArticle = testdata.getText("soh");
			sohArticle = sohArticle.replace("articleNumber", articleNumber1);
			if(store.equals("smkt")){
			sohResults = sql.executeQuery(getContext(),sohArticle);
			}
			else if(store.equals("bigW")){
			sohResults = sql.executeQueryStore(getContext(),sohArticle,getContext().getStringProperty("BigWstore"));
			}
			
			removetriplezero(sohResults, 0);
			String soh1 = sohResults.get(0).get(0).toString();

			String sohArticle1 = testdata.getText("soh");
			sohArticle1 = sohArticle1.replace("articleNumber", articleNumber2);
			List<List<Object>>sohResults1 = sql.executeQueryStore(getContext(),sohArticle1,getContext().getStringProperty("BigWstore"));
			removetriplezero(sohResults1, 0);
			String soh2 = sohResults1.get(0).get(0).toString();

			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber1);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber1+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);

			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber2);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber2+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			waitFor(1);

			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(1);
			returnToVendorObjects.returnQuantityCheckNextArticle.clear();
			returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled For "+artType+";;;Pass");
			waitFor(1);
			returnToVendorObjects.finaliseButton.click();
			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(4);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				calimNumber = calimNum.substring(53, 63);
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Displayed and Claim Number is "+calimNumber+";;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				returnToVendorObjects.okButtonPopup.click();
			}
			
			List<String>finaliseResults = new ArrayList<String>();
			String claimArticle = testdata.getText("claim");
			claimArticle = claimArticle.replace("claimNumber", calimNumber);
			if(store.equals("smkt")){
			finaliseResults = sql.executeQueryList(getContext(),claimArticle);
			}
			else if(store.equals("bigW")){
			List<List<Object>>finaliseResults1 = sql.executeQueryStore(getContext(),claimArticle,getContext().getStringProperty("BigWstore"));
				String a = finaliseResults1.get(0).get(1).toString();
				String b = finaliseResults1.get(0).get(0).toString();
				String c = finaliseResults1.get(0).get(3).toString();
				finaliseResults.add(a);
				finaliseResults.add(b);
				finaliseResults.add("null");
				finaliseResults.add(c);
			}

			if(finaliseResults.size()!=0){
				String StoreNum = "";
				String aticleNumberClaim =  finaliseResults.get(1);
				String storeClaim = finaliseResults.get(0);
				String created_User =  finaliseResults.get(3);
				if(store.equals("smkt")){
				StoreNum = getContext().getStringProperty("store");
				}
				else if(store.equals("bigW")){
				StoreNum = getContext().getStringProperty("BigWstore");
				}
				String userId = getContext().getStringProperty("username");

				if(aticleNumberClaim.equals(articleNumber1) || aticleNumberClaim.equals(articleNumber2)){
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB;;;Fail");
				}

				if(storeClaim.equals(StoreNum)){
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB;;;Fail");
				}

				if(created_User.equals(userId)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
			}

			//First Article SOH
			List<List<Object>>sohResultsFinal = null;
			String sohArticleFinal = testdata.getText("soh");
			sohArticleFinal = sohArticleFinal.replace("articleNumber", articleNumber1);
			if(store.equals("smkt")){
			sohResultsFinal = sql.executeQuery(getContext(),sohArticleFinal);
			}
			else if(store.equals("bigW")){
			sohResultsFinal = sql.executeQueryStore(getContext(),sohArticleFinal,getContext().getStringProperty("BigWstore"));
			}
			removetriplezero(sohResultsFinal, 0);
			String sohFinal = sohResultsFinal.get(0).get(0).toString();

			double sohint = Integer.valueOf(soh1);
			double sohintFinal = Integer.valueOf(sohFinal);
			double returnQtyint = Integer.valueOf(returnQuantity);

			if(sohintFinal ==(sohint-returnQtyint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber1+" is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber1+" is Not Matching with DB after Creating Claim;;;Fail");
			}

			//Second Article SOH
			List<List<Object>>sohResultsFinal1 = null;
			String sohArticleFinal1 = testdata.getText("soh");
			sohArticleFinal1 = sohArticleFinal1.replace("articleNumber", articleNumber2);
			if(store.equals("smkt")){
			sohResultsFinal1 = sql.executeQueryStore(getContext(),sohArticleFinal1,getContext().getStringProperty("BigWstore"));
			}
			else if(store.equals("bigW")){
			sohResultsFinal1 = sql.executeQueryStore(getContext(),sohArticleFinal1,getContext().getStringProperty("BigWstore"));
			}
			removetriplezero(sohResultsFinal1, 0);
			String sohFinal1 = sohResultsFinal1.get(0).get(0).toString();

			double sohint1 = Integer.valueOf(soh2);
			double sohintFinal1 = Integer.valueOf(sohFinal1);
			double returnQtyint1 = Integer.valueOf(returnQuantity);

			if(sohintFinal1 ==(sohint1-returnQtyint1)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber2+" is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber2+" is Not Matching with DB after Creating Claim;;;Fail");
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void validationForFinaliseClaimConsignmentArticle(List<String>articleList,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,String store,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String claimNumber1 = "";
			String claimNumber2 = "";
			List<List<Object>>sohResults = null;
			String articleNumber1 = articleList.get(0);
			String articleNumber2 = articleList.get(1);
			
			
			String sohArticle = testdata.getText("soh");
			sohArticle = sohArticle.replace("articleNumber", articleNumber1);
			if(store.equals("smkt")){
			sohResults = sql.executeQuery(getContext(),sohArticle);
			}
			else if(store.equals("bigW")){
			sohResults = sql.executeQueryStore(getContext(),sohArticle,getContext().getStringProperty("BigWstore"));
			}
			
			removetriplezero(sohResults, 0);
			String soh1 = sohResults.get(0).get(0).toString();

			String sohArticle1 = testdata.getText("soh");
			sohArticle1 = sohArticle1.replace("articleNumber", articleNumber2);
			List<List<Object>>sohResults1 = sql.executeQueryStore(getContext(),sohArticle1,getContext().getStringProperty("BigWstore"));
			removetriplezero(sohResults1, 0);
			String soh2 = sohResults1.get(0).get(0).toString();

			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber1);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber1+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);

			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber2);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber2+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			waitFor(1);

			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(1);
			returnToVendorObjects.returnQuantityCheckNextArticle.clear();
			returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled For "+artType+";;;Pass");
			waitFor(1);
			returnToVendorObjects.finaliseButton.click();
			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(4);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Displayed;;;Pass");
				String calimNum1 = returnToVendorObjects.finaliseNumberPopUp.getText();
				String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticle.getText();
				claimNumber1 = calimNum1.substring(53, 63);
				claimNumber2 = calimNum2.substring(53, 63);
				returnToVendorObjects.okButtonPopup.click();
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number are: "+claimNumber1+" and "+claimNumber2+" in Pop up is Displayed;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}
			
			List<String>finaliseResults = new ArrayList<String>();

			String claimArticle = testdata.getText("claim");
			claimArticle = claimArticle.replace("claimNumber", claimNumber1);
			if(store.equals("smkt")){
			finaliseResults = sql.executeQueryList(getContext(),claimArticle);
			}
			else if(store.equals("bigW")){
			List<List<Object>>finaliseResults1 = sql.executeQueryStore(getContext(),claimArticle,getContext().getStringProperty("BigWstore"));
			String a = finaliseResults1.get(0).get(1).toString();
			String b = finaliseResults1.get(0).get(0).toString();
			String c = finaliseResults1.get(0).get(3).toString();
			finaliseResults.add(a);
			finaliseResults.add(b);
			finaliseResults.add("null");
			finaliseResults.add(c);
			}

			String StoreNum ="";
			if(finaliseResults.size()!=0){
				String aticleNumberClaim =  finaliseResults.get(1);
				String storeClaim = finaliseResults.get(0);
				String created_User =  finaliseResults.get(3);
				if(store.equals("smkt")){
				StoreNum = getContext().getStringProperty("store");
				}
				else if(store.equals("bigW")){
				StoreNum = getContext().getStringProperty("store");
				}
				String userId = getContext().getStringProperty("username");

				if((aticleNumberClaim.equals(articleNumber1)) || aticleNumberClaim.equals(articleNumber2)){
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB;;;Fail");
				}

				if(storeClaim.equals(StoreNum)){
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB;;;Fail");
				}

				if(created_User.equals(userId)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Claim: "+claimNumber1+" is Not Found in DB;;;Fail");
			}

			//Second Article Claim
			List<String>finaliseResults1 = new ArrayList<String>();
			claimArticle = testdata.getText("claim");
			claimArticle = claimArticle.replace("claimNumber", claimNumber2);
			if(store.equals("smkt")){
			finaliseResults1 = sql.executeQueryList(getContext(),claimArticle);
			}
			else if(store.equals("bigW")){
				List<List<Object>>finaliseResults12 = sql.executeQueryStore(getContext(),claimArticle,getContext().getStringProperty("BigWstore"));
				System.out.println(finaliseResults1);
				String a = finaliseResults12.get(0).get(1).toString();
				String b = finaliseResults12.get(0).get(0).toString();
				String c = finaliseResults12.get(0).get(3).toString();
				finaliseResults1.add(a);
				finaliseResults1.add(b);
				finaliseResults1.add("null");
				finaliseResults1.add(c);
			}

			if(finaliseResults1.size()!=0){
				String aticleNumberClaim =  finaliseResults1.get(1);
				String storeClaim = finaliseResults1.get(0);
				String created_User =  finaliseResults1.get(3);

				StoreNum = getContext().getStringProperty("store");
				String userId = getContext().getStringProperty("username");

				if((aticleNumberClaim.equals(articleNumber1)) || aticleNumberClaim.equals(articleNumber2)){
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB;;;Fail");
				}

				if(storeClaim.equals(StoreNum)){
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB;;;Fail");
				}

				if(created_User.equals(userId)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Claim: "+claimNumber2+" is Not Found in DB;;;Fail");
			}
			
			//First Article SOH
			List<List<Object>>sohResultsFinal = null;
			String sohArticleFinal = testdata.getText("soh");
			sohArticleFinal = sohArticleFinal.replace("articleNumber", articleNumber1);
			if(store.equals("smkt")){
			sohResultsFinal = sql.executeQuery(getContext(),sohArticleFinal);
			}
			else if(store.equals("bigW")){
			sohResultsFinal = sql.executeQueryStore(getContext(),sohArticleFinal,getContext().getStringProperty("BigWstore"));
			}
			removetriplezero(sohResultsFinal, 0);
			String sohFinal = sohResultsFinal.get(0).get(0).toString();

			double sohint = Integer.valueOf(soh1);
			double sohintFinal = Integer.valueOf(sohFinal);
			double returnQtyint = Integer.valueOf(returnQuantity);

			if(sohintFinal ==(sohint-returnQtyint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber1+" is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber1+" is Not Matching with DB after Creating Claim;;;Fail");
			}

			//Second Article SOH
			List<List<Object>>sohResultsFinal1 = null;
			String sohArticleFinal1 = testdata.getText("soh");
			sohArticleFinal1 = sohArticleFinal1.replace("articleNumber", articleNumber2);
			if(store.equals("smkt")){
			sohResultsFinal1 = sql.executeQueryStore(getContext(),sohArticleFinal1,getContext().getStringProperty("BigWstore"));
			}
			else if(store.equals("bigW")){
			sohResultsFinal1 = sql.executeQueryStore(getContext(),sohArticleFinal1,getContext().getStringProperty("BigWstore"));
			}
			removetriplezero(sohResultsFinal1, 0);
			String sohFinal1 = sohResultsFinal1.get(0).get(0).toString();

			double sohint1 = Integer.valueOf(soh2);
			double sohintFinal1 = Integer.valueOf(sohFinal1);
			double returnQtyint1 = Integer.valueOf(returnQuantity);

			if(sohintFinal1 ==(sohint1-returnQtyint1)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber2+" is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber2+" is Not Matching with DB after Creating Claim;;;Fail");
			}


		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void validationForDraftClaim(List<String>articleDetailHawa,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String calimNumber = "";

			String articleNumber = articleDetailHawa.get(0);
			String sohArticle = testdata.getText("soh");
			sohArticle = sohArticle.replace("articleNumber", articleNumber);
			List<List<Object>>sohResults = sql.executeQuery(getContext(),sohArticle);
			removetriplezero(sohResults, 0);
			String soh = sohResults.get(0).get(0).toString();

			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			/*String date= common.getCurrentDate();
		returnToVendorObjects.authorisationDate.sendKeys(date);*/
			waitFor(1);
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled For "+artType+";;;Pass");
			waitFor(1);
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			/*if(returnToVendorObjects.okButtonPopup1.size()==0){
			htmlToExtent(cName,mName,extLogger,driver, "Conformation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
			returnToVendorObjects.okButtonPopup.click();
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "Conformation PopUp Message is Displayed While Drafting Claim;;;Fail");
		}*/

			/*if(returnToVendorObjects.errorCloseClaim.size()!=0){
			htmlToExtent(cName,mName,extLogger,driver, "Error Message is Displayed while Finalising the Claim;;;Fail");
		}*/

			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				calimNumber = calimNum.substring(50, 60);
				htmlToExtent(cName,mName,extLogger,driver, "Draft Calim Number: "+calimNumber+" Pop up is Displayed;;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}


			/*String claimArticle = testdata.getText("claim");
		claimArticle = claimArticle.replace("claimNumber", calimNumber);
		List<String>finaliseResults = sql.executeQueryList(getContext(),claimArticle);

		if(finaliseResults.size()!=0){
		String aticleNumberClaim =  finaliseResults.get(1);
		String storeClaim = finaliseResults.get(0);
		String created_User =  finaliseResults.get(3);

		String StoreNum = getContext().getStringProperty("store");
		String userId = getContext().getStringProperty("username");

		if(aticleNumberClaim.equals(articleNumber)){
			htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB;;;Fail");
		}

		if(storeClaim.equals(StoreNum)){
			htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB;;;Fail");
		}

		if(created_User.equals(userId)){
			htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB;;;Fail");
		}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
		}*/

			String sohArticleFinal = testdata.getText("soh");
			sohArticleFinal = sohArticleFinal.replace("articleNumber", articleNumber);
			List<List<Object>>sohResultsFinal = sql.executeQuery(getContext(),sohArticleFinal);
			removetriplezero(sohResultsFinal, 0);
			String sohFinal = sohResultsFinal.get(0).get(0).toString();

			double sohint = Integer.valueOf(soh);
			double sohintFinal = Integer.valueOf(sohFinal);
			double returnQtyint = Integer.valueOf(returnQuantity);

			if(sohintFinal ==(sohint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article is Matching with DB and value Not Reduced after Drafting the Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article is Not Matching with DB after Creating Claim;;;Fail");
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void validationForDraftClaimInternational(List<String>articleList,ReturnToVendorObjects returnToVendorObjects,String artType,String returnQuantity,String iteration,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String claimNumber = "";
			String claimNumber1 = "";
			String claimNumber2 = "";
			List<List<Object>>sohResults = null;
			String articleNumber1 = articleList.get(0);
			String articleNumber2 = articleList.get(1);
			
			
			String sohArticle = testdata.getText("soh");
			sohArticle = sohArticle.replace("articleNumber", articleNumber1);
			sohResults = sql.executeQueryStore(getContext(),sohArticle,getContext().getStringProperty("BigWstore"));
			
			removetriplezero(sohResults, 0);
			String soh1 = sohResults.get(0).get(0).toString();

			String sohArticle1 = testdata.getText("soh");
			sohArticle1 = sohArticle1.replace("articleNumber", articleNumber2);
			List<List<Object>>sohResults1 = sql.executeQueryStore(getContext(),sohArticle1,getContext().getStringProperty("BigWstore"));
			removetriplezero(sohResults1, 0);
			String soh2 = sohResults1.get(0).get(0).toString();

			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber1);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber1+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);

			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber2);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber2+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			waitFor(1);

			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(1);
			returnToVendorObjects.returnQuantityCheckNextArticle.clear();
			returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled For "+artType+";;;Pass");
			waitFor(1);
			
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(iteration.equals("1")){
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				claimNumber1 = calimNum.substring(52, 60);

				String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticle.getText();
				claimNumber2 = calimNum2.substring(52, 60);

				htmlToExtent(cName,mName,extLogger,driver, "Claim Number are: "+claimNumber1+" and "+claimNumber2+";;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}
			}
			else if(iteration.equals("2")){
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					claimNumber = calimNum.substring(50, 60);
					htmlToExtent(cName,mName,extLogger,driver, "Draft Calim Number: "+claimNumber+" Pop up is Displayed;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
			}
			
			
			if(iteration.equals("1")){
			List<String>finaliseResults = new ArrayList<String>();
			String claimArticle = testdata.getText("claim");
			claimArticle = claimArticle.replace("claimNumber", claimNumber1);
			List<List<Object>>finaliseResults1 = sql.executeQueryStore(getContext(),claimArticle,getContext().getStringProperty("BigWstore"));

			if(finaliseResults.size()==0){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number: "+claimNumber1+" is Not Updated in DB;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number: "+claimNumber1+" is Updated in DB;;;Fail");
			}

			//Second Article Claim
			claimArticle = testdata.getText("claim");
			claimArticle = claimArticle.replace("claimNumber", claimNumber2);
			List<List<Object>>finaliseResults12 = sql.executeQueryStore(getContext(),claimArticle,getContext().getStringProperty("BigWstore"));

			if(finaliseResults1.size()==0){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number: "+claimNumber2+" is Not Updated in DB;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number: "+claimNumber2+" is Updated in DB;;;Fail");
			}
			}
			else if(iteration.equals("2")){
				List<String>finaliseResults = new ArrayList<String>();
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", claimNumber);
				List<List<Object>>finaliseResults1 = sql.executeQueryStore(getContext(),claimArticle,getContext().getStringProperty("BigWstore"));

				if(finaliseResults.size()==0){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number: "+claimNumber+" is Not Updated in DB;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number: "+claimNumber+" is Updated in DB;;;Fail");
				}
			}
			
			//First Article SOH
			List<List<Object>>sohResultsFinal = null;
			String sohArticleFinal = testdata.getText("soh");
			sohArticleFinal = sohArticleFinal.replace("articleNumber", articleNumber1);
			sohResultsFinal = sql.executeQueryStore(getContext(),sohArticleFinal,getContext().getStringProperty("BigWstore"));
			removetriplezero(sohResultsFinal, 0);
			String sohFinal = sohResultsFinal.get(0).get(0).toString();

			double sohint = Integer.valueOf(soh1);
			double sohintFinal = Integer.valueOf(sohFinal);
			double returnQtyint = Integer.valueOf(returnQuantity);

			if(sohintFinal ==(sohint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber1+" is Matching with DB after Drafting Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber1+" is Not Matching with DB after Drafting Claim;;;Fail");
			}

			//Second Article SOH
			List<List<Object>>sohResultsFinal1 = null;
			String sohArticleFinal1 = testdata.getText("soh");
			sohArticleFinal1 = sohArticleFinal1.replace("articleNumber", articleNumber2);
			sohResultsFinal1 = sql.executeQueryStore(getContext(),sohArticleFinal1,getContext().getStringProperty("BigWstore"));
			removetriplezero(sohResultsFinal1, 0);
			String sohFinal1 = sohResultsFinal1.get(0).get(0).toString();

			double sohint1 = Integer.valueOf(soh2);
			double sohintFinal1 = Integer.valueOf(sohFinal1);
			double returnQtyint1 = Integer.valueOf(returnQuantity);

			if(sohintFinal1 ==(sohint1)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber2+" is Matching with DB after Drafting Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article:"+articleNumber2+" is Not Matching with DB after Drafting Claim;;;Fail");
			}

		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public String validationFor50Articles(List<String>articleList,String returnQuantity,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		String claimNumber = "";
		try{
			int max = 10;
			int min = 2;
			String articleNumber = "";
			for(int i=0;i<=50;i++){
				articleNumber = articleList.get(i);
				waitFor(1);
				returnToVendorObjects.articleTextBox.clear();
				returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
				waitFor(1);
				returnToVendorObjects.searchAddButton.click();
				waitForJSandJQueryToLoad(driver);;
				if(returnToVendorObjects.multipleArticlePopup.isDisplayed()){
					returnToVendorObjects.multipleArticlePopupCheckBox.click();
					returnToVendorObjects.addToListButton.click();
					waitFor(2);
				}
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
						waitFor(2);
					}
				}
			}

			if(returnToVendorObjects.errorCloseClaim50Articles1.size()!=0){
				String messageValidation = returnToVendorObjects.errorMessage.getText();
				if(messageValidation.contains("Article Claim Limit has been reached. Please generate a new claim for supplier")){
					returnToVendorObjects.errorCloseClaim50Articles.click();
					htmlToExtent(cName,mName,extLogger,driver, "Error Message: "+messageValidation+" is Displayed for Entering Articles beyond Limit 50 as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Error Message is Not Displayed for Entering beyond Limit 50;;;Fail");
				}
			}
		}
		catch(Exception e){
			htmlToExtent(cName,mName,extLogger,driver, "Exception occured during Adding 50 Articles;;;Fail");
		}
		return claimNumber;
	}
	
	public String validationFor100Articles(List<String>articleList,String returnQuantity,int count,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		String claimNumber = "";
		try{
			int max = 10;
			int min = 2;
			String articleNumber = "";
			for(int i=0;i<=count;i++){
				articleNumber = articleList.get(i);
				htmlToExtent(cName,mName,extLogger,driver, " Article "+i+"-"+articleList.get(i)+";;;Pass");
				waitFor(1);
				returnToVendorObjects.articleTextBox.clear();
				returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
				waitFor(1);
				returnToVendorObjects.searchAddButton.click();
				waitForJSandJQueryToLoad(driver);;
				if(returnToVendorObjects.multipleArticlePopup.isDisplayed()){
					returnToVendorObjects.multipleArticlePopupCheckBox.click();
					returnToVendorObjects.addToListButton.click();
					waitFor(2);
				}
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						waitFor(2);
						returnToVendorObjects.conYesButton.click();
						waitFor(2);
					}
				}
			}

			if(returnToVendorObjects.errorCloseClaim50Articles1.size()!=0){
				String messageValidation = returnToVendorObjects.errorMessage.getText();
				if(messageValidation.contains("Article Claim Limit has been reached. Please generate a new claim for supplier")){
					returnToVendorObjects.errorCloseClaim50Articles.click();
					htmlToExtent(cName,mName,extLogger,driver, "Error Message: "+messageValidation+" is Displayed for Entering Articles beyond Limit "+count+" as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Error Message is Not Displayed for Entering beyond Limit "+count+";;;Fail");
				}
			}
			
			returnToVendorObjects.reasonCodeDropdown1.click();
			int j = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,j,driver);
			element.click();
			waitFor(3);
			
			for(int i=1;i<=count;i++){
				WebElement element1 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.returnQuantityCheckAllArticles,i,driver);
				element1.clear();
				element1.sendKeys(returnQuantity);
			}
			
			waitFor(1);
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				claimNumber = calimNum.substring(52, 60);
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is: "+claimNumber+";;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}
		}
		catch(Exception e){
			htmlToExtent(cName,mName,extLogger,driver, "Exception occured during Adding "+count+" Articles;;;Fail");
		}
		return claimNumber;
	}

	public void validationForSupplierTypes(String articleNumber,String count,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String returnQuantity ="5";
			int returnQuantityInt = Integer.valueOf(returnQuantity);
			waitFor(1);
			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			if(count.equals("1")){
				if(returnToVendorObjects.finaliseButton.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Displayed when Article of one vendor is Added;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Not Displayed when Article of one vendor is Added;;;Fail");
				}
				returnToVendorObjects.reasonCodeDropdown1.click();
				int i = generateRandomNumber(min,max);
				WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
				element.click();
				waitFor(1);
				returnToVendorObjects.returnQuantityCheck.clear();
				returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
				returnToVendorObjects.uomRadioButton.click();
				String uomValueScreen = returnToVendorObjects.uomValue.getText();
				int uomValueScreenInt =  Integer.valueOf(uomValueScreen);

				String totalUnitsSceen = returnToVendorObjects.totalUnitsValue.getText();
				int totalUnitsSceenInt = Integer.valueOf(totalUnitsSceen);

				int x = returnQuantityInt*uomValueScreenInt;

				if(x ==totalUnitsSceenInt){
					htmlToExtent(cName,mName,extLogger,driver, "The Returan Quantity is Convered in Total Units with OM;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Returan Quantity is Not Convered in Total Units with OM;;;Pass");
				}
				returnToVendorObjects.uonRadioButtonEA.click();

			}

			if(count.equals("3")){
				if(returnToVendorObjects.articleCount.getText().equals("(2)")){
					htmlToExtent(cName,mName,extLogger,driver, "Article Number Count is increased to 2 when Next Article is Added as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Article Number Count is Not increased to 2 when Next Article is Added;;;Pass");
				}
				if(!returnToVendorObjects.finaliseButton.isDisplayed() && returnToVendorObjects.saveAsDraftButton.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Not Displayed and Save as Draft Button is Displayed when another vendor is Added as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Displayed and Save as Draft Button is Displayed when another vendor is Added;;;Fail");
				}

				returnToVendorObjects.reasonCodeDropdown1.click();
				int i = generateRandomNumber(min,max);
				WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
				element.click();
				waitFor(1);
				returnToVendorObjects.returnQuantityCheck.clear();
				returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);

				returnToVendorObjects.nextreasonCodeDropdown1.click();
				i = generateRandomNumber(min,max);
				WebElement element1 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeNextArticle,i,driver);
				element1.click();
				waitFor(1);
				returnToVendorObjects.returnQuantityCheckNextArticle.clear();
				returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);

				returnToVendorObjects.saveAsDraftButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed() && returnToVendorObjects.finaliseNumberPopUpNextArticle.isDisplayed()){
					//					htmlToExtent(cName,mName,extLogger,driver, "Conformation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed for Both Articles;;;Pass");
					String calimNum1 = returnToVendorObjects.finaliseNumberPopUp.getText();
					String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticle.getText();
					String calimNumber1 = calimNum1.substring(50, 60);
					String calimNumber2 = calimNum2.substring(50, 60);
					returnToVendorObjects.okButtonPopup.click();
					htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number for 1st and 2nd Articles: "+calimNumber1+ " and " +calimNumber2+" Pop up is Displayed for Both Articles;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up  or Claim Number for Two articles is Not Displayed;;;Fail");
				}

			}

			if(count.equals("2")){
				if(!returnToVendorObjects.finaliseButton.isDisplayed() && returnToVendorObjects.saveAsDraftButton.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Not Displayed and Save as Draft Button is Displayed when another vendor is Added as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Displayed and Save as Draft Button is Displayed when another vendor is Added;;;Fail");
				}
				waitFor(2);
				returnToVendorObjects.deleteArticleButtonNextArticle.click();
				waitFor(2);
				returnToVendorObjects.okButtonPopup.click();
				if(returnToVendorObjects.finaliseButton.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Displayed after Deleting Second Article Added Before as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Not Displayed after Deleting Second Article Added Before;;;Fail");
				}

				returnToVendorObjects.articleTextBox.clear();
				returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
				returnToVendorObjects.searchAddButton.click();
				waitForJSandJQueryToLoad(driver);;
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
					}
				}
				waitFor(2);
				returnToVendorObjects.deleteArticleButton.click();
				waitFor(2);
				returnToVendorObjects.okButtonPopup.click();
				if(returnToVendorObjects.finaliseButton.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Displayed after Deleting First Article Added Before as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Finalise Button is Not Displayed after Deleting First Article Added Before;;;Fail");
				}

			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}


	public String validationForDraftAndAdvansedSearch(List<String>articleList,String vendorNumber,String returnQuantity,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		String claimNumber = "";
		try{
			String articleNumber = "";
			int max = 10;
			int min = 2;


			for(int i=0;i<=articleList.size()-2;i++){
				if(i==0){
					articleNumber = articleList.get(i);
					waitFor(1);
					returnToVendorObjects.articleTextBox.clear();
					returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
					returnToVendorObjects.searchAddButton.click();
					waitForJSandJQueryToLoad(driver);;
					if(returnToVendorObjects.conformationPopup.isDisplayed()){
						String conMsg= returnToVendorObjects.conformationPopup.getText();
						if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
							returnToVendorObjects.conYesButton.click();
						}
					}
					waitFor(3);
					returnToVendorObjects.reasonCodeDropdown1.click();
					int j = generateRandomNumber(min,max);
					WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,j,driver);
					element.click();
					waitFor(1);
				}
				if(i==1){
					articleNumber = articleList.get(i);
					waitFor(3);
					returnToVendorObjects.articleTextBox.clear();
					returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
					returnToVendorObjects.searchAddButton.click();
					waitForJSandJQueryToLoad(driver);;
					if(returnToVendorObjects.conformationPopup.isDisplayed()){
						String conMsg= returnToVendorObjects.conformationPopup.getText();
						if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
							returnToVendorObjects.conYesButton.click();
						}
					}
					waitFor(3);
					returnToVendorObjects.returnQuantityCheck.clear();
					returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
					returnToVendorObjects.returnQuantityCheckNextArticle.clear();
					returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
				}
			}
			waitFor(1);
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				claimNumber = calimNum.substring(52, 60);
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is: "+claimNumber+";;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}

			//Draft Search
			waitFor(3);
			returnToVendorObjects.errorCloseClaimEnquiry.click();
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Draft");
			htmlToExtent(cName,mName,extLogger,driver, "Draft is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advSourceDropdown.sendKeys("Store");
			htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.tableClaimNumber.getText().equals(claimNumber)){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Not Displayed;;;Fail");
			}

			if(returnToVendorObjects.tableClaimStatus.getText().equals("Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table: "+returnToVendorObjects.tableClaimStatus.getText()+" is Not Displayed;;;Fail");
			}

			//Finalised Search
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
			htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if((returnToVendorObjects.claimErrorClose1.size()!=0)){
				if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Finalised Search as Expected;;;Pass");
					returnToVendorObjects.claimErrorClose.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Finalised Search;;;Fail");
			}

			//Cancelled Search

			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
			htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if((returnToVendorObjects.claimErrorClose1.size()!=0)){
				if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Cancelled Search as Expected;;;Pass");
					returnToVendorObjects.claimErrorClose.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Cancelled Search;;;Fail");
			}

			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Draft");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

		}
		catch(Exception e){
			e.printStackTrace();
		}
		return claimNumber;
	}

	public String validationForDraftMandatory(List<String>articleList,String vendorNumber,String returnQuantity,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		String claimNumber = "";
		try{
			String articleNumber = "";
			int max = 10;
			int min = 2;


			articleNumber = articleList.get(0);
			waitFor(1);
			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			waitFor(3);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int j = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,j,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(1);
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				claimNumber = calimNum.substring(52, 60);
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is: "+claimNumber+";;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}

			waitFor(3);
			returnToVendorObjects.errorCloseClaimEnquiry.click();
			waitFor(1);
			returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			returnToVendorObjects.deleteArticleFormDraft.click();
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals("Please confirm to remove item?")){
					returnToVendorObjects.okButtonPopup.click();
				}
			}

			returnToVendorObjects.saveClaim.click();

			waitFor(3);
			if(returnToVendorObjects.errorCloseClaim.size()!=0){
				String conMsg= returnToVendorObjects.errorMsgMandatory.getText();
				if(conMsg.equals("Atleast 1 article is mandatory")){
					htmlToExtent(cName,mName,extLogger,driver, "Error Message: "+conMsg+".Error Message is Displayed when Last Article is Deleted and Save in a Claim;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Error Message: "+conMsg+".Error Message is Displayed when Last Article is Deleted and Save in a Claim But Message is Incorrect;;;Fail");
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Not Displayed when Last Article is Deleted and Save in a Claim;;;Fail");
			}


		}
		catch(Exception e){
			e.printStackTrace();
		}
		return claimNumber;
	}

	public String validationForDraftAndAdvansedSearchDangerous(List<String>articleList,String vendorNumber,String returnQuantity,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		String claimNumber = "";
		try{
			String articleNumber = "";
			int max = 10;
			int min = 2;

			articleNumber = articleList.get(0);
			waitFor(1);
			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.dangerousConformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.dangerousConformationPopup.getText();
				if(conMsg.contains("STOP! Dangerous Goods Declaration on CONSIGNMENT NOTE must be read, understood and fully completed")){
					htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed for Dangerous Article Expected;;;Pass");
					returnToVendorObjects.dangerousconYesButton.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed and Error Message is Mismatched for Dangerous;;;Fail");
					returnToVendorObjects.dangerousconYesButton.click();
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Dangerous Article PopUp Message is Not Displayed while adding the Article;;;Fail");
			}
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(returnToVendorObjects.conformationPopup1.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup1.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			waitFor(3);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int j = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,j,driver);
			element.click();
			waitFor(3);
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);

			waitFor(1);
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				claimNumber = calimNum.substring(52, 60);
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is: "+claimNumber+";;;Pass");
				returnToVendorObjects.dangerousOkButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}

			//Draft Search
			waitFor(3);
			returnToVendorObjects.errorCloseClaimEnquiry.click();
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Draft");
			htmlToExtent(cName,mName,extLogger,driver, "Draft is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advSourceDropdown.sendKeys("Store");
			htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			int count = returnToVendorObjects.tableClaimNumber1.size();
			if(count>2){
				for(int i=2;i<=returnToVendorObjects.tableClaimNumber1.size();i++){
					WebElement element1 = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberDraft,i,driver);
					String temp = element1.getText();
					if((temp.equals(claimNumber))){
						htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Displayed as Expected;;;Pass");
						break;
					}
				}
			}
			else if(count==2){
				if((returnToVendorObjects.tableClaimNumber.getText().equals(claimNumber))){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Displayed as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Not Displayed;;;Fail");
				}
			}


			if(returnToVendorObjects.tableClaimStatus.getText().equals("Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table: "+returnToVendorObjects.tableClaimStatus.getText()+" is Not Displayed;;;Fail");
			}

			//		if(returnToVendorObjects.tableClaimNumber.getText().equals(claimNumber)){
			//			htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Displayed as Expected;;;Pass");
			//		}
			//		else{
			//			htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Not Displayed;;;Fail");
			//		}
			//		
			//		if(returnToVendorObjects.tableClaimStatus.getText().equals("Draft")){
			//			htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table is Displayed as Expected;;;Pass");
			//		}
			//		else{
			//			htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table: "+returnToVendorObjects.tableClaimStatus.getText()+" is Not Displayed;;;Fail");
			//		}

			//Finalised Search
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
			htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			int count1 = returnToVendorObjects.tableFinalClaimNumber1.size();
			if(count1>2){
				for(int i=2;i<=returnToVendorObjects.tableFinalClaimNumber1.size();i++){
					WebElement element2 = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberFinal,i,driver);
					String temp = element2.getText();
					if((temp.equals(claimNumber))){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Finalised Search;;;Fail");
						break;
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Finalised Search as Expected;;;Pass");
						break;
					}
				}
			}

			else if(count1 ==0){
				if((returnToVendorObjects.claimErrorClose1.size()!=0)){
					if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Finalised Search as Expected;;;Pass");
						returnToVendorObjects.claimErrorClose.click();
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
					}
				}
			}

			//		if((returnToVendorObjects.claimErrorClose1.size()!=0)){
			//			if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
			//				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Finalised Search as Expected;;;Pass");
			//				returnToVendorObjects.claimErrorClose.click();
			//			}
			//			else{
			//				htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
			//			}
			//		}
			//		else{
			//			htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Finalised Search;;;Fail");
			//		}

			//Cancelled Search

			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
			htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			int count2 = returnToVendorObjects.tableCancelClaimNumber1.size();
			if(count2>2){
				for(int i=2;i<=returnToVendorObjects.tableCancelClaimNumber1.size();i++){
					WebElement element3 = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberCancel,i,driver);
					String temp = element3.getText();
					if((temp.equals(claimNumber))){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Cancelled Search;;;Fail");
						break;
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Cancelled Search as Expected;;;Pass");
						break;
					}
				}
			}

			else if(count2==0){
				if((returnToVendorObjects.claimErrorClose1.size()!=0)){
					if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Cancelled Search as Expected;;;Pass");
						returnToVendorObjects.claimErrorClose.click();
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
					}
				}
			}
			//		if((returnToVendorObjects.claimErrorClose1.size()!=0)){
			//			if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
			//				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Cancelled Search as Expected;;;Pass");
			//				returnToVendorObjects.claimErrorClose.click();
			//			}
			//			else{
			//				htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
			//			}
			//		}
			//		else{
			//			htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Cancelled Search;;;Fail");
			//		}

			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Draft");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

		}
		catch(Exception e){
			e.printStackTrace();
		}
		return claimNumber;
	}

	public List<String> validationForDraftAndAdvansedSearchConsignment(List<String>articleList,String vendorNumber,String returnQuantity,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		List<String> claimNumbers = new ArrayList<String>();
		String claimNumber = "";
		String claimNumber2 = "";
		try{
			String articleNumber = "";
			int max = 10;
			int min = 2;


			for(int i=0;i<=articleList.size()-2;i++){
				if(i==0){
					articleNumber = articleList.get(i);
					waitFor(1);
					returnToVendorObjects.articleTextBox.clear();
					returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
					returnToVendorObjects.searchAddButton.click();
					waitForJSandJQueryToLoad(driver);;
					if(returnToVendorObjects.conformationPopup.isDisplayed()){
						String conMsg= returnToVendorObjects.conformationPopup.getText();
						if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
							returnToVendorObjects.conYesButton.click();
						}
					}
					waitFor(3);
					returnToVendorObjects.reasonCodeDropdown1.click();
					int j = generateRandomNumber(min,max);
					WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,j,driver);
					element.click();
					waitFor(1);
				}
				if(i==2){
					articleNumber = articleList.get(i);
					waitFor(3);
					returnToVendorObjects.articleTextBox.clear();
					returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
					returnToVendorObjects.searchAddButton.click();
					waitForJSandJQueryToLoad(driver);;
					if(returnToVendorObjects.conformationPopup.isDisplayed()){
						String conMsg= returnToVendorObjects.conformationPopup.getText();
						if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
							returnToVendorObjects.conYesButton.click();
						}
					}
					waitFor(3);
					returnToVendorObjects.returnQuantityCheck.clear();
					returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
					returnToVendorObjects.returnQuantityCheckNextArticle.clear();
					returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
				}
			}
			waitFor(1);
			returnToVendorObjects.saveAsDraftButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number Pop up is Displayed;;;Pass");
				String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
				claimNumber = calimNum.substring(52, 60);

				String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticle.getText();
				claimNumber2 = calimNum2.substring(52, 60);

				htmlToExtent(cName,mName,extLogger,driver, "Claim Number are: "+claimNumber+" and "+claimNumber2+";;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
			}

			//Draft Search
			waitFor(3);
			returnToVendorObjects.errorCloseClaimEnquiry.click();
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Draft");
			htmlToExtent(cName,mName,extLogger,driver, "Draft is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advSourceDropdown.sendKeys("Store");
			htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			int count = returnToVendorObjects.tableClaimNumber1.size();
			if(count>2){
				for(int i=2;i<=returnToVendorObjects.tableClaimNumber1.size();i++){
					WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberDraft,i,driver);
					String temp = element.getText();
					if((temp.equals(claimNumber)) || (temp.equals(claimNumber2))){
						htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Displayed as Expected;;;Pass");
						break;
					}
				}
			}
			else if(count==2){
				if((returnToVendorObjects.tableClaimNumber.getText().equals(claimNumber)) || (returnToVendorObjects.tableClaimNumber.getText().equals(claimNumber2))){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Displayed as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number in the table is Not Displayed;;;Fail");
				}
			}


			if(returnToVendorObjects.tableClaimStatus.getText().equals("Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Status in the table: "+returnToVendorObjects.tableClaimStatus.getText()+" is Not Displayed;;;Fail");
			}

			//Finalized Search
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
			htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			int count1 = returnToVendorObjects.tableFinalClaimNumber1.size();
			if(count1>2){
				for(int i=2;i<=returnToVendorObjects.tableFinalClaimNumber1.size();i++){
					WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberFinal,i,driver);
					String temp = element.getText();
					if((temp.equals(claimNumber)) || (temp.equals(claimNumber2))){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Finalised Search;;;Fail");
						break;
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Finalised Search as Expected;;;Pass");
						break;
					}
				}
			}

			else if(count1 ==0){
				if((returnToVendorObjects.claimErrorClose1.size()!=0)){
					if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Finalised Search as Expected;;;Pass");
						returnToVendorObjects.claimErrorClose.click();
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
					}
				}
			}
			//		else{
			//			htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Finalised Search;;;Fail");
			//		}

			//Cancelled Search

			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
			htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			int count2 = returnToVendorObjects.tableCancelClaimNumber1.size();
			if(count2>2){
				for(int i=2;i<=returnToVendorObjects.tableCancelClaimNumber1.size();i++){
					WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberCancel,i,driver);
					String temp = element.getText();
					if((temp.equals(claimNumber)) || (temp.equals(claimNumber2))){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Cancelled Search;;;Fail");
						break;
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Cancelled Search as Expected;;;Pass");
						break;
					}
				}
			}

			else if(count2==0){
				if((returnToVendorObjects.claimErrorClose1.size()!=0)){
					if(returnToVendorObjects.claimErrorMessage.getText().contains("No Claims Found")){
						htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Not Displayed under Cancelled Search as Expected;;;Pass");
						returnToVendorObjects.claimErrorClose.click();
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Message is Incorrect in Error Popup Message;;;Pass");
					}
				}
			}
			//		else{
			//			htmlToExtent(cName,mName,extLogger,driver, "The Claim Number is Displayed in Cancelled Search;;;Fail");
			//		}

			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Draft");
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			claimNumbers.add(claimNumber);
			claimNumbers.add(claimNumber2);

		}
		catch(Exception e){
			e.printStackTrace();
		}
		return claimNumbers;
	}

	public void validationForDraftToFinaliseAndCancel(String claimNumber,String vendorNumber,List<String>articleList,List<String>articleNotList,String claimType,ReturnToVendorObjects returnToVendorObjects,String user,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;

			String userId1 = getContext().getStringProperty("username");
			String user1 = testdata.getText("userName");
			user1 = user1.replace("userID", userId1);
			List<String>userName = sql.executeQueryList(getContext(),user1);
			String userIdFinal = userName.get(0);

			waitFor(2);
			String cartonPickupQty = "2";
			if(user.equals("1")){
				returnToVendorObjects.tableClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
			}

			returnToVendorObjects.backHeaderButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.advansedSearch.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Displayed after clicking Back Button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Not Displayed after clicking Back Button;;;Pass");
			}

			returnToVendorObjects.tableClaimNumber.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Draft as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Draft;;;Fail");
			}

			String claimNum = returnToVendorObjects.claimHeaderClaimNumber.getText();
			String claimNo = claimNum.substring(14, 22);
			if(claimNumber.equals(claimNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String supplierNum = returnToVendorObjects.claimHeaderSupplierNumber.getText();
			String supplierNo = supplierNum.substring(0, 10);
			if(vendorNumber.equals(supplierNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String todaysDate = common.getCurrentDate();
			if(todaysDate.equals(returnToVendorObjects.claimHeaderDate.getText())){
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String sourceName = returnToVendorObjects.claimHeaderSource.getText();
			if(sourceName.equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String createdBy = returnToVendorObjects.claimHeaderCreatedBy.getText();

			if(createdBy.contains(userIdFinal)){
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect;;;Fail");
			}

			//Claim Note Print Page
			returnToVendorObjects.claimHeaderPrintButton.click();
			waitFor(1);
			returnToVendorObjects.claimHeaderClaimNotePrint.click();

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			String winHandleBefore = driver.getWindowHandle();
			for(String winHandle : driver.getWindowHandles()){
				driver.switchTo().window(winHandle);
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);
			htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

			//Edit Page
			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int l = generateRandomNumber(min,max);
			WebElement element6 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,l,driver);
			element6.click();
			waitFor(1);

			//Save Action
			returnToVendorObjects.cancelSaveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(5);
			if(returnToVendorObjects.noPopupSaveClaim.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Claim list is not saved. Do you want to save claims?")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Cancel Button as Expected;;;Pass");
					returnToVendorObjects.noPopupSaveClaim.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Cancel Button;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.claimHeaderEditButton.isEnabled()){
				htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
			}

			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			String articleNumber = articleList.get(2);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}

			for(int i=1;i<=3;i++){
				WebElement ele = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.articleCheckClaimTable,i,driver);
				String artNum = ele.getText();
				if(artNum.equals(articleNumber)){
					htmlToExtent(cName, mName, extLogger, driver, "Article is Added Successfully for the Same Supplier;;;Pass");
					waitFor(1);
					WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.deleteArticleButtonClaim,i,driver);
					waitFor(2);
					element.click();
				}
			}
			waitFor(1);
			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article "+articleNumber+" is going to be removed from the list. Is this correct?")){
					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Displayed as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
					if(returnToVendorObjects.deleteArticleButton1.size()==0){
						htmlToExtent(cName, mName, extLogger, driver, "Article is Deleted form the drafted Claim;;;Pass");
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Article is Not Deleted form the drafted Claim;;;Fail");
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup Message is Incorrect;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Not Displayed;;;Fail");
			}

			//Adding Same Article
			String articleNumber1 = articleList.get(0);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber1);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber1+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}

			if(returnToVendorObjects.conNoButton.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().contains("Article "+articleNumber1+" already exists with Qty")){
					htmlToExtent(cName, mName, extLogger, driver, "Adding Same Article Popup Message is Displayed in Edit screen as Expected;;;Pass");
					returnToVendorObjects.conNoButton.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Adding Same Article Popup Message is Displayed or Message in Popup is Incorrect in Edit screen;;;Fail");
					returnToVendorObjects.conNoButton.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Adding Same Article Popup Message is Not Displayed in Edit screen;;;Fail");
			}

			//Not Applicable Article Validation
			//Article Number
			String articleNumberNot = articleNotList.get(0);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumberNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article Number Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article Number Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article Number Search;;;Fail");
			}

			//Article Description
			String articleDescriptionNot = articleNotList.get(1);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleDescriptionNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article Description Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article Description Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article Description Search;;;Fail");
			}

			//Article EAN
			String articleEANNot = articleNotList.get(2);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleEANNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article EAN Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article EAN Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article EAN Search;;;Fail");
			}

			//Article PLU
			if(!articleNotList.get(3).contains("")){
				String articlePLUNot = articleNotList.get(3);
				returnToVendorObjects.articleTextBox1.clear();
				returnToVendorObjects.articleTextBox1.sendKeys(articlePLUNot);
				waitFor(1);
				returnToVendorObjects.searchAddButtonClaim.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
						htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article PLU Search as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article PLU Search;;;Fail");
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article PLU Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "PLU Number is Not Present for the Article;;;Info");
			}

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int k = generateRandomNumber(min,max);
			WebElement element2 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,k,driver);
			element2.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Edit Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update
			returnToVendorObjects.authorasationCodeBoxClaim.clear();
			returnToVendorObjects.authorasationCodeBoxClaim.sendKeys("12345");
			String authCode = returnToVendorObjects.authorasationCodeBoxClaim.getAttribute("value");
			if(authCode.equals("12345")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Edit Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Edit Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update
			waitFor(2);
			returnToVendorObjects.carrierNameBoxClaim.clear();
			returnToVendorObjects.carrierNameBoxClaim.sendKeys("abcdefg");
			String carrierName = returnToVendorObjects.carrierNameBoxClaim.getAttribute("value");
			if(carrierName.equals("abcdefg")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Edit Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Edit Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxClaim.clear();
			returnToVendorObjects.vehicleRegNoBoxClaim.sendKeys("11aaqq");
			String vehRegNum = returnToVendorObjects.vehicleRegNoBoxClaim.getAttribute("value");
			if(vehRegNum.equals("11aaqq")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Carton Quantity Update
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaim.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaim.sendKeys("2");
			String carQty = returnToVendorObjects.cartonPickupQtyBoxClaim.getAttribute("value");
			if(carQty.equals("2")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Authorization Date Update
			waitFor(2);
			returnToVendorObjects.authorisationDateClaim.clear();
			String dateVer = common.getCurrentDate();
			returnToVendorObjects.authorisationDateClaim.sendKeys(dateVer);
			String date = returnToVendorObjects.authorisationDateClaim.getAttribute("value");
			if(date.equals(dateVer)){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Date in Edit Screen and the Authorisation Date has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Date in Edit Screen and the Authorisation Date has not been changed;;;Fail");
			}

			//Consignment Number Update
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaim.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaim.sendKeys("147258");
			String conNum = returnToVendorObjects.consignmentNumberTextBoxClaim.getAttribute("value");
			if(conNum.equals("147258")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Edit Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Edit Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);
			returnToVendorObjects.saveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
					returnToVendorObjects.okButtonPopup.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitFor(2);
			returnToVendorObjects.FinaliseClaimButton.click();

			//Reason Code Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdownFinalise.click();
			int j = generateRandomNumber(min,max);
			WebElement element1 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeFinalise,j,driver);
			element1.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Finalise Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update Finalize Screen
			returnToVendorObjects.authorasationCodeBoxFinalise.clear();
			returnToVendorObjects.authorasationCodeBoxFinalise.sendKeys("789456");
			String authCodeAuth = returnToVendorObjects.authorasationCodeBoxFinalise.getAttribute("value");
			if(authCodeAuth.equals("789456")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Finalise Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Finalise Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.carrierNameBoxFinalise.clear();
			returnToVendorObjects.carrierNameBoxFinalise.sendKeys("ertyu");
			String carrierNameAuth = returnToVendorObjects.carrierNameBoxFinalise.getAttribute("value");
			if(carrierNameAuth.equals("ertyu")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Finalise Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Finalise Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxFinalise.clear();
			returnToVendorObjects.vehicleRegNoBoxFinalise.sendKeys("22gg55");
			String vehRegNumAuth = returnToVendorObjects.vehicleRegNoBoxFinalise.getAttribute("value");
			if(vehRegNumAuth.equals("22gg55")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Consignment Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.sendKeys("753698");
			String conNumAuth = returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.getAttribute("value");
			if(conNumAuth.equals("753698")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Finalise Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Finalise Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);

			//Carton Quantity Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.sendKeys("1");
			String carQtyAuth = returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.getAttribute("value");
			if(carQtyAuth.equals("1")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Conditions
			if(claimType.equals("Finalise")){
				//Finalizing the Claim
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") has been finalised.")){
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed After clicking Ok Confirmation in Popup as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed or Message in Popup is Incorrect After clicking Ok Confirmation in Popup Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if(user.equals("1")){
					if(returnToVendorObjects.conYesButton.isDisplayed()){
						if(returnToVendorObjects.conformationPopup.getText().contains("Are you sure you want to print claim")){
							htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed After Finalisation Confirmation Popup as Expected;;;Pass");
							returnToVendorObjects.conYesButton.click();
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed or Message in Popup is Incorrect After Finalisation Confirmation Popup;;;Fail");
							returnToVendorObjects.conYesButton.click();
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Not Displayed After Finalisation Confirmation Popup;;;Fail");
					}
					waitFor(3);

					//Claim Print Page
					waitForJSandJQueryToLoad(driver);;
					waitFor(2);
					String winHandleBefore1 = driver.getWindowHandle();
					for(String winHandle : driver.getWindowHandles()){
						driver.switchTo().window(winHandle);
					}
					driver.close();
					driver.switchTo().window(winHandleBefore1);
					htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

					waitFor(2);
					if(returnToVendorObjects.conYesButton.isDisplayed()){
						if(returnToVendorObjects.conformationPopup.getText().equals("Do you want to print Claim Label for Cartons?")){
							htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed as Expected;;;Pass");
							returnToVendorObjects.conYesButton.click();
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed or Message in Popup is Incorrect;;;Fail");
							returnToVendorObjects.conYesButton.click();
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Not Displayed;;;Fail");
					}

					waitFor(1);
					returnToVendorObjects.cartonPickupQtyTextBox.sendKeys(cartonPickupQty);
					htmlToExtent(cName, mName, extLogger, driver, "Carton Pickup Quantity is Entered as: "+cartonPickupQty+";;;Pass");
					waitFor(1);
					returnToVendorObjects.cartonPickupQtyOkPopUp.click();
					waitFor(3);

					//Carton Label Print Page
					waitForJSandJQueryToLoad(driver);;
					waitFor(2);
					String winHandleBefore2 = driver.getWindowHandle();
					for(String winHandle : driver.getWindowHandles()){
						driver.switchTo().window(winHandle);
					}
					driver.close();
					driver.switchTo().window(winHandleBefore2);
					htmlToExtent(cName, mName, extLogger, driver, "Carton Label Print Page Navigated Successfully;;;Pass");
					waitFor(2);
				}
				else{
					if(returnToVendorObjects.conYesButton.isDisplayed()){
						if(returnToVendorObjects.conformationPopup.getText().contains("Are you sure you want to print claim")){
							htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed After Finalisation Confirmation Popup as Expected;;;Pass");
							htmlToExtent(cName, mName, extLogger, driver, "No Button is Clicked in Print Claim Popup Message;;;Pass");
							returnToVendorObjects.conNoButton.click();
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed or Message in Popup is Incorrect After Finalisation Confirmation Popup;;;Fail");
							htmlToExtent(cName, mName, extLogger, driver, "No Button is Clicked in Print Claim Popup Message;;;Pass");
							returnToVendorObjects.conNoButton.click();
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Not Displayed After Finalisation Confirmation Popup;;;Fail");
					}
					waitFor(3);
					if(returnToVendorObjects.advansedSearch.isEnabled()){
						htmlToExtent(cName, mName, extLogger, driver, "Return to Vendor Claim Page is Displayed after performing No in Print Popup;;;Pass");
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Return to Vendor Claim Page is Not Displayed after performing No in Print Popup;;;Pass");
					}

				}
				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				String userId = "";
				if(finaliseResults.size()!=0){
					String aticleNumberClaim =  finaliseResults.get(0).get(1).toString();
					String storeClaim = finaliseResults.get(0).get(0).toString();
					String created_User =  finaliseResults.get(0).get(3).toString();
					String StoreNum = getContext().getStringProperty("store");
					if(user.equals("1")){
						userId = getContext().getStringProperty("username");
					}
					else{
						userId = getContext().getStringProperty("usernameRTV");
					}

					String aticleNumberClaim1 =  finaliseResults.get(1).get(1).toString();
					String storeClaim1 = finaliseResults.get(1).get(0).toString();
					String created_User1 =  finaliseResults.get(1).get(3).toString();

					//First Article
					if(aticleNumberClaim.equals(articleList.get(0)) || aticleNumberClaim.equals(articleList.get(1))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					//Second Article
					if(aticleNumberClaim1.equals(articleList.get(0)) || aticleNumberClaim1.equals(articleList.get(1))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
				}

				//After Finalization
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
				htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if((returnToVendorObjects.tableFinalClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.finalisedClaimTab.isDisplayed())){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Finalise Tab as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Finalise Tab is Not as Expected;;;Fail");
				}
				waitFor(1);
				returnToVendorObjects.tableFinalClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Finalised")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Finalised as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Finalised;;;Fail");
				}

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(8, 16);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Articles Verify After Finalization
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if((articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("789456")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal1.getText().equals("1")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal1.getText().equals("ertyu")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal1.getText().equals("22gg55")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal1.getText().equals("753698")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("10")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}


			}
			else if(claimType.equals("Cancel")){
				waitFor(2);
				returnToVendorObjects.cancleButtonInFinalise.click();
				waitFor(1);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conNoButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please confirm to delete Claim Number "+claimNumber+" raised for Supplier")){
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conNoButton.click();
						if(returnToVendorObjects.cancelHeaderButton.isEnabled()){
							htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conNoButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Not Displayed;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.conYesButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") Deleted successfully.")){
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Not Displayed;;;Fail");
				}

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()==0){
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Not Available in DB as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Available in DB;;;Fail");
				}

				//After Cancellation
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
				htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if((returnToVendorObjects.tableCancelClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.cancelledClaimTab.isDisplayed())){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab is Not as Expected;;;Fail");
				}
				waitFor(1);
				returnToVendorObjects.tableCancelClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Cancelled")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Cancelled as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Cancelled;;;Fail");
				}

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(14, 22);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Articles Verify After Cancellation
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if((articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("12345")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal.getText().equals("2")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal.getText().equals("abcdefg")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal.getText().equals("11aaqq")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal.getText().equals("147258")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("10")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}
			}


		}
		catch(Exception e){
			e.printStackTrace();
		}
	}



	public void validationForDraftToFinaliseAndCancelConsignment(String claimNumber,String vendorNumber,List<String>articleList,List<String>articleNotList,String claimType,String iteration,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			htmlToExtent(cName,mName,extLogger,driver, "Below Validations for "+claimNumber+" Claim Number;;;Pass");
			int max = 10;
			int min = 2;
			String cartonPickupQty = "2";
			String articleNumber="";
			String articleNumber1 = "";
			String userId1 = getContext().getStringProperty("username");
			String user1 = testdata.getText("userName");
			user1 = user1.replace("userID", userId1);
			List<String>userName = sql.executeQueryList(getContext(),user1);
			String userIdFinal = userName.get(0);
			if(iteration.equals("1")){
				waitFor(2);
				returnToVendorObjects.tableClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.backHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.advansedSearch.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Displayed after clicking Back Button as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Not Displayed after clicking Back Button;;;Pass");
				}
			}
			returnToVendorObjects.advansedSearchBox.clear();
			returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			//			returnToVendorObjects.tableClaimNumber.click();
			//			waitForJSandJQueryToLoad(driver);;
			//			waitFor(2);

			if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Draft as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Draft;;;Fail");
			}

			String claimNum = returnToVendorObjects.claimHeaderClaimNumber.getText();
			String claimNo = claimNum.substring(14, 22);
			if(claimNumber.equals(claimNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String supplierNum = returnToVendorObjects.claimHeaderSupplierNumber.getText();
			String supplierNo = supplierNum.substring(0, 10);
			if(vendorNumber.equals(supplierNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String todaysDate = common.getCurrentDate();
			if(todaysDate.equals(returnToVendorObjects.claimHeaderDate.getText())){
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String sourceName = returnToVendorObjects.claimHeaderSource.getText();
			if(sourceName.equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String createdBy = returnToVendorObjects.claimHeaderCreatedBy.getText();
			if(createdBy.contains(userIdFinal)){
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect;;;Fail");
			}

			//Claim Note Print Page
			returnToVendorObjects.claimHeaderPrintButton.click();
			waitFor(1);
			returnToVendorObjects.claimHeaderClaimNotePrint.click();

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			String winHandleBefore = driver.getWindowHandle();
			for(String winHandle : driver.getWindowHandles()){
				driver.switchTo().window(winHandle);
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);
			htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

			//Edit Page
			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int l = generateRandomNumber(min,max);
			WebElement element6 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,l,driver);
			element6.click();
			waitFor(1);

			//Save Action
			returnToVendorObjects.cancelSaveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);
			if(returnToVendorObjects.noPopupSaveClaim.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Claim list is not saved. Do you want to save claims?")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Cancel Button as Expected;;;Pass");
					returnToVendorObjects.noPopupSaveClaim.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Cancel Button;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.claimHeaderEditButton.isEnabled()){
				htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
			}

			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			String a = returnToVendorObjects.tableClaimNumberEditPage.getText();
			if(a.equals(articleList.get(0))){
				articleNumber = articleList.get(1);
			}
			else{
				articleNumber = articleList.get(3);
			}

			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}

			for(int i=1;i<=2;i++){
				WebElement ele = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.articleCheckClaimTable,i,driver);
				String artNum = ele.getText();
				if(artNum.equals(articleNumber)){
					htmlToExtent(cName, mName, extLogger, driver, "Article is Added Successfully for the Same Supplier;;;Pass");
					waitFor(1);
					WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.deleteArticleButtonClaim,i,driver);
					waitFor(2);
					element.click();
				}
			}
			waitFor(1);
			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article "+articleNumber+" is going to be removed from the list. Is this correct?")){
					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Displayed as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
					if(returnToVendorObjects.deleteArticleButton1.size()==0){
						htmlToExtent(cName, mName, extLogger, driver, "Article is Deleted form the drafted Claim;;;Pass");
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Article is Not Deleted form the drafted Claim;;;Fail");
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup Message is Incorrect;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Not Displayed;;;Fail");
			}

			//Adding Same Article
			if(a.equals(articleList.get(0))){
				articleNumber1 = articleList.get(0);
			}
			else{
				articleNumber1 = articleList.get(2);
			}

			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber1);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber1+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}

			if(returnToVendorObjects.conNoButton.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().contains("Article "+articleNumber1+" already exists with Qty")){
					htmlToExtent(cName, mName, extLogger, driver, "Adding Same Article Popup Message is Displayed in Edit screen as Expected;;;Pass");
					returnToVendorObjects.conNoButton.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Adding Same Article Popup Message is Displayed or Message in Popup is Incorrect in Edit screen;;;Fail");
					returnToVendorObjects.conNoButton.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Adding Same Article Popup Message is Not Displayed in Edit screen;;;Fail");
			}

			//Adding Other Consignment Article
			if(a.equals(articleList.get(0))){
				articleNumber1 = articleList.get(2);
			}
			else{
				articleNumber1 = articleList.get(0);
			}

			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber1);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals("Consignment flag mismatch, article cannot be added. Create new claim.")){
					htmlToExtent(cName, mName, extLogger, driver, "Consignment Flag Popup Message is Displayed in Edit Screen as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Consignment Flag Popup Message is Displayed and Message is Incorrect Edit Screen;;;Pass");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Consignment Flag Popup Message is Not Displayed in Edit screen;;;Fail");
			}

			//Not Applicable Article Validation
			//Article Number
			String articleNumberNot = articleNotList.get(0);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumberNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article Number Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article Number Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article Number Search;;;Fail");
			}

			/*	//Article Description
			String articleDescriptionNot = articleNotList.get(1);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleDescriptionNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article Description Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article Description Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article Description Search;;;Fail");
			}

			//Article EAN
			String articleEANNot = articleNotList.get(2);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleEANNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article EAN Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article EAN Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article EAN Search;;;Fail");
			}

			//Article PLU
			if(!articleNotList.get(3).contains("")){
			String articlePLUNot = articleNotList.get(3);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articlePLUNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article PLU Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article PLU Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article PLU Search;;;Fail");
			}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "PLU Number is Not Present for the Article;;;Info");
			}*/

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int k = generateRandomNumber(min,max);
			WebElement element2 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,k,driver);
			element2.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Edit Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update
			returnToVendorObjects.authorasationCodeBoxClaim.clear();
			returnToVendorObjects.authorasationCodeBoxClaim.sendKeys("12345");
			String authCode = returnToVendorObjects.authorasationCodeBoxClaim.getAttribute("value");
			if(authCode.equals("12345")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Edit Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Edit Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update
			waitFor(2);
			returnToVendorObjects.carrierNameBoxClaim.clear();
			returnToVendorObjects.carrierNameBoxClaim.sendKeys("abcdefg");
			String carrierName = returnToVendorObjects.carrierNameBoxClaim.getAttribute("value");
			if(carrierName.equals("abcdefg")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Edit Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Edit Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxClaim.clear();
			returnToVendorObjects.vehicleRegNoBoxClaim.sendKeys("11aaqq");
			String vehRegNum = returnToVendorObjects.vehicleRegNoBoxClaim.getAttribute("value");
			if(vehRegNum.equals("11aaqq")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Carton Quantity Update
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaim.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaim.sendKeys("2");
			String carQty = returnToVendorObjects.cartonPickupQtyBoxClaim.getAttribute("value");
			if(carQty.equals("2")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Authorization Date Update
			waitFor(2);
			returnToVendorObjects.authorisationDateClaim.clear();
			String dateVer = common.getCurrentDate();
			returnToVendorObjects.authorisationDateClaim.sendKeys(dateVer);
			String date = returnToVendorObjects.authorisationDateClaim.getAttribute("value");
			if(date.equals(dateVer)){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Date in Edit Screen and the Authorisation Date has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Date in Edit Screen and the Authorisation Date has not been changed;;;Fail");
			}

			//Consignment Number Update
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaim.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaim.sendKeys("147258");
			String conNum = returnToVendorObjects.consignmentNumberTextBoxClaim.getAttribute("value");
			if(conNum.equals("147258")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Edit Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Edit Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);
			returnToVendorObjects.saveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
					returnToVendorObjects.okButtonPopup.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitFor(2);
			returnToVendorObjects.FinaliseClaimButton.click();

			//Reason Code Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdownFinalise.click();
			int j = generateRandomNumber(min,max);
			WebElement element1 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeFinalise,j,driver);
			element1.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Finalise Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update Finalize Screen
			returnToVendorObjects.authorasationCodeBoxFinalise.clear();
			returnToVendorObjects.authorasationCodeBoxFinalise.sendKeys("789456");
			String authCodeAuth = returnToVendorObjects.authorasationCodeBoxFinalise.getAttribute("value");
			if(authCodeAuth.equals("789456")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Finalise Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Finalise Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.carrierNameBoxFinalise.clear();
			returnToVendorObjects.carrierNameBoxFinalise.sendKeys("ertyu");
			String carrierNameAuth = returnToVendorObjects.carrierNameBoxFinalise.getAttribute("value");
			if(carrierNameAuth.equals("ertyu")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Finalise Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Finalise Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxFinalise.clear();
			returnToVendorObjects.vehicleRegNoBoxFinalise.sendKeys("22gg55");
			String vehRegNumAuth = returnToVendorObjects.vehicleRegNoBoxFinalise.getAttribute("value");
			if(vehRegNumAuth.equals("22gg55")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Consignment Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.sendKeys("753698");
			String conNumAuth = returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.getAttribute("value");
			if(conNumAuth.equals("753698")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Finalise Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Finalise Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);

			//Carton Quantity Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.sendKeys("1");
			String carQtyAuth = returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.getAttribute("value");
			if(carQtyAuth.equals("1")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Conditions
			if(claimType.equals("Finalise")){
				//Finalizing the Claim
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") has been finalised.")){
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed After clicking Ok Confirmation in Popup as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed or Message in Popup is Incorrect After clicking Ok Confirmation in Popup Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conYesButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Are you sure you want to print claim")){
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed After Finalisation Confirmation Popup as Expected;;;Pass");
						returnToVendorObjects.conYesButton.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed or Message in Popup is Incorrect After Finalisation Confirmation Popup;;;Fail");
						returnToVendorObjects.conYesButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Not Displayed After Finalisation Confirmation Popup;;;Fail");
				}
				waitFor(3);

				//Claim Print Page
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				String winHandleBefore1 = driver.getWindowHandle();
				for(String winHandle : driver.getWindowHandles()){
					driver.switchTo().window(winHandle);
				}
				driver.close();
				driver.switchTo().window(winHandleBefore1);
				htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

				waitFor(2);
				if(returnToVendorObjects.conYesButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Do you want to print Claim Label for Cartons?")){
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conYesButton.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed or Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conYesButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Not Displayed;;;Fail");
				}

				waitFor(1);
				returnToVendorObjects.cartonPickupQtyTextBox.sendKeys(cartonPickupQty);
				htmlToExtent(cName, mName, extLogger, driver, "Carton Pickup Quantity is Entered as: "+cartonPickupQty+";;;Pass");
				waitFor(1);
				returnToVendorObjects.cartonPickupQtyOkPopUp.click();
				waitFor(3);

				//Carton Label Print Page
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				String winHandleBefore2 = driver.getWindowHandle();
				for(String winHandle : driver.getWindowHandles()){
					driver.switchTo().window(winHandle);
				}
				driver.close();
				driver.switchTo().window(winHandleBefore2);
				htmlToExtent(cName, mName, extLogger, driver, "Carton Label Print Page Navigated Successfully;;;Pass");
				waitFor(2);

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()!=0){
					String aticleNumberClaim =  finaliseResults.get(0).get(1).toString();
					String storeClaim = finaliseResults.get(0).get(0).toString();
					String created_User =  finaliseResults.get(0).get(3).toString();
					String StoreNum = getContext().getStringProperty("store");
					String userId = getContext().getStringProperty("username");

					//			String aticleNumberClaim1 =  finaliseResults.get(1).get(1).toString();
					//			String storeClaim1 = finaliseResults.get(1).get(0).toString();
					//			String created_User1 =  finaliseResults.get(1).get(3).toString();

					//First Article
					if(aticleNumberClaim.equals(articleList.get(0)) || aticleNumberClaim.equals(articleList.get(2))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					/*//Second Article
			if(aticleNumberClaim1.equals(articleList.get(0)) || aticleNumberClaim1.equals(articleList.get(1))){
				htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
			}

			if(storeClaim.equals(StoreNum)){
				htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
			}

			if(created_User.equals(userId)){
				htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
			}*/
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
				}

				//After Finalization
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
				htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				//			if((returnToVendorObjects.tableFinalClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.finalisedClaimTab.isDisplayed())){
				//				htmlToExtent(cName,mName,extLogger,driver, "Calim Number is Displayed under Finalise Tab as Expected;;;Pass");
				//			}
				//			else{
				//				htmlToExtent(cName,mName,extLogger,driver, "Calim Number is Displayed under Finalise Tab is Not as Expected;;;Fail");
				//			}
				waitFor(1);
				//			returnToVendorObjects.tableFinalClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Finalised")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Finalised as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Finalised;;;Fail");
				}

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(8, 16);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Articles Verify After Finalization
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(2).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}


				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("789456")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal1.getText().equals("1")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal1.getText().equals("ertyu")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal1.getText().equals("22gg55")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal1.getText().equals("753698")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("5")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}


			}
			else if(claimType.equals("Cancel")){
				waitFor(2);
				returnToVendorObjects.cancleButtonInFinalise.click();
				waitFor(1);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conNoButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please confirm to delete Claim Number "+claimNumber+" raised for Supplier")){
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conNoButton.click();
						if(returnToVendorObjects.cancelHeaderButton.isEnabled()){
							htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conNoButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Not Displayed;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.conYesButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") Deleted successfully.")){
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Not Displayed;;;Fail");
				}

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()==0){
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Not Available in DB as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Available in DB;;;Fail");
				}

				//After Cancellation
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
				htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				int count = returnToVendorObjects.tableCancelClaimNumber1.size();
				if(count>2){
					for(int i=2;i<=returnToVendorObjects.tableCancelClaimNumber1.size();i++){
						WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberCancel,i,driver);
						String temp = element.getText();
						if((temp.equals(claimNumber)) && (returnToVendorObjects.cancelledClaimTab.isDisplayed())){
							htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab as Expected;;;Pass");
							waitFor(2);
							prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.tableClaimNumberCancel,i,driver).click();
							break;
						}
					}
				}
				else{
					if((returnToVendorObjects.tableCancelClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.cancelledClaimTab.isDisplayed())){
						htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab as Expected;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab is Not as Expected;;;Fail");
					}
					waitFor(2);
					returnToVendorObjects.tableCancelClaimNumber.click();
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Cancelled")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Cancelled as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Cancelled;;;Fail");
				}

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(14, 22);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Articles Verify After Cancellation
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(2).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Article: "+returnToVendorObjects.articleVerifyFinalTable1.getText()+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Article: "+returnToVendorObjects.articleVerifyFinalTable1.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("12345")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal.getText().equals("2")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal.getText().equals("abcdefg")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal.getText().equals("11aaqq")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal.getText().equals("147258")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("5")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}
			}


		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void validationForDraftToFinaliseAndCancelDangerous(String claimNumber,String vendorNumber,List<String>articleList,List<String>articleNotList,String claimType,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;

			String userId1 = getContext().getStringProperty("username");
			String user1 = testdata.getText("userName");
			user1 = user1.replace("userID", userId1);
			List<String>userName = sql.executeQueryList(getContext(),user1);
			String userIdFinal = userName.get(0);

			waitFor(2);
			String cartonPickupQty = "2";
			returnToVendorObjects.tableClaimNumber.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			returnToVendorObjects.backHeaderButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.advansedSearch.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Displayed after clicking Back Button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Not Displayed after clicking Back Button;;;Pass");
			}

			returnToVendorObjects.advansedSearchBox.clear();
			returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			//			returnToVendorObjects.tableClaimNumber.click();
			//			waitForJSandJQueryToLoad(driver);;
			//			waitFor(2);

			if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Draft as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Draft;;;Fail");
			}

			String claimNum = returnToVendorObjects.claimHeaderClaimNumber.getText();
			String claimNo = claimNum.substring(14, 22);
			if(claimNumber.equals(claimNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String supplierNum = returnToVendorObjects.claimHeaderSupplierNumber.getText();
			String supplierNo = supplierNum.substring(0, 10);
			if(vendorNumber.equals(supplierNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String todaysDate = common.getCurrentDate();
			if(todaysDate.equals(returnToVendorObjects.claimHeaderDate.getText())){
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String sourceName = returnToVendorObjects.claimHeaderSource.getText();
			if(sourceName.equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String createdBy = returnToVendorObjects.claimHeaderCreatedBy.getText();
			if(createdBy.contains(userIdFinal)){
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect;;;Fail");
			}

			//Claim Note Print Page
			returnToVendorObjects.claimHeaderPrintButton.click();
			waitFor(1);
			returnToVendorObjects.claimHeaderClaimNotePrint.click();

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			String winHandleBefore = driver.getWindowHandle();
			for(String winHandle : driver.getWindowHandles()){
				driver.switchTo().window(winHandle);
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);
			htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

			//Edit Page
			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int l = generateRandomNumber(min,max);
			WebElement element6 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,l,driver);
			element6.click();
			waitFor(1);

			//Save Action
			returnToVendorObjects.cancelSaveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(5);
			if(returnToVendorObjects.noPopupSaveClaim.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Claim list is not saved. Do you want to save claims?")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Cancel Button as Expected;;;Pass");
					returnToVendorObjects.noPopupSaveClaim.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Cancel Button;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.claimHeaderEditButton.isEnabled()){
				htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
			}

			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			String articleNumber = articleList.get(1);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.dangerousConformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.dangerousConformationPopup.getText();
				if(conMsg.contains("STOP! Dangerous Goods Declaration on CONSIGNMENT NOTE must be read, understood and fully completed")){
					htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed Dangerous Article is Added from Draft Claim as Expected;;;Pass");
					returnToVendorObjects.dangerousconYesButton.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed and Error Message is Mismatched for Dangerous;;;Fail");
					returnToVendorObjects.dangerousconYesButton.click();
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Dangerous Article PopUp Message is Not Displayed while adding the Article;;;Fail");
			}

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys("5");
			returnToVendorObjects.returnQuantityCheckNextArticle.clear();
			returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys("5");

			//			for(int i=1;i<=2;i++){
			//			WebElement ele = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.articleCheckClaimTable,i,driver);
			//			String artNum = ele.getText();
			//			if(artNum.equals(articleNumber)){
			//				htmlToExtent(cName, mName, extLogger, driver, "Article is Added Successfully for the Same Supplier;;;Pass");
			//				waitFor(1);
			//				WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.deleteArticleButtonClaim,i,driver);
			//				waitFor(2);
			//				element.click();
			//				break;
			//			}
			//			}
			//			waitFor(1);
			//			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
			//				if(returnToVendorObjects.conformationPopup.getText().equals("Article "+articleNumber+" is going to be removed from the list. Is this correct?")){
			//					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Displayed as Expected;;;Pass");
			//					returnToVendorObjects.okButtonPopup.click();
			//					if(returnToVendorObjects.deleteArticleButton1.size()==0){
			//						htmlToExtent(cName, mName, extLogger, driver, "Article is Deleted form the drafted Claim;;;Pass");
			//					}
			//					else{
			//						htmlToExtent(cName, mName, extLogger, driver, "Article is Not Deleted form the drafted Claim;;;Fail");
			//					}
			//				}
			//				else{
			//					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup Message is Incorrect;;;Fail");
			//				}
			//			}
			//			else{
			//				htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Not Displayed;;;Fail");
			//			}


			//Not Applicable Article Validation
			//Article Number
			String articleNumberNot = articleNotList.get(0);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumberNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article Number Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article Number Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article Number Search;;;Fail");
			}

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int k = generateRandomNumber(min,max);
			WebElement element2 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,k,driver);
			element2.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Edit Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update
			returnToVendorObjects.authorasationCodeBoxClaim.clear();
			returnToVendorObjects.authorasationCodeBoxClaim.sendKeys("12345");
			String authCode = returnToVendorObjects.authorasationCodeBoxClaim.getAttribute("value");
			if(authCode.equals("12345")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Edit Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Edit Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update
			waitFor(2);
			returnToVendorObjects.carrierNameBoxClaim.clear();
			returnToVendorObjects.carrierNameBoxClaim.sendKeys("abcdefg");
			String carrierName = returnToVendorObjects.carrierNameBoxClaim.getAttribute("value");
			if(carrierName.equals("abcdefg")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Edit Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Edit Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxClaim.clear();
			returnToVendorObjects.vehicleRegNoBoxClaim.sendKeys("11aaqq");
			String vehRegNum = returnToVendorObjects.vehicleRegNoBoxClaim.getAttribute("value");
			if(vehRegNum.equals("11aaqq")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Carton Quantity Update
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaim.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaim.sendKeys("2");
			String carQty = returnToVendorObjects.cartonPickupQtyBoxClaim.getAttribute("value");
			if(carQty.equals("2")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Authorization Date Update
			waitFor(2);
			returnToVendorObjects.authorisationDateClaim.clear();
			String dateVer = common.getCurrentDate();
			returnToVendorObjects.authorisationDateClaim.sendKeys(dateVer);
			String date = returnToVendorObjects.authorisationDateClaim.getAttribute("value");
			if(date.equals(dateVer)){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Date in Edit Screen and the Authorisation Date has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Date in Edit Screen and the Authorisation Date has not been changed;;;Fail");
			}

			//Consignment Number Update
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaim.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaim.sendKeys("147258");
			String conNum = returnToVendorObjects.consignmentNumberTextBoxClaim.getAttribute("value");
			if(conNum.equals("147258")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Edit Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Edit Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);
			returnToVendorObjects.saveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
					returnToVendorObjects.okButtonPopup.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitFor(2);
			returnToVendorObjects.FinaliseClaimButton.click();

			//Reason Code Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdownFinalise.click();
			int j = generateRandomNumber(min,max);
			WebElement element1 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeFinalise,j,driver);
			element1.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Finalise Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update Finalize Screen
			returnToVendorObjects.authorasationCodeBoxFinalise.clear();
			returnToVendorObjects.authorasationCodeBoxFinalise.sendKeys("789456");
			String authCodeAuth = returnToVendorObjects.authorasationCodeBoxFinalise.getAttribute("value");
			if(authCodeAuth.equals("789456")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Finalise Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Finalise Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.carrierNameBoxFinalise.clear();
			returnToVendorObjects.carrierNameBoxFinalise.sendKeys("ertyu");
			String carrierNameAuth = returnToVendorObjects.carrierNameBoxFinalise.getAttribute("value");
			if(carrierNameAuth.equals("ertyu")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Finalise Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Finalise Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxFinalise.clear();
			returnToVendorObjects.vehicleRegNoBoxFinalise.sendKeys("22gg55");
			String vehRegNumAuth = returnToVendorObjects.vehicleRegNoBoxFinalise.getAttribute("value");
			if(vehRegNumAuth.equals("22gg55")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Consignment Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.sendKeys("753698");
			String conNumAuth = returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.getAttribute("value");
			if(conNumAuth.equals("753698")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Finalise Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Finalise Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);

			//Carton Quantity Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.sendKeys("1");
			String carQtyAuth = returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.getAttribute("value");
			if(carQtyAuth.equals("1")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Conditions
			if(claimType.equals("Finalise")){
				//Finalizing the Claim
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") has been finalised.")){
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed After clicking Ok Confirmation in Popup as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed or Message in Popup is Incorrect After clicking Ok Confirmation in Popup Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conYesButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Are you sure you want to print claim")){
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed After Finalisation Confirmation Popup as Expected;;;Pass");
						returnToVendorObjects.conYesButton.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed or Message in Popup is Incorrect After Finalisation Confirmation Popup;;;Fail");
						returnToVendorObjects.conYesButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Not Displayed After Finalisation Confirmation Popup;;;Fail");
				}
				waitFor(3);

				//Claim Print Page
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				String winHandleBefore1 = driver.getWindowHandle();
				for(String winHandle : driver.getWindowHandles()){
					driver.switchTo().window(winHandle);
				}
				driver.close();
				driver.switchTo().window(winHandleBefore1);
				htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

				waitFor(2);
				if(returnToVendorObjects.conYesButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Do you want to print Claim Label for Cartons?")){
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conYesButton.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed or Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conYesButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Not Displayed;;;Fail");
				}

				waitFor(1);
				returnToVendorObjects.cartonPickupQtyTextBox.sendKeys(cartonPickupQty);
				htmlToExtent(cName, mName, extLogger, driver, "Carton Pickup Quantity is Entered as: "+cartonPickupQty+";;;Pass");
				waitFor(1);
				returnToVendorObjects.cartonPickupQtyOkPopUp.click();
				waitFor(3);

				//Carton Label Print Page
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				String winHandleBefore2 = driver.getWindowHandle();
				for(String winHandle : driver.getWindowHandles()){
					driver.switchTo().window(winHandle);
				}
				driver.close();
				driver.switchTo().window(winHandleBefore2);
				htmlToExtent(cName, mName, extLogger, driver, "Carton Label Print Page Navigated Successfully;;;Pass");
				waitFor(2);

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()!=0){
					String aticleNumberClaim =  finaliseResults.get(0).get(1).toString();
					String storeClaim = finaliseResults.get(0).get(0).toString();
					String created_User =  finaliseResults.get(0).get(3).toString();
					String StoreNum = getContext().getStringProperty("store");
					String userId = getContext().getStringProperty("username");

					String aticleNumberClaim1 =  finaliseResults.get(1).get(1).toString();
					String storeClaim1 = finaliseResults.get(1).get(0).toString();
					String created_User1 =  finaliseResults.get(1).get(3).toString();

					//First Article
					if(aticleNumberClaim.equals(articleList.get(0)) || aticleNumberClaim.equals(articleList.get(1))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					//Second Article
					if(aticleNumberClaim1.equals(articleList.get(0)) || aticleNumberClaim1.equals(articleList.get(1))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
				}

				//After Finalization
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
				htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Finalised")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Finalised as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Finalised;;;Fail");
				}
				//			returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				//			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
				//			htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
				//			returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				//			htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				//			returnToVendorObjects.advGoButon.click();
				//			waitForJSandJQueryToLoad(driver);;
				//			waitFor(2);
				//			if((returnToVendorObjects.tableFinalClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.finalisedClaimTab.isDisplayed())){
				//				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Finalise Tab as Expected;;;Pass");
				//			}
				//			else{
				//				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Finalise Tab is Not as Expected;;;Fail");
				//			}
				//			waitFor(1);
				//			returnToVendorObjects.tableFinalClaimNumber.click();
				//			waitForJSandJQueryToLoad(driver);;
				//			waitFor(2);
				//			
				//			if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Finalised")){
				//				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Finalised as Expected;;;Pass");
				//			}
				//			else{
				//				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Finalised;;;Fail");
				//			}x

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(8, 16);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Articles Verify After Finalization
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if((articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("789456")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal1.getText().equals("1")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal1.getText().equals("ertyu")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal1.getText().equals("22gg55")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal1.getText().equals("753698")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("10")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}


			}
			else if(claimType.equals("Cancel")){
				waitFor(2);
				returnToVendorObjects.cancleButtonInFinalise.click();
				waitFor(1);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conNoButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please confirm to delete Claim Number "+claimNumber+" raised for Supplier")){
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conNoButton.click();
						if(returnToVendorObjects.cancelHeaderButton.isEnabled()){
							htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conNoButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Not Displayed;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.conYesButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") Deleted successfully.")){
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Not Displayed;;;Fail");
				}

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()==0){
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Not Available in DB as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Available in DB;;;Fail");
				}

				//After Cancellation
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
				htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if((returnToVendorObjects.tableCancelClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.cancelledClaimTab.isDisplayed())){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab is Not as Expected;;;Fail");
				}
				waitFor(1);
				returnToVendorObjects.tableCancelClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Cancelled")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Cancelled as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Cancelled;;;Fail");
				}

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(14, 22);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Articles Verify After Cancellation
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if((articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("12345")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal.getText().equals("2")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal.getText().equals("abcdefg")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal.getText().equals("11aaqq")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal.getText().equals("147258")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("10")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}
			}


		}
		catch(Exception e){
			e.printStackTrace();
		}
	}



	public void sohValidationForArticles(List<String>sohListBefore,List<String>sohListAfter,String returnQuantity,List<String>articleList,String claimType,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws AWTException{

		String articleSohBefore1 = sohListBefore.get(0);
		String articleSohBefore2 = sohListBefore.get(1);

		String articleSohAfter1 = sohListAfter.get(0);
		String articleSohAfter2 = sohListAfter.get(1);

		double articleSohBeforeInt1 = Integer.valueOf(articleSohBefore1);
		double articleSohBeforeInt2 = Integer.valueOf(articleSohBefore2);

		double articleSohAfterInt1 = Integer.valueOf(articleSohAfter1);
		double articleSohAfterInt2 = Integer.valueOf(articleSohAfter2);

		double returnQtyint = Integer.valueOf(returnQuantity);

		if(claimType.equals("Finalise")){
			if(articleSohAfterInt1 ==(articleSohBeforeInt1-returnQtyint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the Article Number: "+articleList.get(0)+" is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the Article Number: "+articleList.get(0)+" is Not Matching with DB after Creating Claim;;;Fail");
			}

			if(articleSohAfterInt2 ==(articleSohBeforeInt2-returnQtyint)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the Article Number: "+articleList.get(1)+" is Matching with DB after Creating Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the Article Number: "+articleList.get(1)+" is Not Matching with DB after Creating Claim;;;Fail");
			}
		}

		else if(claimType.equals("Cancel")){
			if(articleSohAfterInt1 ==(articleSohBeforeInt1)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value is Not Updated for the Article Number: "+articleList.get(0)+" is Matching with DB after Deleting Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the Article Number: "+articleList.get(0)+" is Not Matching with DB after Deleting Claim;;;Fail");
			}

			if(articleSohAfterInt2 ==(articleSohBeforeInt2)){
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value is Not Updated for the Article Number: "+articleList.get(1)+" is Matching with DB after Deleting Claim;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the Article Number: "+articleList.get(1)+" is Not Matching with DB after Deleting Claim;;;Fail");
			}
		}

	}

	public void validationForDuplicateFinaliseClaim(List<String>articleDetailHawa,ReturnToVendorObjects returnToVendorObjects,String iteration,String returnQuantity,String vendorNumber,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String calimNumber = "";

			String articleNumber = articleDetailHawa.get(0);
			//		String sohArticle = testdata.getText("soh");
			//		sohArticle = sohArticle.replace("articleNumber", articleNumber);
			//		List<List<Object>>sohResults = sql.executeQuery(getContext(),sohArticle);
			//		removetriplezero(sohResults, 0);
			//		String soh = sohResults.get(0).get(0).toString();

			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			waitFor(1);
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled;;;Pass");
			waitFor(1);
			if(iteration!="5"){
				returnToVendorObjects.finaliseButton.click();
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(3);
			}

			if(iteration.equals("1")){
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(53, 63);
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number: "+calimNumber+" Pop up is Displayed for a Return Quantity: "+returnQuantity+" for an Article;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
			}
			else if(iteration.equals("3")){
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Displayed for Same Article Number with Different Return Quantity: "+returnQuantity+";;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(53, 63);
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
			}
			else if(iteration.equals("4")){
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed as Expected;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Displayed for Same Article Number with Same Return Quantity: "+returnQuantity+" Given by Previous User;;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(53, 63);
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
			}
			else if(iteration.equals("2")){
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again.")){
						htmlToExtent(cName, mName, extLogger, driver, "Warnign Message : "+returnToVendorObjects.conformationPopup.getText()+" for Same Article with Same Quantity is Displayed as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}	
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed;;;Fail");
				}
			}

			if(iteration.equals("2")){
				waitFor(1);
				returnToVendorObjects.saveAsDraftButton.click();
				waitForJSandJQueryToLoad(driver);;
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed while Drafting the Claim as Expected;;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(50, 60);
					htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number: "+calimNumber+" Pop up is Displayed For Same Quantity and Same Vendor;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearchBox.sendKeys(calimNumber);
				returnToVendorObjects.advansedSearch.click();
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				returnToVendorObjects.FinaliseClaimButton.click();
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again.")){
						htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+returnToVendorObjects.conformationPopup.getText()+" Wait 30 Minutes Popup Message for Article with Same Quantity: "+returnQuantity+" is Displayed From Draft to Finalise as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.cancleButtonInFinalise.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message is Displayed and Message in Popup is Incorrect From Draft to Finalise;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}	
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed for Draft to Finalise;;;Fail");
				}

			}

			if(iteration.equals("5")){
				waitFor(1);
				returnToVendorObjects.saveAsDraftButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(50, 60);
					htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number: "+calimNumber+" Pop up is Displayed For Different Quantity: "+returnQuantity+" with Same Article;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearchBox.sendKeys(calimNumber);
				returnToVendorObjects.advansedSearch.click();
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.claimHeaderEditButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				returnToVendorObjects.returnQuantityClaimTextbox.clear();
				returnToVendorObjects.returnQuantityClaimTextbox.sendKeys("3");
				htmlToExtent(cName, mName, extLogger, driver, "the Return Quantity from 2 to 3 has been changed in Draft Claim;;;Pass");

				waitFor(2);
				returnToVendorObjects.saveClaim.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
						//					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.FinaliseClaimButton.click();
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again.")){
						htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+returnToVendorObjects.conformationPopup.getText()+" Wait 30 Minutes Popup Message for Article with Same Quantity: 3 is Displayed From Draft to Finalise which was already Finalised with that Quantity as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.cancleButtonInFinalise.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message is Displayed and Message in Popup is Incorrect From Draft to Finalise;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}	
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed for Draft to Finalise;;;Fail");
				}

			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void validationForDuplicateFinaliseClaimOther(List<String>articleDetailHawa,ReturnToVendorObjects returnToVendorObjects,String iteration,String returnQuantity,String vendorNumber,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String calimNumber = "";

			String articleNumber = articleDetailHawa.get(1);

			driver.navigate().refresh();
			waitFor(2);
			if(iteration.equals("1") || iteration.equals("3")){
				returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
				returnToVendorObjects.searchAddButton.click();
				waitForJSandJQueryToLoad(driver);;
				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
					}
				}
				scrolltoElement(returnToVendorObjects.finaliseButton, driver);
				waitFor(2);
				returnToVendorObjects.reasonCodeDropdown1.click();
				int i = generateRandomNumber(min,max);
				WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
				element.click();
				waitFor(1);
				returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
				returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
				returnToVendorObjects.carrierNameBox.sendKeys("asd");
				returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
				waitFor(1);
				returnToVendorObjects.returnQuantityCheck.clear();
				returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
				waitFor(2);
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled for Another Article: "+articleNumber+";;;Pass");
				waitFor(1);
			}
			else if(iteration.equals("2")){
				for(int i=0;i<=articleDetailHawa.size()-1;i++){
					if(i==0){
						articleNumber = articleDetailHawa.get(i);
						waitFor(1);
						returnToVendorObjects.articleTextBox.clear();
						returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
						returnToVendorObjects.searchAddButton.click();
						waitForJSandJQueryToLoad(driver);;
						if(returnToVendorObjects.conformationPopup.isDisplayed()){
							String conMsg= returnToVendorObjects.conformationPopup.getText();
							if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
								returnToVendorObjects.conYesButton.click();
							}
						}
						waitFor(3);
						returnToVendorObjects.reasonCodeDropdown1.click();
						int j = generateRandomNumber(min,max);
						WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,j,driver);
						element.click();
						waitFor(1);
					}
					if(i==1){
						articleNumber = articleDetailHawa.get(i);
						waitFor(3);
						returnToVendorObjects.articleTextBox.clear();
						returnToVendorObjects.articleTextBox.sendKeys(articleNumber);
						returnToVendorObjects.searchAddButton.click();
						waitForJSandJQueryToLoad(driver);;
						if(returnToVendorObjects.conformationPopup.isDisplayed()){
							String conMsg= returnToVendorObjects.conformationPopup.getText();
							if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
								returnToVendorObjects.conYesButton.click();
							}
						}
						waitFor(3);
						returnToVendorObjects.returnQuantityCheck.clear();
						returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
						returnToVendorObjects.returnQuantityCheckNextArticle.clear();
						returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
					}
				}
				waitFor(1);
				returnToVendorObjects.finaliseButton.click();
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(3);
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(53, 63);
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number: "+calimNumber+" Pop up is Displayed for a Return Quantity: "+returnQuantity+" for an Articles: "+articleDetailHawa.get(0)+" and "+articleDetailHawa+";;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
			}

			if(iteration.equals("1")){
				waitFor(1);
				returnToVendorObjects.saveAsDraftButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(50, 60);
					htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number: "+calimNumber+" Pop up is Displayed For Different Quantity: "+returnQuantity+" with Different Article;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearchBox.sendKeys(calimNumber);
				returnToVendorObjects.advansedSearch.click();
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.claimHeaderEditButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				returnToVendorObjects.articleTextBox1.clear();
				returnToVendorObjects.articleTextBox1.sendKeys(articleDetailHawa.get(0));
				waitFor(1);
				returnToVendorObjects.searchAddButtonClaim.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(3);

				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleDetailHawa.get(0)+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
					}
				}

				for(int ii=1;ii<=2;ii++){
					WebElement ele = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.articleCheckClaimTable,ii,driver);
					String artNum = ele.getText();
					if(artNum.equals(articleNumber)){
						htmlToExtent(cName, mName, extLogger, driver, "Article Added before is Added Successfully for the Same Supplier;;;Pass");
						waitFor(1);
						WebElement element1 = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.deleteArticleButtonClaim,ii,driver);
						waitFor(4);
						element1.click();
					}
				}
				waitFor(1);
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Please confirm to remove item?")){
						htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Displayed as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						if(returnToVendorObjects.deleteArticleButton1.size()==0){
							htmlToExtent(cName, mName, extLogger, driver, "Article is Deleted form the drafted Claim;;;Pass");
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Article is Not Deleted form the drafted Claim;;;Fail");
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup Message is Incorrect;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Not Displayed;;;Fail");
				}
				returnToVendorObjects.returnQuantityClaimTextbox.clear();
				returnToVendorObjects.returnQuantityClaimTextbox.sendKeys("3");
				htmlToExtent(cName, mName, extLogger, driver, "the Return Quantity from 2 to 3 has been changed in Draft Claim;;;Pass");

				waitFor(2);
				returnToVendorObjects.saveClaim.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
						//					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.FinaliseClaimButton.click();
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again.")){
						htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+returnToVendorObjects.conformationPopup.getText()+" Wait 30 Minutes Popup Message for Article with Same Quantity is Displayed From Draft to Finalise which was already Finalised with that Quantity as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.cancleButtonInFinalise.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message is Displayed and Message in Popup is Incorrect From Draft to Finalise;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}	
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed for Draft to Finalise;;;Fail");
				}

			}

			else if(iteration.equals("3")){
				waitFor(1);
				returnToVendorObjects.saveAsDraftButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Drafting Claim as Expected;;;Pass");
					String calimNum = returnToVendorObjects.finaliseNumberPopUp.getText();
					calimNumber = calimNum.substring(50, 60);
					htmlToExtent(cName,mName,extLogger,driver, "Draft Claim Number: "+calimNumber+" Pop up is Displayed For Different Quantity: "+returnQuantity+" with First Article;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearchBox.sendKeys(calimNumber);
				returnToVendorObjects.advansedSearch.click();
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.claimHeaderEditButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				returnToVendorObjects.articleTextBox1.clear();
				returnToVendorObjects.articleTextBox1.sendKeys(articleDetailHawa.get(0));
				waitFor(1);
				returnToVendorObjects.searchAddButtonClaim.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(3);

				if(returnToVendorObjects.conformationPopup.isDisplayed()){
					String conMsg= returnToVendorObjects.conformationPopup.getText();
					if(conMsg.equals(""+articleDetailHawa.get(0)+" set as NON-RETURNABLE, Do you still want to Continue ?")){
						returnToVendorObjects.conYesButton.click();
					}
				}

				waitFor(2);
				returnToVendorObjects.returnQuantityClaimTextbox.clear();
				returnToVendorObjects.returnQuantityClaimTextbox.sendKeys(returnQuantity);
				waitFor(1);
				returnToVendorObjects.returnQuantityClaimTextbox1.clear();
				returnToVendorObjects.returnQuantityClaimTextbox1.sendKeys(returnQuantity);
				returnToVendorObjects.saveClaim.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
						//					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.FinaliseClaimButton.click();
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again.")){
						htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+returnToVendorObjects.conformationPopup.getText()+" Wait 30 Minutes Popup Message for Article with Same Quantity is Displayed From Draft to Finalise which was already Finalised for both the Articles with that Quantity as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.cancleButtonInFinalise.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message is Displayed and Message in Popup is Incorrect From Draft to Finalise;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}	
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Wait 30 Minutes Popup Message for Article with Same Quantity is Not Displayed for Draft to Finalise;;;Fail");
				}
			}


			/*String claimArticle = testdata.getText("claim");
		claimArticle = claimArticle.replace("claimNumber", calimNumber);
		List<String>finaliseResults = sql.executeQueryList(getContext(),claimArticle);

		if(finaliseResults.size()!=0){
		String aticleNumberClaim =  finaliseResults.get(1);
		String storeClaim = finaliseResults.get(0);
		String created_User =  finaliseResults.get(3);

		String StoreNum = getContext().getStringProperty("store");
		String userId = getContext().getStringProperty("username");

		if(aticleNumberClaim.equals(articleNumber)){
			htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB;;;Fail");
		}

		if(storeClaim.equals(StoreNum)){
			htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB;;;Fail");
		}

		if(created_User.equals(userId)){
			htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB;;;Fail");
		}
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
		}

		String sohArticleFinal = testdata.getText("soh");
		sohArticleFinal = sohArticleFinal.replace("articleNumber", articleNumber);
		List<List<Object>>sohResultsFinal = sql.executeQuery(getContext(),sohArticleFinal);
		removetriplezero(sohResultsFinal, 0);
		String sohFinal = sohResultsFinal.get(0).get(0).toString();

		double sohint = Integer.valueOf(soh);
		double sohintFinal = Integer.valueOf(sohFinal);
		double returnQtyint = Integer.valueOf(returnQuantity);

		if(sohintFinal ==(sohint-returnQtyint)){
			htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article is Matching with DB after Creating Claim;;;Pass");
		}
		else{
			htmlToExtent(cName,mName,extLogger,driver, "The SOH value for the article is Not Matching with DB after Creating Claim;;;Fail");
		}*/
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void validationForDuplicateMessageFinaliseClaimConsignmentArticle(List<String>articleList,ReturnToVendorObjects returnToVendorObjects,String iteration,String vendorNumber,String artType,String returnQuantity,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;
			String claimNumber1 = "";
			String claimNumber2 = "";

			String articleNumber1 = articleList.get(0);
			String articleNumber2 = articleList.get(1);

			driver.navigate().refresh();
			waitFor(2);
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber1);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber1+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);

			returnToVendorObjects.articleTextBox.clear();
			returnToVendorObjects.articleTextBox.sendKeys(articleNumber2);
			returnToVendorObjects.searchAddButton.click();
			waitForJSandJQueryToLoad(driver);;
			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber2+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			scrolltoElement(returnToVendorObjects.finaliseButton, driver);
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdown1.click();
			int i = generateRandomNumber(min,max);
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCode,i,driver);
			element.click();
			waitFor(1);
			returnToVendorObjects.authorasationCodeBox.sendKeys("aabb");
			returnToVendorObjects.cartonPickupQtyBox.sendKeys("1");
			returnToVendorObjects.carrierNameBox.sendKeys("asd");
			returnToVendorObjects.vehicleRegNoBox.sendKeys("TN");
			/*String date= common.getCurrentDate();
		returnToVendorObjects.authorisationDate.sendKeys(date);*/
			waitFor(1);

			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys(returnQuantity);
			waitFor(1);
			returnToVendorObjects.returnQuantityCheckNextArticle.clear();
			returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys(returnQuantity);
			htmlToExtent(cName,mName,extLogger,driver, "The Return Quantity for Both the Articles are given as "+returnQuantity+";;;Pass");
			waitFor(2);
			htmlToExtent(cName,mName,extLogger,driver, "The Claim Form is Filled For "+artType+";;;Pass");
			waitFor(1);
			returnToVendorObjects.finaliseButton.click();
			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				//			htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
				returnToVendorObjects.okButtonPopup.click();
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(4);
			if(iteration.equals("1")){
				if(returnToVendorObjects.finaliseNumberPopUp.isDisplayed()){
					//			htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Displayed;;;Pass");
					String calimNum1 = returnToVendorObjects.finaliseNumberPopUp.getText();
					String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticle.getText();
					claimNumber1 = calimNum1.substring(53, 63);
					claimNumber2 = calimNum2.substring(53, 63);
					returnToVendorObjects.okButtonPopup.click();
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number are: "+claimNumber1+" and "+claimNumber2+" in Pop up is Displayed;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number Pop up is Not Displayed;;;Fail");
				}
			}
			else if(iteration.equals("2")){
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					String calimNum1 = returnToVendorObjects.finaliseNumberPopUpError.getText();
					String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticleError.getText();
					if((calimNum1.equals("Finalise order creation failed :Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again.")) && (calimNum2.equals("Finalise order creation failed :Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again."))){
						htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+calimNum1+" message is displayed for Both the Articles;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.claimErrorClose2.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "30 Minutes Popup Message is Displayed or Message in Popup is Incorrect After clicking Finalise Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.claimErrorClose2.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "30 Minutes Popup Message is Not Displayed clicking Finalise Button;;;Fail");
				}

				returnToVendorObjects.returnQuantityCheck.clear();
				returnToVendorObjects.returnQuantityCheck.sendKeys("4");
				htmlToExtent(cName, mName, extLogger, driver, "Return Qunatity has been Chnaged for One Article and Return Quantity is 4;;;Pass");
				waitFor(1);
				returnToVendorObjects.finaliseButton.click();
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					//				htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Displayed While Finalising Claim as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Confirmation PopUp Message is Not Displayed While Finalising Claim;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					String calimNum1 = returnToVendorObjects.finaliseNumberPopUpError.getText();
					String calimNum2 = returnToVendorObjects.finaliseNumberPopUpNextArticleError.getText();
					if(calimNum1.contains("Finalise order creation success")){
						claimNumber1 = calimNum1.substring(53, 63);
						htmlToExtent(cName, mName, extLogger, driver, "The Other Article is Finalised Successfully and the Claim Number is "+claimNumber1+";;;Pass");
					}
					if((calimNum2.equals("Finalise order creation failed :Claim for Supplier "+vendorNumber+" is still in progress. Wait 30 minute(s) then check if successful, else try again."))){
						htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+calimNum2+" message is displayed for One Articles;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.claimErrorClose2.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "30 Minutes Popup Message is Displayed or Message in Popup is Incorrect After clicking Finalise Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
						waitFor(1);
						returnToVendorObjects.claimErrorClose2.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "30 Minutes Popup Message is Not Displayed clicking Finalise Button;;;Fail");
				}
			}

		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void validationsForVerifyEnquiryPage(ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			ArrayList<Integer>articleTemp= new ArrayList<Integer>();
			waitFor(2);
			if(returnToVendorObjects.errorCloseClaimEnquiry.isDisplayed()){
				String temp = returnToVendorObjects.errorCloseClaimEnquiryMessage.getText();
				if(temp.equals("Results only contain claims within the last 2 weeks. Please use advanced search for Older Claims")){
					htmlToExtent(cName, mName, extLogger, driver, "Warning Message: "+temp+" message is displayed Claim Enquiry Page;;;Pass");
					returnToVendorObjects.errorCloseClaimEnquiry.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Warning Message message is Displayed and Message is Incorrect in Claim Enquiry Page;;;Fail");
					returnToVendorObjects.errorCloseClaimEnquiry.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Warning Message message is Not Displayed Claim Enquiry Page;;;Fail");
			}

			//Draft Page Validations
			htmlToExtent(cName,mName,extLogger,driver, "For Draft Tab;;;Pass");
			if(returnToVendorObjects.tableClaimStatus.getText().equals("Draft")){
				htmlToExtent(cName, mName, extLogger, driver, "The Status of the Claim is as Draft as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "The Status of the Claim is Not as Draft;;;Fail");
			}

			returnToVendorObjects.returnOrderHeaderDraft.click();
			waitFor(1);
			int count = returnToVendorObjects.DraftrecordSize.size();
			//Sorting Claim Number
			sortNumberListAscending(count,"Return Order Column",returnToVendorObjects.draftTableReturnOrder,driver);
			waitFor(1);
			returnToVendorObjects.returnOrderHeaderDraft.click();
			waitFor(1);
			sortNumberListDescending("Return Order Column",returnToVendorObjects.draftTableReturnOrder ,driver);
			
			//Sorting Supplier Name
			returnToVendorObjects.supplierHeaderDraft.click();
			sortStringListAscendingSupplier("Supplier",returnToVendorObjects.draftTableReturnOrder,driver);
			returnToVendorObjects.supplierHeaderDraft.click();
			sortStringListDescendingSupplier("Supplier",returnToVendorObjects.draftTableReturnOrder,driver);
			
			//Sorting Source
			returnToVendorObjects.sourceHeaderDraft.click();
			sortStringListAscendingSupplier("Source",returnToVendorObjects.draftTableReturnOrder,driver);
			returnToVendorObjects.sourceHeaderDraft.click();
			sortStringListDescendingSupplier("Source",returnToVendorObjects.draftTableReturnOrder,driver);
			
			//Reason
			returnToVendorObjects.reasonHeaderDraft.click();
			sortStringListAscendingReason("Reason",returnToVendorObjects.draftTableReturnOrder,driver);
			returnToVendorObjects.reasonHeaderDraft.click();
			sortStringListDescendingReason("Reason",returnToVendorObjects.draftTableReturnOrder,driver);
			
			//Created Date
			returnToVendorObjects.createdDateHeaderDraft.click();
			sortStringListAscendingCreatedDate("Created Date",returnToVendorObjects.draftTableReturnOrder,driver);
			returnToVendorObjects.createdDateHeaderDraft.click();
			sortStringListDescendingCreatedDate("Created Date",returnToVendorObjects.draftTableReturnOrder,driver);
			
			//Status
			returnToVendorObjects.statusDateHeaderDraft.click();
			sortStringListAscendingStatus("Created Date",returnToVendorObjects.draftTableReturnOrder,driver);
			returnToVendorObjects.statusDateHeaderDraft.click();
			sortStringListDescendingStatus("Created Date",returnToVendorObjects.draftTableReturnOrder,driver);
			
			String draftHeaderpageCount = returnToVendorObjects.draftClaimCount.getText().replace("(", "").replace(")", "");
			int draftPageCount = returnToVendorObjects.draftPageSize.size()+2;
			
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.draftPageSizeCount,draftPageCount,driver);
			String draftLastPage = element.getText();
			int draftLastPageInt = Integer.valueOf(draftLastPage);
			
			int claimCalculation = (draftLastPageInt-1)*10;
			element.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			
			int draftClaimCountScreen = returnToVendorObjects.draftClaimCountScreen.size()+claimCalculation;
			String draftClaimCountScreenString = String.valueOf(draftClaimCountScreen);
			
			if(draftHeaderpageCount.equals(draftClaimCountScreenString)){
				htmlToExtent(cName, mName, extLogger, driver, "The Claim Count in the Header is Equal to Total Number of Claim in the table as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "The Claim Count: "+draftHeaderpageCount+" in the Header is Not Equal to Total Number of Claim in the table;;;Fail");
			}
			
			
			
			
			
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void validationsForAdvanceSearch(ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			//Wrong Claim Search
			waitFor(2);
			returnToVendorObjects.advansedSearchBox.sendKeys("123456");
			returnToVendorObjects.advansedSearch.click();
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			
			if(returnToVendorObjects.claimErrorClose.isDisplayed()){
				String temp = returnToVendorObjects.claimErrorMessage.getText();
				if(temp.equals("Claim number not found, please enter valid Claim number")){
					htmlToExtent(cName, mName, extLogger, driver, "(Warning Message: "+temp+") message for Wrong Claim Number Search;;;Pass");
					returnToVendorObjects.claimErrorClose.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "(Warning Message: "+temp+") message is Displayed and Message is Incorrect for Wrong Claim Number Search;;;Fail");
					returnToVendorObjects.claimErrorClose.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Warning Message message is Not Displayed for Wrong Claim Number Search;;;Fail");
			}
			
			//Wrong From Date
			returnToVendorObjects.advansedSearchBox.clear();
			returnToVendorObjects.advansedSearch.click();
			String date = common.ConvertdateFormatRTV(-60);
			returnToVendorObjects.advFromDateTextBox.clear();
			returnToVendorObjects.advFromDateTextBox.sendKeys(date);
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			
			if(returnToVendorObjects.errorClose1.isDisplayed()){
				String temp = returnToVendorObjects.dateErrorMessage.getText();
				if(temp.equals("Please select a date range within 4 weeks.")){
					htmlToExtent(cName, mName, extLogger, driver, "(Warning Message: "+temp+") message for out of 4 weeks Date Search;;;Pass");
					returnToVendorObjects.errorClose1.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "(Warning Message: "+temp+") message is Displayed and Message is Incorrect for out of 4 weeks Date Search;;;Fail");
					returnToVendorObjects.errorClose1.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Warning Message message is Not Displayed for out of 4 weeks Date Search;;;Fail");
			}
			
			driver.navigate().refresh();
			waitFor(3);
			returnToVendorObjects.errorCloseClaimEnquiry.click();
			
			//Wrong Supplier Number
			returnToVendorObjects.advansedSearch.click();
			returnToVendorObjects.advsupplierTextBox.sendKeys("123456789");
			returnToVendorObjects.advSearchSymbol.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			
			if(returnToVendorObjects.invalidSupplierPopupOk.isDisplayed()){
				String temp = returnToVendorObjects.invalidSupplierPopupText.getText();
				if(temp.equals("Invalid Supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "(Warning Message: "+temp+") message for Wrong Vendor Search;;;Pass");
					returnToVendorObjects.invalidSupplierPopupOk.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "(Warning Message: "+temp+") message is Displayed and Message is Incorrect for Wrong Vendor Search;;;Fail");
					returnToVendorObjects.invalidSupplierPopupOk.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Warning Message message is Not Displayed for Wrong Vendor Search;;;Fail");
			}
			
			
			
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	public void sortNumberListAscending(int count,String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<Integer> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[1]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(Integer.parseInt(claimNameString));
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}

		
//		for(int s=1;s<=count;s++)
//		{
//			WebElement element =  prepareWebElementWithDynamicXpathWithInt(genericColumnXpath, s,driver);
//			String coulumnValue = element.getText();
//			originalListInteger.add(Integer.parseInt(coulumnValue));
//		}

		List<Integer> copyList = new ArrayList<Integer>(originalListInteger);
		Collections.sort(copyList); 
		if(copyList.equals(originalListInteger))
			htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in ascending order successfully;;;Pass");
		else
			htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted properly, Please check;;;Fail");

	}
	
	public ArrayList<Integer> sortNumberListDescending(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<Integer> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();

		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[1]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(Integer.parseInt(claimNameString));
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<Integer> copyList = new ArrayList<Integer>(originalListInteger);
		Collections.sort(copyList, Collections.reverseOrder()); 
		if(copyList.equals(originalListInteger))
			htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in descending order successfully;;;Pass");
		else
			htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted descending, Please check;;;Fail");
		
		return originalListInteger;
	}
	
	public void sortStringListAscendingSupplier(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[2]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,String.CASE_INSENSITIVE_ORDER);
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in ascending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in ascending order successfully;;;Fail");

	}
	
	public void sortStringListDescendingSupplier(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[2]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,Collections.reverseOrder());
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in descending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in descending order successfully;;;Fail");
	}
	
	public void sortStringListAscendingSource(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[3]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,String.CASE_INSENSITIVE_ORDER);
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in ascending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in ascending order successfully;;;Fail");

	}
	
	public void sortStringListDescendingSource(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[3]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,Collections.reverseOrder());
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in descending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in descending order successfully;;;Fail");
	}
	
	public void sortStringListAscendingReason(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[4]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,String.CASE_INSENSITIVE_ORDER);
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in ascending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in ascending order successfully;;;Fail");

	}
	
	public void sortStringListDescendingReason(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[4]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,Collections.reverseOrder());
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in descending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in descending order successfully;;;Fail");
	}
	
	public void sortStringListAscendingCreatedDate(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[5]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,String.CASE_INSENSITIVE_ORDER);
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in ascending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in ascending order successfully;;;Fail");

	}
	
	public void sortStringListDescendingCreatedDate(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[5]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,Collections.reverseOrder());
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in descending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in descending order successfully;;;Fail");
	}
	
	public void sortStringListAscendingStatus(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[6]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,String.CASE_INSENSITIVE_ORDER);
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in ascending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in ascending order successfully;;;Fail");

	}
	
	public void sortStringListDescendingStatus(String columnName, String genericColumnXpath,WebDriver driver) throws IOException
	{
		ArrayList<String> originalListInteger = new ArrayList<>();
		List<WebElement> groupVendor = driver.findElements(By.xpath("//td[@id[contains(.,groupTitle)]]"));

		int noOfVendorsInPage = groupVendor.size();
		
		for(int i=1; i<noOfVendorsInPage;i++){
			WebElement venName = driver.findElement(By.xpath(("(//td[@id[contains(.,groupTitle)]])["+i+"]")));
			String vendorNameInScreen = venName.getText().substring(13,23);
			List<WebElement> subClaims = driver.findElements(By.xpath("//tr[@id[contains(.,"+vendorNameInScreen+")]]"));
			int noOfClaims = subClaims.size();
			
			if(noOfClaims>1){

				for(int j=1;j<noOfClaims;j++){
					WebElement claimName = driver.findElement(By.xpath(("(//tr[@id[contains(.,"+vendorNameInScreen+")]])["+j+"]/td[6]")));
					String claimNameString = claimName.getText();
					originalListInteger.add(claimNameString);
				}
			}	
			if(originalListInteger.size()>1){
				break;
			}

		}
		
		List<String> copyList = new ArrayList<String>(originalListInteger);
	    Collections.sort(copyList,Collections.reverseOrder());
	     if(copyList.equals(originalListInteger))
	      htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is sorted in descending order successfully;;;Pass");
	     else
	       htmlToExtent(cName,mName,extLogger,driver, ""+columnName+" is not sorted in descending order successfully;;;Fail");
	}


	//srivinith

	public List<List<Object>> removetriplezero(List<List<Object>> one,
			int position) throws IOException {

		for (Iterator<List<Object>> it = one.iterator(); it.hasNext();) {
			List<Object> elem = it.next();
			for (int i = 0; i < elem.size(); i++) {
				if (i == position) {
					String s1 = elem.get(i).toString().replaceAll(".000", "");
					elem.set(i, s1);
				}
			}
		}
		return one;
	}

	public List<List<Object>> removedoublezero(List<List<Object>> one,
			int position) throws IOException {

		for (Iterator<List<Object>> it = one.iterator(); it.hasNext();) {
			List<Object> elem = it.next();
			for (int i = 0; i < elem.size(); i++) {
				if (i == position) {
					String s1 = elem.get(i).toString().replaceAll(".00", "");
					elem.set(i, s1);
				}
			}
		}
		return one;
	}

	public List<List<Object>> removeconvertion(List<List<Object>> one,int position) throws IOException {

		for (Iterator<List<Object>> it = one.iterator(); it.hasNext();) {
			List<Object> elem = it.next();
			for (int i = 0; i < elem.size(); i++) {
				if (i == position) {

					String s2 = elem.get(i).toString();
					float s3 = Float.valueOf(s2);
					int y=Math.round(s3);
					String s1 = String.valueOf(y);
					elem.set(i, s1);
				}
			}
		}
		return one;
	}

	public List<List<Object>> removeKGfromList(List<List<Object>> one,int position) throws IOException {

		for (Iterator<List<Object>> it = one.iterator(); it.hasNext();) {
			List<Object> elem = it.next();
			for (int i = 0; i < elem.size(); i++) {
				if (i == position) {
					String s2 = elem.get(i).toString();
					String[] s3 = s2.split(" ");
					String s4 = s3[0];
					//					String s1 = elem.get(i).toString().replace(" KG","");
					//s1 = elem.get(i).toString().replace(" EA", " ");
					elem.set(i, s4);
				}
			}
		}
		return one;
	}

	public void printPage(RoutineObjects objRoutineObjects,WebDriver driver) {
		try{
			//gsrobject.printButton.click();

			String winHandleBefore = driver.getWindowHandle();
			// Perform the click operation that opens new window
			waitFor(2);
			objRoutineObjects.printButton.click();
			waitFor(2);

			for(String winHandle : driver.getWindowHandles()){
				driver.switchTo().window(winHandle);
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);
			htmlToExtent(cName, mName, extLogger, driver, "Print Page Navigated Successfully;;;Pass");
		}
		catch(Exception e){
			e.printStackTrace();
		}

	}

	public List<List<Object>> removesinglezero(List<List<Object>> one,
			int position) throws IOException {

		for (Iterator<List<Object>> it = one.iterator(); it.hasNext();) {
			List<Object> elem = it.next();
			for (int i = 0; i < elem.size(); i++) {
				if (i == position) {
					String s1 = elem.get(i).toString().replaceAll(".0", "");
					elem.set(i, s1);
				}
			}
		}
		return one;
	}

	public void printPageWeekly(RoutineObjects objRoutineObjects,WebDriver driver) {
		try{
			//gsrobject.printButton.click();

			String winHandleBefore = driver.getWindowHandle();
			// Perform the click operation that opens new window
			waitFor(2);
			objRoutineObjects.printButtonWeekly.click();
			waitFor(2);

			for(String winHandle : driver.getWindowHandles()){
				driver.switchTo().window(winHandle);
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);
			htmlToExtent(cName, mName, extLogger, driver, "Print Page Navigated Successfully;;;Pass");
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}	

	public List<String> PartialDepartment(RoutineObjects objRoutineObjects,WebDriver driver) throws IOException
	{
		List<String> selectedDept = new ArrayList<String>();
		//Calculate size of dept drop down
		int max = objRoutineObjects.innerDD.size();
		int min = 2;

		List<Integer> randomNumbers = new ArrayList<Integer>();
		objRoutineObjects.dropdownselect.click();

		if (isSelected(objRoutineObjects.alldept))

		{
			click(objRoutineObjects.alldept);
			//			click(objRoutineObjects.alldept);
			waitForJSandJQueryToLoad(driver);;
		}

		else//## check if required
		{
			click(objRoutineObjects.alldept);
			waitForJSandJQueryToLoad(driver);;

			click(objRoutineObjects.alldept);
			waitForJSandJQueryToLoad(driver);;
		}

		randomNumbers = generateMultiplRandomNumber(min, max, 3);

		for(int i=0;i<3;i++)
		{
			WebElement element =  prepareWebElementWithDynamicXpathWithInt(objRoutineObjects.partialdeptselectiondynamic,randomNumbers.get(i),driver);
			String dptName = element.getText().trim();

			Coordinates coordinate = ((Locatable)element).getCoordinates(); 
			coordinate.onPage(); 
			coordinate.inViewPort();

			WebElement deptCheckbox =  prepareWebElementWithDynamicXpathWithInt(objRoutineObjects.partialcheckboxselectiondynamic,randomNumbers.get(i),driver);
			click(deptCheckbox);

			//Report_AddStep("testcase","The department Selected is : "+dptName,"" ,"" , "Pass");
			selectedDept.add(dptName);
		}
		objRoutineObjects.Done.click();
		objRoutineObjects.GenerateReport.click();
		htmlToExtent(cName,mName,extLogger,driver, "The department Selected is : "+selectedDept+";;;Pass");
		return selectedDept;
	}	
	
	public void validationForDraftToFinaliseMaxArticles(String claimNumber,String vendorNumber,List<String>articleList,List<String>articleNotList,ReturnToVendorObjects returnToVendorObjects,WebDriver driver) throws ParseException, AWTException, SQLException, IOException{
		try{
			int max = 10;
			int min = 2;

			/*String userId1 = getContext().getStringProperty("username");
			String user1 = testdata.getText("userName");
			user1 = user1.replace("userID", userId1);
			List<String>userName = sql.executeQueryList(getContext(),user1);
			String userIdFinal = userName.get(0);*/

			/*waitFor(2);
			String cartonPickupQty = "2";
			returnToVendorObjects.tableClaimNumber.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			returnToVendorObjects.backHeaderButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.advansedSearch.isDisplayed()){
				htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Displayed after clicking Back Button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Claim Enquity Page is Not Displayed after clicking Back Button;;;Pass");
			}*/
			
			waitFor(3);
			returnToVendorObjects.errorCloseClaimEnquiry.click();
			waitFor(2);
			returnToVendorObjects.advansedSearchBox.clear();
			returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
			returnToVendorObjects.advansedSearch.click();
			waitFor(1);
			returnToVendorObjects.advGoButon.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Draft")){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Draft as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Draft;;;Fail");
			}

			String claimNum = returnToVendorObjects.claimHeaderClaimNumber.getText();
			String claimNo = claimNum.substring(14, 22);
			if(claimNumber.equals(claimNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String supplierNum = returnToVendorObjects.claimHeaderSupplierNumber.getText();
			String supplierNo = supplierNum.substring(0, 10);
			if(vendorNumber.equals(supplierNo)){
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String todaysDate = common.getCurrentDate();
			if(todaysDate.equals(returnToVendorObjects.claimHeaderDate.getText())){
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String sourceName = returnToVendorObjects.claimHeaderSource.getText();
			if(sourceName.equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect;;;Fail");
			}

			String createdBy = returnToVendorObjects.claimHeaderCreatedBy.getText();
			/*if(createdBy.contains(userIdFinal)){
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect;;;Fail");
			}*/

			//Claim Note Print Page
			returnToVendorObjects.claimHeaderPrintButton.click();
			waitFor(1);
			returnToVendorObjects.claimHeaderClaimNotePrint.click();

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			String winHandleBefore = driver.getWindowHandle();
			for(String winHandle : driver.getWindowHandles()){
				driver.switchTo().window(winHandle);
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);
			htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

			//Edit Page
			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);
			
			if(returnToVendorObjects.articleTextBox1.isDisplayed()){
				htmlToExtent(cName, mName, extLogger, driver, "Page is Displayed when Edit Button is Clicked;;;Pass");
			}else{
				htmlToExtent(cName, mName, extLogger, driver, "Page is Not Displayed when Edit Button is Clicked;;;Fail");
			}

		/*	//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int l = generateRandomNumber(min,max);
			WebElement element6 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,l,driver);
			element6.click();
			waitFor(1);

			//Save Action
			returnToVendorObjects.cancelSaveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(5);
			if(returnToVendorObjects.noPopupSaveClaim.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Claim list is not saved. Do you want to save claims?")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Cancel Button as Expected;;;Pass");
					returnToVendorObjects.noPopupSaveClaim.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Cancel Button;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.claimHeaderEditButton.isEnabled()){
				htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
			}

			returnToVendorObjects.claimHeaderEditButton.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			String articleNumber = articleList.get(1);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumber);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.dangerousConformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.dangerousConformationPopup.getText();
				if(conMsg.contains("STOP! Dangerous Goods Declaration on CONSIGNMENT NOTE must be read, understood and fully completed")){
					htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed Dangerous Article is Added from Draft Claim as Expected;;;Pass");
					returnToVendorObjects.dangerousconYesButton.click();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Warning : "+conMsg+" PopUp Message is Displayed and Error Message is Mismatched for Dangerous;;;Fail");
					returnToVendorObjects.dangerousconYesButton.click();
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "Dangerous Article PopUp Message is Not Displayed while adding the Article;;;Fail");
			}

			if(returnToVendorObjects.conformationPopup.isDisplayed()){
				String conMsg= returnToVendorObjects.conformationPopup.getText();
				if(conMsg.equals(""+articleNumber+" set as NON-RETURNABLE, Do you still want to Continue ?")){
					returnToVendorObjects.conYesButton.click();
				}
			}
			returnToVendorObjects.returnQuantityCheck.clear();
			returnToVendorObjects.returnQuantityCheck.sendKeys("5");
			returnToVendorObjects.returnQuantityCheckNextArticle.clear();
			returnToVendorObjects.returnQuantityCheckNextArticle.sendKeys("5");

			//			for(int i=1;i<=2;i++){
			//			WebElement ele = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.articleCheckClaimTable,i,driver);
			//			String artNum = ele.getText();
			//			if(artNum.equals(articleNumber)){
			//				htmlToExtent(cName, mName, extLogger, driver, "Article is Added Successfully for the Same Supplier;;;Pass");
			//				waitFor(1);
			//				WebElement element = prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.deleteArticleButtonClaim,i,driver);
			//				waitFor(2);
			//				element.click();
			//				break;
			//			}
			//			}
			//			waitFor(1);
			//			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
			//				if(returnToVendorObjects.conformationPopup.getText().equals("Article "+articleNumber+" is going to be removed from the list. Is this correct?")){
			//					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Displayed as Expected;;;Pass");
			//					returnToVendorObjects.okButtonPopup.click();
			//					if(returnToVendorObjects.deleteArticleButton1.size()==0){
			//						htmlToExtent(cName, mName, extLogger, driver, "Article is Deleted form the drafted Claim;;;Pass");
			//					}
			//					else{
			//						htmlToExtent(cName, mName, extLogger, driver, "Article is Not Deleted form the drafted Claim;;;Fail");
			//					}
			//				}
			//				else{
			//					htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup Message is Incorrect;;;Fail");
			//				}
			//			}
			//			else{
			//				htmlToExtent(cName, mName, extLogger, driver, "Article Deletion Popup is Not Displayed;;;Fail");
			//			}


			//Not Applicable Article Validation
			//Article Number
			String articleNumberNot = articleNotList.get(0);
			returnToVendorObjects.articleTextBox1.clear();
			returnToVendorObjects.articleTextBox1.sendKeys(articleNumberNot);
			waitFor(1);
			returnToVendorObjects.searchAddButtonClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(2);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Article does not belong to this supplier.")){
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Displayed for Article Number Search as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Correct for Article Number Search;;;Fail");
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Article does not belong to this Supplier Popup Message is Not Displayed for Article Number Search;;;Fail");
			}

			//Reason Code Update
			returnToVendorObjects.reasonCodeDropdownClaim1.click();
			int k = generateRandomNumber(min,max);
			WebElement element2 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeClaim,k,driver);
			element2.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Edit Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update
			returnToVendorObjects.authorasationCodeBoxClaim.clear();
			returnToVendorObjects.authorasationCodeBoxClaim.sendKeys("12345");
			String authCode = returnToVendorObjects.authorasationCodeBoxClaim.getAttribute("value");
			if(authCode.equals("12345")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Edit Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Edit Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update
			waitFor(2);
			returnToVendorObjects.carrierNameBoxClaim.clear();
			returnToVendorObjects.carrierNameBoxClaim.sendKeys("abcdefg");
			String carrierName = returnToVendorObjects.carrierNameBoxClaim.getAttribute("value");
			if(carrierName.equals("abcdefg")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Edit Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Edit Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxClaim.clear();
			returnToVendorObjects.vehicleRegNoBoxClaim.sendKeys("11aaqq");
			String vehRegNum = returnToVendorObjects.vehicleRegNoBoxClaim.getAttribute("value");
			if(vehRegNum.equals("11aaqq")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Edit Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Carton Quantity Update
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaim.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaim.sendKeys("2");
			String carQty = returnToVendorObjects.cartonPickupQtyBoxClaim.getAttribute("value");
			if(carQty.equals("2")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Edit Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Authorization Date Update
			waitFor(2);
			returnToVendorObjects.authorisationDateClaim.clear();
			String dateVer = common.getCurrentDate();
			returnToVendorObjects.authorisationDateClaim.sendKeys(dateVer);
			String date = returnToVendorObjects.authorisationDateClaim.getAttribute("value");
			if(date.equals(dateVer)){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Date in Edit Screen and the Authorisation Date has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Date in Edit Screen and the Authorisation Date has not been changed;;;Fail");
			}

			//Consignment Number Update
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaim.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaim.sendKeys("147258");
			String conNum = returnToVendorObjects.consignmentNumberTextBoxClaim.getAttribute("value");
			if(conNum.equals("147258")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Edit Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Edit Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);
			returnToVendorObjects.saveClaim.click();
			waitForJSandJQueryToLoad(driver);;
			waitFor(1);

			if(returnToVendorObjects.okButtonPopup.isDisplayed()){
				if(returnToVendorObjects.conformationPopup.getText().equals("Changes have been updated.")){
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed After clicking Save Button as Expected;;;Pass");
					returnToVendorObjects.okButtonPopup.click();
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
					returnToVendorObjects.okButtonPopup.click();
				}
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Save Claim Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
			}

			waitFor(2);
			returnToVendorObjects.FinaliseClaimButton.click();

			//Reason Code Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.reasonCodeDropdownFinalise.click();
			int j = generateRandomNumber(min,max);
			WebElement element1 =  prepareWebElementWithDynamicXpathWithInt(returnToVendorObjects.reasonCodeFinalise,j,driver);
			element1.click();
			waitFor(1);
			htmlToExtent(cName, mName, extLogger, driver, "Able to Edit Reason Code in Finalise Screen and the Reason Code has been changed;;;Pass");

			//Authorization Code Update Finalize Screen
			returnToVendorObjects.authorasationCodeBoxFinalise.clear();
			returnToVendorObjects.authorasationCodeBoxFinalise.sendKeys("789456");
			String authCodeAuth = returnToVendorObjects.authorasationCodeBoxFinalise.getAttribute("value");
			if(authCodeAuth.equals("789456")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Authorisation Code in Finalise Screen and the Authorisation Code has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Authorisation Code in Finalise Screen and the Authorisation Code has not been changed;;;Fail");
			}

			//Carrier Name Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.carrierNameBoxFinalise.clear();
			returnToVendorObjects.carrierNameBoxFinalise.sendKeys("ertyu");
			String carrierNameAuth = returnToVendorObjects.carrierNameBoxFinalise.getAttribute("value");
			if(carrierNameAuth.equals("ertyu")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carrier Name in Finalise Screen and the Carrier Name has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carrier Name in Finalise Screen and the Carrier Name has not been changed;;;Fail");
			}

			//Vehicle Registration Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.vehicleRegNoBoxFinalise.clear();
			returnToVendorObjects.vehicleRegNoBoxFinalise.sendKeys("22gg55");
			String vehRegNumAuth = returnToVendorObjects.vehicleRegNoBoxFinalise.getAttribute("value");
			if(vehRegNumAuth.equals("22gg55")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Vehicle Rego Number in Finalise Screen and the Vehicle Rego Number has not been changed;;;Fail");
			}

			//Consignment Number Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.clear();
			returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.sendKeys("753698");
			String conNumAuth = returnToVendorObjects.consignmentNumberTextBoxClaimFinalise.getAttribute("value");
			if(conNumAuth.equals("753698")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Consignment Number in Finalise Screen and the Consignment Number has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Consignment Number in Finalise Screen and the Consignment Number has not been changed;;;Fail");
			}
			waitFor(2);

			//Carton Quantity Update Finalize Screen
			waitFor(2);
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.clear();
			returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.sendKeys("1");
			String carQtyAuth = returnToVendorObjects.cartonPickupQtyBoxClaimFinalise.getAttribute("value");
			if(carQtyAuth.equals("1")){
				htmlToExtent(cName, mName, extLogger, driver, "Able to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has been changed;;;Pass");
			}
			else{
				htmlToExtent(cName, mName, extLogger, driver, "Unable to Update Carton PickUp Quantity in Finalise Screen and the Carton PickUp Quantity has not been changed;;;Fail");
			}

			//Conditions
			if(claimType.equals("Finalise")){
				//Finalizing the Claim
				waitFor(2);
				returnToVendorObjects.FinaliseButtonPopupWindow.click();
				waitFor(1);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please make sure that the details entered are valid. Once ")){
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed After clicking Finalise Button as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Displayed or Message in Popup is Incorrect After clicking Save Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Finalise Confirmation Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") has been finalised.")){
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed After clicking Ok Confirmation in Popup as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Displayed or Message in Popup is Incorrect After clicking Ok Confirmation in Popup Button;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Draft Claim is Finalised Popup Message is Not Displayed After clicking Cancel Button;;;Fail");
				}

				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conYesButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Are you sure you want to print claim")){
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed After Finalisation Confirmation Popup as Expected;;;Pass");
						returnToVendorObjects.conYesButton.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Displayed or Message in Popup is Incorrect After Finalisation Confirmation Popup;;;Fail");
						returnToVendorObjects.conYesButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Print Claim Popup Message is Not Displayed After Finalisation Confirmation Popup;;;Fail");
				}
				waitFor(3);

				//Claim Print Page
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				String winHandleBefore1 = driver.getWindowHandle();
				for(String winHandle : driver.getWindowHandles()){
					driver.switchTo().window(winHandle);
				}
				driver.close();
				driver.switchTo().window(winHandleBefore1);
				htmlToExtent(cName, mName, extLogger, driver, "Claim Note Print Page Navigated Successfully;;;Pass");

				waitFor(2);
				if(returnToVendorObjects.conYesButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Do you want to print Claim Label for Cartons?")){
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conYesButton.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Displayed or Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conYesButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Print Claim Labels for Carton Popup Message is Not Displayed;;;Fail");
				}

				waitFor(1);
				returnToVendorObjects.cartonPickupQtyTextBox.sendKeys(cartonPickupQty);
				htmlToExtent(cName, mName, extLogger, driver, "Carton Pickup Quantity is Entered as: "+cartonPickupQty+";;;Pass");
				waitFor(1);
				returnToVendorObjects.cartonPickupQtyOkPopUp.click();
				waitFor(3);

				//Carton Label Print Page
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				String winHandleBefore2 = driver.getWindowHandle();
				for(String winHandle : driver.getWindowHandles()){
					driver.switchTo().window(winHandle);
				}
				driver.close();
				driver.switchTo().window(winHandleBefore2);
				htmlToExtent(cName, mName, extLogger, driver, "Carton Label Print Page Navigated Successfully;;;Pass");
				waitFor(2);

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()!=0){
					String aticleNumberClaim =  finaliseResults.get(0).get(1).toString();
					String storeClaim = finaliseResults.get(0).get(0).toString();
					String created_User =  finaliseResults.get(0).get(3).toString();
					String StoreNum = getContext().getStringProperty("store");
					String userId = getContext().getStringProperty("username");

					String aticleNumberClaim1 =  finaliseResults.get(1).get(1).toString();
					String storeClaim1 = finaliseResults.get(1).get(0).toString();
					String created_User1 =  finaliseResults.get(1).get(3).toString();

					//First Article
					if(aticleNumberClaim.equals(articleList.get(0)) || aticleNumberClaim.equals(articleList.get(1))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For First Article: "+aticleNumberClaim+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For First Article: "+aticleNumberClaim+";;;Fail");
					}

					//Second Article
					if(aticleNumberClaim1.equals(articleList.get(0)) || aticleNumberClaim1.equals(articleList.get(1))){
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Article Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}

					if(storeClaim.equals(StoreNum)){
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Store Number is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}

					if(created_User.equals(userId)){
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Same in DB For Second Article: "+aticleNumberClaim1+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "The Created User ID is Not Same in DB For Second Article: "+aticleNumberClaim1+";;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Claim is Not Found in DB;;;Fail");
				}

				//After Finalization
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advansedSearchBox.sendKeys(claimNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
				htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Finalised")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Finalised as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Finalised;;;Fail");
				}
				//			returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				//			returnToVendorObjects.advOrderStatusDropdown.sendKeys("Finalised");
				//			htmlToExtent(cName,mName,extLogger,driver, "Finalised is Selected as Status in Advanced Search;;;Pass");
				//			returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				//			htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				//			returnToVendorObjects.advGoButon.click();
				//			waitForJSandJQueryToLoad(driver);;
				//			waitFor(2);
				//			if((returnToVendorObjects.tableFinalClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.finalisedClaimTab.isDisplayed())){
				//				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Finalise Tab as Expected;;;Pass");
				//			}
				//			else{
				//				htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Finalise Tab is Not as Expected;;;Fail");
				//			}
				//			waitFor(1);
				//			returnToVendorObjects.tableFinalClaimNumber.click();
				//			waitForJSandJQueryToLoad(driver);;
				//			waitFor(2);
				//			
				//			if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Finalised")){
				//				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Finalised as Expected;;;Pass");
				//			}
				//			else{
				//				htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Finalised;;;Fail");
				//			}x

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(8, 16);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Finalised Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Articles Verify After Finalization
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if((articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("789456")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal1.getText().equals("1")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal1.getText().equals("ertyu")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal1.getText().equals("22gg55")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal1.getText().equals("753698")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal1.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("10")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Finalisation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Finalisation;;;Fail");
				}


			}
			else if(claimType.equals("Cancel")){
				waitFor(2);
				returnToVendorObjects.cancleButtonInFinalise.click();
				waitFor(1);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.conNoButton.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().contains("Please confirm to delete Claim Number "+claimNumber+" raised for Supplier")){
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.conNoButton.click();
						if(returnToVendorObjects.cancelHeaderButton.isEnabled()){
							htmlToExtent(cName, mName, extLogger, driver, "Page Redirected to previous page after clicking Cancel button as Expected;;;Pass");
						}
						else{
							htmlToExtent(cName, mName, extLogger, driver, "Page is Not Redirected to previous page after clicking Cancel button;;;Fail");
						}
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.conNoButton.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Delete Claim Confirmation Popup Message is Not Displayed;;;Fail");
				}

				waitFor(2);
				returnToVendorObjects.cancelHeaderButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				returnToVendorObjects.conYesButton.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.okButtonPopup.isDisplayed()){
					if(returnToVendorObjects.conformationPopup.getText().equals("Draft ("+"00"+""+claimNumber+") Deleted successfully.")){
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed as Expected;;;Pass");
						returnToVendorObjects.okButtonPopup.click();
					}
					else{
						htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Displayed and Message in Popup is Incorrect;;;Fail");
						returnToVendorObjects.okButtonPopup.click();
					}
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Deleted Successfully Popup Message is Not Displayed;;;Fail");
				}

				//Claim Number Check in DB
				String claimArticle = testdata.getText("claim");
				claimArticle = claimArticle.replace("claimNumber", "00"+claimNumber);
				List<List<Object>>finaliseResults = sql.executeQuery(getContext(),claimArticle);

				if(finaliseResults.size()==0){
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Not Available in DB as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName, mName, extLogger, driver, "Claim Number is Available in DB;;;Fail");
				}

				//After Cancellation
				waitFor(2);
				returnToVendorObjects.errorCloseClaimEnquiry.click();
				returnToVendorObjects.advansedSearch.click();
				waitFor(1);
				returnToVendorObjects.advsupplierTextBox.sendKeys(vendorNumber);
				returnToVendorObjects.advOrderStatusDropdown.sendKeys("Cancelled");
				htmlToExtent(cName,mName,extLogger,driver, "Cancelled is Selected as Status in Advanced Search;;;Pass");
				returnToVendorObjects.advSourceDropdown.sendKeys("Store");
				htmlToExtent(cName,mName,extLogger,driver, "Store is Selected as Source in Advanced Search;;;Pass");
				returnToVendorObjects.advGoButon.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);
				if((returnToVendorObjects.tableCancelClaimNumber.getText().equals(claimNumber)) && (returnToVendorObjects.cancelledClaimTab.isDisplayed())){
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Claim Number is Displayed under Cancelled Tab is Not as Expected;;;Fail");
				}
				waitFor(1);
				returnToVendorObjects.tableCancelClaimNumber.click();
				waitForJSandJQueryToLoad(driver);;
				waitFor(2);

				if(returnToVendorObjects.claimHeaderStatus.getText().contains("Status : Cancelled")){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header is Displayed as Cancelled as Expected;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Status in the Header: "+returnToVendorObjects.claimHeaderStatus.getText()+" is Not Displayed as Cancelled;;;Fail");
				}

				String claimNumFinal = returnToVendorObjects.claimHeaderClaimNumber.getText();
				String claimNoFinal = claimNumFinal.substring(14, 22);
				if(claimNumber.equals(claimNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Claim Number in the Header:"+claimNoFinal+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String supplierNumFinal = returnToVendorObjects.claimHeaderSupplierNumber.getText();
				String supplierNoFinal = supplierNumFinal.substring(0, 10);
				if(vendorNumber.equals(supplierNoFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Supplier Number in the Header:"+supplierNo+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String todaysDateFinal = common.getCurrentDate();
				if(todaysDateFinal.equals(returnToVendorObjects.claimHeaderDate.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String sourceNameFinal = returnToVendorObjects.claimHeaderSource.getText();
				if(sourceNameFinal.equals("STORE")){
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Source in the Header:"+sourceName+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				String createdByFinal = returnToVendorObjects.claimHeaderCreatedBy.getText();
				if(createdByFinal.contains(userIdFinal)){
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Created By in the Header:"+createdBy+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(todaysDateFinal.equals(returnToVendorObjects.finalisedDateHeader.getText())){
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Cancelled Date in the Header:"+returnToVendorObjects.claimHeaderDate.getText()+" is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Articles Verify After Cancellation
				if((articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(0).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(0)+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if((articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable1.getText()))||(articleList.get(1).equals(returnToVendorObjects.articleVerifyFinalTable2.getText()))){
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Articles: "+articleList.get(1)+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				//Other Verifications
				if(returnToVendorObjects.AuthorisationCodeFinal.getText().equals("12345")){
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Authorisation Code: "+returnToVendorObjects.AuthorisationCodeFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.cartonPickupQuantityFinal.getText().equals("2")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carton Pickup Quantity: "+returnToVendorObjects.cartonPickupQuantityFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.carrierNameFinal.getText().equals("abcdefg")){
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Carrier Name: "+returnToVendorObjects.carrierNameFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.vehicleRegoNumberFinal.getText().equals("11aaqq")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.vehicleRegoNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.ConsignNumberFinal.getText().equals("147258")){
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Vehicle Rego Number: "+returnToVendorObjects.ConsignNumberFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}

				if(returnToVendorObjects.totalUnitsFinal.getText().equals("10")){
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units in the Claim is Displayed as Expected After Cancellation;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "The Total Units: "+returnToVendorObjects.totalUnitsFinal.getText()+" in the Claim is Not Displayed or it is Incorrect After Cancellation;;;Fail");
				}
			}*/


		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
}





