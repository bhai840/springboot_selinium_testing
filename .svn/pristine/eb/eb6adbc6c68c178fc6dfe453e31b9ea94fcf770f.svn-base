package au.wow.ngbomain.tests;

import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.InstoreCompetitionObject;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.InstoreCompetitionPage;
import au.wow.ngbomain.pages.WoWLoginPage;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;


public class InstoreCompetitionTest extends TestBase{

	//Declare and initialize the logger, status, sql and page objects
	private Logger log = LogManager.getLogger(InstoreCompetitionTest.class);
	List<List<Object>> results;
	List<List<Object>> results1;
	TestStatus status;
	SQLWrapper sql = new SQLWrapper(log);
	WoWLoginPage loginPage;
	InstoreCompetitionPage objInstoreCompetitionPage;
	InstoreCompetitionObject objInstoreCompetitionObjects;
	BasePage BaseObj;
	CommonFunctions common;
	StoreProperties storeprop;			
	List<List<Object>> result;
	List<List<Object>> result_temp;
	public static WebDriver driver;
	public static XMLDataReader data;

	
	public static String mName="";
	public static String cName ="";
	public static ArrayList<String> methodList = new ArrayList<String>();
	public static  ExtentTest extLogger;
	public static ExtentReports extReport;	
	public static boolean isExceptionCaptured=false;
    int count=0;		
	int MCcount=0;
	public static boolean isFirstTest=true;
	
	public String returnedString;
	
	String freshfood = "('25','30','40','45','47','55')";
	String nonfreshfood = "('20','27','05','15','28','10','00')"; 
	
	public InstoreCompetitionTest(){
		super.log=log;
	}
	
	public void deletePromotionTable() throws SQLException{
		
		List<List<Object>> deleteResult = new ArrayList<List<Object>>();
		String deletePromo = data.getText("deleteQuery");
		deleteResult = sql.executeQuery(getContext(), deletePromo);	
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Create instore competition promotion using article number for non-fresh food")
	public void instoreCompNFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			deletePromotionTable();
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreCompetitionPage.createInstoreComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Create instore competition promotion using article description for Non-fresh food")
	public void instoreCompNFFdesc() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			do{
				String articles_sql = data.getText("articlesNFF").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), articles_sql);
				if(results.size()!=0)
				{
					int num = common.RandomFromDB(results);
					String  ranArticle = results.get(num).get(1).toString();
					objInstoreCompetitionObjects.article.clear();
					objInstoreCompetitionObjects.article.sendKeys(ranArticle);
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver, "***Fetching Non-fresh food Articles***;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver, "Article selected is:"+ ranArticle+";;;Pass");
					String currentDate=null;
					objInstoreCompetitionObjects.endDate.clear();
					currentDate = formatDate1(new Date());
					htmlToExtent(cName,mName,extLogger,driver, "Clearance Promotion Start Date is: "+currentDate+";;;Pass");
					String endDate=null;
					endDate = common.AddDate(common.ConvertdateFormatddmmyy(currentDate), 30);
					objInstoreCompetitionObjects.endDate.sendKeys(endDate);
					objInstoreCompetitionObjects.ClickOutside.click();
					htmlToExtent(cName,mName,extLogger,driver, "Clearance Promotion End Date is: "+endDate+";;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Max duration is: 31 days;;;Pass");
					waitForJSandJQueryToLoad(driver);
					waitFor(1);
					objInstoreCompetitionObjects.searchAndAdd.click();
					htmlToExtent(cName,mName,extLogger,driver,"Search and Add button is clicked;;;Pass");
					waitForJSandJQueryToLoad(driver);
					
					try{
						if(driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).isDisplayed()){
							driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).click();
							objInstoreCompetitionObjects.addtolist.click();
							
						}
					}catch(Exception e){
						
					}

					if(isDisplayed(objInstoreCompetitionObjects.nodatafound))
					{
						htmlToExtent(cName,mName,extLogger,driver,"No data found: searching another article;;Fail;Pass");
					}
					else
					{
						//if(isDisplayed(objInstoreCompetitionObjects.checkbox))
						//{
						//	objInstoreCompetitionObjects.checkbox.click();
						//	objInstoreCompetitionObjects.addtolist.click();
						htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");
						//}
						//	else
						//	{
						//	htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");
						//}
					}	
				}
			}while(isDisplayed(objInstoreCompetitionObjects.nodatafound));
			returnedString=objInstoreCompetitionPage.CreateInstoreCompdesc(objInstoreCompetitionObjects,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Create instore competition promotion using article number for Fresh food")
	public void instoreCompFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreCompetitionPage.createInstoreComp(objInstoreCompetitionObjects,ranArticle,driver);		
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Create instore competition promotion using article description for Fresh food")
	public void instoreCompFFdesc() //throws IOException, AWTException, SQLException,  ParseException
	{

		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			do{
				String articles_sql = data.getText("articlesFF").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), articles_sql);
				if(results.size()!=0)
				{
					int num = common.RandomFromDB(results);
					String  ranArticle = results.get(num).get(1).toString();
					//ranArticle = "Select Smoked Beef Pastrami" ;
					objInstoreCompetitionObjects.article.clear();
					objInstoreCompetitionObjects.article.sendKeys(ranArticle);
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver, "***Fetching Non-fresh food Articles***;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver, "Article selected is:"+ ranArticle+";;;Pass");
					String currentDate=null;
					objInstoreCompetitionObjects.endDate.clear();
					currentDate = formatDate1(new Date());
					htmlToExtent(cName,mName,extLogger,driver, "Clearance Promotion Start Date is: "+currentDate+";;;Pass");
					String endDate=null;
					endDate = common.AddDate(common.ConvertdateFormatddmmyy(currentDate), 30);
					objInstoreCompetitionObjects.endDate.sendKeys(endDate);
					objInstoreCompetitionObjects.ClickOutside.click();
					htmlToExtent(cName,mName,extLogger,driver, "Clearance Promotion End Date is: "+endDate+";;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Max duration is: 31 days;;;Pass");
					waitForJSandJQueryToLoad(driver);
					waitFor(1);
					objInstoreCompetitionObjects.searchAndAdd.click();
					htmlToExtent(cName,mName,extLogger,driver,"Search and Add button is clicked;;;Pass");
					waitForJSandJQueryToLoad(driver);
					
					try{
						if(driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).isDisplayed()){
							driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).click();
							objInstoreCompetitionObjects.addtolist.click();
							
						}
					}catch(Exception e){
						
					}

					if(isDisplayed(objInstoreCompetitionObjects.nodatafound))
					{
						htmlToExtent(cName,mName,extLogger,driver,"No data found: searching another article;;Fail;Pass");
					}
					else
					{
						/*if(isDisplayed(objInstoreCompetitionObjects.checkbox))
							{
									objInstoreCompetitionObjects.checkbox.click();
									objInstoreCompetitionObjects.addtolist.click();
									htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");
							}
							else
							{
						 */htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");
						 //}
					}	
				}
			}while(isDisplayed(objInstoreCompetitionObjects.nodatafound));
			returnedString=objInstoreCompetitionPage.CreateInstoreCompdesc(objInstoreCompetitionObjects,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Create instore compitition promotion using PBD Article")
	public void instorePBDComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstorePBDComp(status); 
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				returnedString = objInstoreCompetitionPage.instorePBDComp(objInstoreCompetitionObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify de-activate in Active and Future Promotion in competition promotion")
	public void deactivateRecordComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreComp(status);
		objInstoreCompetitionPage.deactivateRecord(objInstoreCompetitionObjects,driver);
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify search using Filters in Active and Future Promotion in competition promotion")
	public void verifyactivepromotionfiltersComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreComp(status);
		objInstoreCompetitionPage.verifyarticleFilterActiveComp(objInstoreCompetitionObjects,driver);
		waitForJSandJQueryToLoad(driver);
		htmlToExtent(cName,mName,extLogger,driver, "Filters for Active and Future Promotion in Competition promotion is verified successfully;;;Pass"); 
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Search and Filters in Past Promotion in competition promotion")
	public void verifySearchAndFilterPastComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+2;
		}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreComp(status);
		objInstoreCompetitionPage.SearchAndFilterPastComp(objInstoreCompetitionObjects,driver);
		waitForJSandJQueryToLoad(driver);
		htmlToExtent(cName,mName,extLogger,driver, "Search and Filters in Past Promotion is verified successfully;;;Pass"); 
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Competition Promotion is allowed for Deleted articles")
	public void createdeletedarticleComp()// throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("deletedarticles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				ranArticle = "169504";
				htmlToExtent(cName,mName,extLogger,driver, "Fetching deleted article from DB;;;Pass");
				returnedString = objInstoreCompetitionPage.createInstoreComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Pass");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	public void navToInstoreComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreCompetitionPage = loginPage.navToInstoreCompPromotiontester90(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreCompetitionPage = loginPage.navToInstoreCompPromotiontester90(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
			objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
			
	}
			
	public void navToInstorePBDComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreCompetitionPage = loginPage.navToInstoreCompPromotiontester90(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreCompetitionPage = loginPage.navToInstoreCompPromotiontester90(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page----------------;;;Pass");
			objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
		
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Department Manager for Competition Promotion")
	public void MaxPercentageDMComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreDMComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				returnedString = 	objInstoreCompetitionPage.MaxPercentageDMComp(objInstoreCompetitionObjects,ranArticle,driver);		
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Team Member for Competition Promotion")
	public void MaxPercentageTMComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreTMComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				/*Using the same function in Department Manager*/
				returnedString = objInstoreCompetitionPage.MaxPercentageDMComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Customer Assistance for Competition Promotion")
	public void MaxPercentageCAComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreCAComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				/*Using the same function in Department Manager*/
				returnedString = objInstoreCompetitionPage.MaxPercentageDMComp(objInstoreCompetitionObjects,ranArticle,driver);		
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Office Assistance for Competition Promotion")
	public void MaxPercentageOAComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOAComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				/*Using the same function in Department Manager*/
				returnedString = objInstoreCompetitionPage.MaxPercentageDMComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Stock take manager for Competition Promotion")
	public void MaxPercentageSTMComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreSTMComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same function in Tester90*/
				returnedString = objInstoreCompetitionPage.createInstoreComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Office Supervisor for Competition Promotion")
	public void MaxPercentageOSComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOSComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				/*Using the same function in Department Manager*/
				returnedString = objInstoreCompetitionPage.MaxPercentageDMComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Store Manager for Competition Promotion")
	public void MaxPercentageSMComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreSMComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article number is: " + ranArticle+";;;Pass");
				returnedString = objInstoreCompetitionPage.MaxPercentageSMComp(objInstoreCompetitionObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum % for Business Review for Competition Promotion")
	public void MaxPercentageBRComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreBRComp(status);
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same method in Tester90 */
				objInstoreCompetitionPage.viewinstoreBRComp(objInstoreCompetitionObjects,ranArticle,driver);				
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Enusre the error message when user provide greater than Maximum % in Competition promotion")
	public void MaxPercentErrorComp() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreCompArtpreCount2==-1)
		{
			MCcount =MCcount+2;
		}

		TestStatus status = getTestStatus();
		//String users[] = new String[7];
		try{
			for(int i=0;i<=7;i++){
				if(i ==0) 
				{
					navToInstoreComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Admin displayed successfully;;;Pass");
				}
				else if (i ==1){
					navToInstoreDMComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Department Manager displayed successfully;;;Pass");				
				}
				else if (i ==2){
					navToInstoreTMComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Team Member displayed successfully;;;Pass");
				}
				else if (i ==3){
					navToInstoreCAComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Customer Assistant displayed successfully;;;Pass");				
				}
				else if (i ==4){
					navToInstoreOAComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Office Assistance displayed successfully;;;Pass");				
				}
				else if (i ==5){
					navToInstoreOSComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Office Supervisor displayed successfully;;;Pass");				
				}
				else if (i ==6){
					navToInstoreSMComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers1();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Store Manager displayed successfully;;;Pass");				
				}
				else if (i ==7){
					navToInstoreSTMComp(status);
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					waitForJSandJQueryToLoad(driver);;
					navToUsers();
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver,"Error Message for Stock Take Manager displayed successfully;;;Pass");				
				}
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));}
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	public void navToInstoreDMComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application----------------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreCompetitionPage = loginPage.navToInstorePromotionDMComp(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------;;;Pass");
		objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreTMComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreCompetitionPage = loginPage.navToInstorePromotionTMComp(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
		objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreCAComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreCompetitionPage = loginPage.navToInstorePromotionCAComp(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
		objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreOAComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreCompetitionPage = loginPage.navToInstorePromotionOAComp(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
		objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreOSComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreCompetitionPage = loginPage.navToInstorePromotionOSComp(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
		objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreSMComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreCompetitionPage = loginPage.navToInstorePromotionSMComp(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
		objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreSTMComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store: " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreCompetitionPage = loginPage.navToInstorePromotionSTMComp(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store: " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreCompetitionPage = loginPage.navToInstorePromotionSTMComp(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
			objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToInstoreBRComp(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreCompetitionPage = loginPage.navToInstorePromotionBRComp(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreCompetitionPage = loginPage.navToInstorePromotionBRComp(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Competition Promotion Page--------------------;;;Pass");
			objInstoreCompetitionPage.clickOnInstoreComp(objInstoreCompetitionObjects,driver);
	}
	
	public void navToUsers() throws IOException, AWTException, SQLException,  ParseException{
		
		String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String  ranArticle = results.get(num).get(0).toString();
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			returnedString = objInstoreCompetitionPage.createInstoreErrorComp(objInstoreCompetitionObjects,ranArticle,driver);	
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
		}		
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
		}
	}
	public void navToUsers1() throws IOException, AWTException, SQLException,  ParseException{
		
		String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String  ranArticle = results.get(num).get(0).toString();
			returnedString = objInstoreCompetitionPage.createInstoreError1Comp(objInstoreCompetitionObjects,ranArticle,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
		}		
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
		}
	}
	
	//------------------------------------------------pradeep-------------------------------------------------
	/*@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Store Manager for Competition Promotion")
	public void MaxDurationCompetitor_SMNF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Store Manager role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Department Manager for Competition Promotion")
	public void MaxDurationCompetitor_DMNF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreDMComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Department Manager role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Team Member for Competition Promotion")
	public void MaxDurationCompetitor_TMNF() //throws IOException, AWTException, SQLException,  ParseException
	{	
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreTMComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Team Member role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Stock Take Manager for Competition Promotion")
	public void MaxDurationCompetitor_STMNF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreSTMComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Stock Take Manager role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Customer Assistant for Competition Promotion")
	public void MaxDurationCompetitor_CANF() //throws IOException, AWTException, SQLException,  ParseException
	{

		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreCAComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				Article = "231106";
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Customer Assistant role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Office Assistant for Competition Promotion")
	public void MaxDurationCompetitor_OANF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOAComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Office Assistant role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Office Supervisor for Competition Promotion")
	public void MaxDurationCompetitor_OSNF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOSComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Office Supervisor role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Business Review for Competition Promotion")
	public void MaxDurationCompetitor_BRNF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreBRComp(status);
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				objInstoreCompetitionPage.viewinstoreBRComp(objInstoreCompetitionObjects, Article,driver);

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Business Review users not able to add promotion to draft;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify error message for maximum duration for NON FRESH FOOD article")
	public void MaxDurationCompetitor_ErrNF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+2;}
		
		TestStatus status = getTestStatus();
	//	String users[] = new String[6];
		try{
		for(int i=0;i<=6;i++){
			if(i ==0) {
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STORE MANAGER-----------------;;;Pass");
			navToInstoreComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Store Manager;;;Pass");
		}else if (i ==1){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE ASSISTANT-----------------;;;Pass");
			navToInstoreOAComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Assistant;;;Pass");
		}
		else if (i ==2){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE SUPERVISOR-----------------;;;Pass");
			navToInstoreOSComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Supervisor;;;Pass");
		}else if (i ==3){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS TEAM MEMBER-----------------;;;Pass");
			navToInstoreTMComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Team Member;;;Pass");
		}else if (i ==4){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STOCKTAKE MANAGER-----------------;;;Pass");
			navToInstoreSTMComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for StockTake Manager;;;Pass");
		}else if (i ==5){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS CUSTOMER ASSISTANT-----------------;;;Pass");
			navToInstoreCAComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Customer Assistant;;;Pass");
		}else if (i ==6){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS DEPARTMENT MANAGER-----------------;;;Pass");
			navToInstoreDMComp(status);
			navToUsers_DurationError2();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Department Manager;;;Pass");
		}
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));}
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	---------------------------------------FRESH FOOD---------------------------------------------------------------------
	 * ----------------------------------------------------------------------------------------------------------------------
	 
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Store Manager for Competition Promotion")
	public void MaxDurationCompetitor_SMFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			String Art = data.getText("articles").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Store Manager role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Department Manager for Competition Promotion")
	public void MaxDurationCompetitor_DMFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreDMComp(status);
			String Art = data.getText("articles").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 6,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Department Manager role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Team Member for Competition Promotion")
	public void MaxDurationCompetitor_TMFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreTMComp(status);
			String Art = data.getText("articles").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 0,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Team Member role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Stock Take Manager for Competition Promotion")
	public void MaxDurationCompetitor_STMFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreSTMComp(status);
		String Art = data.getText("articles").replace("freshfood", freshfood);
		results = sql.executeQuery(getContext(), Art);
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String Article = results.get(num).get(0).toString();
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			returnedString  = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 0,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
		}else{
			htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Stock Take Manager role is created;;;Pass");
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Customer Assistant for Competition Promotion")
	public void MaxDurationCompetitor_CAFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreCAComp(status);
			String Art = data.getText("articles").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString = objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 0,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}

			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Customer Assistant role is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Office Assistant for Competition Promotion")
	public void MaxDurationCompetitor_OAFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreOAComp(status);
		String Art = data.getText("articles").replace("freshfood", freshfood);
		results = sql.executeQuery(getContext(), Art);
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String Article = results.get(num).get(0).toString();
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			returnedString=objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 0,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
		}else{
			htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Office Assistant role is created;;;Pass");
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Office Supervisor for Competition Promotion")
	public void MaxDurationCompetitor_OSFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreOSComp(status);
		String Art = data.getText("articles").replace("freshfood", freshfood);
		results = sql.executeQuery(getContext(), Art);
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String Article = results.get(num).get(0).toString();
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			returnedString=objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article, 0,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
		}else{
			htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Office Supervisor role is created;;;Pass");
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify the maximum duration for Business Review for Competition Promotion")
	public void MaxDurationCompetitor_BRFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}
		
		TestStatus status = getTestStatus();
		try{
		navToInstoreBRComp(status);
		String Art = data.getText("articles").replace("freshfood", freshfood);
		results = sql.executeQuery(getContext(), Art);
		if(results.size()!=0){
			int num = common.RandomFromDB(results);
			String Article = results.get(num).get(0).toString();
			objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
			objInstoreCompetitionPage.viewinstoreBRComp(objInstoreCompetitionObjects, Article,driver);
			
			
		}else{
			htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
		}
		htmlToExtent(cName,mName,extLogger,driver,"Business Review users not able to add promotion to draft;;;Pass");
		htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify error message for maximum duration for NON FRESH FOOD article")
	public void MaxDurationCompetitor_ErrFF() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}
		
		TestStatus status = getTestStatus();
	//	String users[] = new String[6];
		try{
		for(int i=0;i<=6;i++){
			if(i ==0) {
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STORE MANAGER-----------------;;;Pass");
			navToInstoreComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Store Manager;;;Pass");
		}else if (i ==1){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE ASSISTANT-----------------;;;Pass");
			navToInstoreOAComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Assistant;;;Pass");
		}
		else if (i ==2){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE SUPERVISOR-----------------;;;Pass");
			navToInstoreOSComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Supervisor;;;Pass");
		}else if (i ==3){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS TEAM MEMBER-----------------;;;Pass");
			navToInstoreTMComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Team Member;;;Pass");
		}else if (i ==4){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STOCKTAKE MANAGER-----------------;;;Pass");
			navToInstoreSTMComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for StockTake Manager;;;Pass");
		}else if (i ==5){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS CUSTOMER ASSISTANT-----------------;;;Pass");
			navToInstoreCAComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Customer Assistant;;;Pass");
		}else if (i ==6){
			htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS DEPARTMENT MANAGER-----------------;;;Pass");
			navToInstoreDMComp(status);
			navToUsers_DurationError();
			htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Department Manager;;;Pass");
		}
		
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));}
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
		
		public void navToUsers_DurationError() throws IOException, AWTException, SQLException,  ParseException{
			String Art = data.getText("articles").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				objInstoreCompetitionPage.MaxDuratioError(objInstoreCompetitionObjects,Article,driver);
				//objInstorePage.MaxDuration(objInstoreCompetitionObjects, Article, 32);
			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}}
		
		public void navToUsers_DurationError2() throws IOException, AWTException, SQLException,  ParseException{
			String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				objInstoreCompetitionPage.MaxDuratioError(objInstoreCompetitionObjects,Article,driver);
				//objInstorePage.MaxDuration(objInstoreCompetitionObjects, Article, 32);
			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}}
	
	
		*/
	//-----------------------------------------------SPECIAL ARTICLES---------------------------------------------------
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify promotion can be created for Blocked Procurement articles")
		public void BlockedProcurement() //throws IOException, AWTException, SQLException,  ParseException
		{if(inStoreCompArtpreCount2==-1){
			MCcount =MCcount+1;}

		TestStatus status = getTestStatus();
		try{
			navToInstoreComp(status);
			String Art = data.getText("article");
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				returnedString=objInstoreCompetitionPage.MaxDuration(objInstoreCompetitionObjects, Article,30,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}	
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Blocked Procurement article is created;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Clearence Promotion is blocked if ALC status is End Of Stock")
		public void ESArticles() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreCompArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreComp(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					//objInstorePage.MaxDuration(objInstoreCompetitionObjects, Article, 1);
					objInstoreCompetitionPage.BlockedArticle(objInstoreCompetitionObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for ALC Status = ES article is not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Clearence Promotion is blocked if ALC status is End Of Stock Confirmation")
		public void ECArticles() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreCompArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreComp(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					objInstoreCompetitionPage.BlockedArticle(objInstoreCompetitionObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for ALC Status = EC articls is not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Clearence Promotion is blocked if PS status is Product Recall")
		public void ProductRecallArticles() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreCompArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreComp(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
					objInstoreCompetitionPage.BlockedArticle(objInstoreCompetitionObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Recalled article is not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Clearence Promotion is blocked if PS status is Ready for archiving")
		public void ReadyForArchiving() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreCompArtpreCount2==-1){
				MCcount =MCcount+1;}
			
			TestStatus status = getTestStatus();
			try{
			navToInstoreComp(status);
			String Art = data.getText("article");
			results = sql.executeQuery(getContext(), Art);
			if(results.size()!=0){
				int num = common.RandomFromDB(results);
				String Article = results.get(num).get(0).toString();
				objInstoreCompetitionPage.DeletePreArticle(objInstoreCompetitionObjects,driver);
				objInstoreCompetitionPage.BlockedArticle(objInstoreCompetitionObjects, Article,driver);
			}else{
				htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
			}	
			htmlToExtent(cName,mName,extLogger,driver,"Promotion for Ready for artchiving articles are not added to draft;;;Pass");
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreCompArtScenarios,inStoreCompArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
	//-----------------------------------------------------------------------------
	
	@BeforeMethod(alwaysRun=true)
	public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
		waitFor(1);
		System.out.println("test1 - beforemethod");
		
		mName=m9.getName().toString().trim();			
		if(!methodList.contains(m9.getName().toString().trim())){
		methodList.add(m9.getName().toString().trim());
		extLogger = extReport.startTest(m9.getName().toString().trim());
		}
		initializeTestcontext();
		log.info("Loading Testdata for the test case: " + m9.getName().toString());
		data.getTCNameFromChildren(m9.getName().toString().trim());
		if(isFirstTest){
			driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
		}else{
			String title = driver.getCurrentUrl();
			if(title.contains("logginOut"))
			{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
			}else{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
				if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
				{
					if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
						WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
						scrolltoElement(home,driver);
						home.click();
						TimeUnit.SECONDS.sleep(5);
						loginPage.Logout(RoutinesArtScenarios, RoutinesArttestname, driver);
						driver.navigate().refresh();
						TimeUnit.SECONDS.sleep(5);}
				}
			}
		}
			isFirstTest=false;
			//driver=createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser"));
			setDriver(driver);
		testcontext.setAttribute("WebDriver", driver);
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m9.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		inStoreCompArttestname = m9.getName().toString().trim();
		inStoreCompArttestdesc = m9.getAnnotation(Test.class).description();
		htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Docker run - "+getContext().getStringProperty("isDocketRun")+"</h4></i></b>;;;Info");
		objInstoreCompetitionObjects = PageFactory.initElements(this.driver, InstoreCompetitionObject.class);
		objInstoreCompetitionPage = PageFactory.initElements(this.driver, InstoreCompetitionPage.class);
		//objInStoreDisplayPromotionsObjects = PageFactory.initElements(this.driver, InStoreDisplayPromotionsObjects.class);
		BaseObj = PageFactory.initElements(this.driver, BasePage.class);
		common = PageFactory.initElements(this.driver, CommonFunctions.class);
		storeprop = PageFactory.initElements(this.driver, StoreProperties.class);		
	}
	
	@BeforeClass
	public void loadXMLFile(){	
		//initializeTestcontext();
		System.out.println("test1 - Beforeclass");
		data = new XMLDataReader(log);
		customreport=new CustomExtentReports();
		log.info("Loading data for the class: " );
		data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\InstoreCompetition.xml");
		customreport.createExtentReport();		
		cName=this.getClass().getSimpleName();
		reportPath = new File(TestContext.getStringProperty("reportPath"));			
		extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
		classList.add(this.getClass().getSimpleName());
	}
	
	@AfterClass(alwaysRun=true)
	public void tearDown() throws IOException, ParseException{
		waitForJSandJQueryToLoad(driver);
		System.out.println("afterclass");
		
		sceCtMap.put(cName+"_totalCt", methodList.size());
		sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
		sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
		tcCt.put(this.getClass().getSimpleName().toString(), MCcount);
		//System.out.println(extentList);
		//System.out.println(methodList);
        extReport.endTest(extLogger);
		extReport.flush();
		removeDriver();
		closeDriver(driver);
		moduleName.put("Modules", inStoreCompArtModules);
		waitFor(1);		
		int compArtMC=MCcount;
		inStoreCompArtMC=""+compArtMC;
	}

	@AfterMethod(alwaysRun=true)
	protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {
		System.out.println("AffterMethod");
		
		extReport.endTest(extLogger);
		extReport.flush();
		try{
			if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
				htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;INFO");	
				result9.removeAttribute("isFail");
			}}catch(Exception e ){
				//System.out.println();
			
			}
		
		waitFor(1);
		/*Date ppMEndDate1 = new Date();
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		inStoreCompArtMEndDate = dateFormat.format(ppMEndDate1);
		//System.out.println(inStoreCompArtMEndDate); // 12/01/2011 4:48:16 PM
		String EnhancedArtTime = inStoreCompArttestdesc +";"+ inStoreCompArtStartdat +";" + inStoreCompArtMEndDate;
		
		htmlToExtent(cName,mName,extLogger,driver, "Running Completed Status;;;Pass"); 
		inStoreCompArtTime.put(inStoreCompArttestname, EnhancedArtTime);
		waitFor(4);
		closeDriver(driver);*/
		customreport.getExtentReport().endTest(customreport.getExtentTest());
		customreport.getExtentReport().flush();
		waitFor(1);
		if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info"))
		{
			int cnt = inStoreCompArtpreCount2+1;
			htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
			inStoreCompArtpreCount2++;
		}
		/*waitForJSandJQueryToLoad(driver);
		if((getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info")) && inStoreCompArtpreCount2!=reCount)
		{
			waitForJSandJQueryToLoad(driver);
			inStoreCompArtTime.removeAll(inStoreCompArttestname);
			waitForJSandJQueryToLoad(driver);
			inStoreCompArtScenarios.removeAll(inStoreCompArttestname);
		}
		waitForJSandJQueryToLoad(driver);*/
		if(inStoreCompArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass"))
		{
			inStoreCompArtpreCount2=-1;
		}
		waitFor(1);
	}
}