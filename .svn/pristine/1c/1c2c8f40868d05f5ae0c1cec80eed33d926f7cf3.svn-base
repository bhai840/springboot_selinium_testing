package au.wow.ngbomain.pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
//import java.util.Date;
import java.util.List;
import java.util.Random;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbomain.objects.EnhancedArticleLookUpObjects;
import au.wow.ngbomain.tests.EnhancedArticleLookUpTests1;
//import au.wow.storescentral.objects.PromoPlanningObjects;
//import au.wow.storescentral.objects.InStoreDisplayPromotionsObjects;


import au.wow.ngbomain.tests.ReceivingOrderTests;

import com.relevantcodes.extentreports.ExtentTest;

public class EnhancedArticleLookUpPage1 extends BasePage{

	CommonFunctions common = PageFactory.initElements(driver,
			CommonFunctions.class);
	/**
	 * Navigates to promotion management screen Pricing -> Promotions ->
	 * Promotion Management
	 */
	
	private Logger log = LogManager.getLogger(EnhancedArticleLookUpTests1.class);
	SQLWrapper sql = new SQLWrapper(log);
	String POScigvalueea = null;
	String POScigvalueca1 = null;
	String POSliquorEA = null;
	String POSliquorCAR = null;
	String POSliquorMPK = null;
	String POScigvaluekg = null;
	String[] eaval;
	String[] ca1val;
	String[] kgval;
	String[] ca2val;
	String[] carval;
	String[] mpkval;
	String[] expdate;
	List<List<Object>> eDate;
	String UOMeaISISval = null;
	String UOMca1ISISval = null;
	String UOMca2ISISval = null;
	String UOMcarISISval = null;
	String UOMmpkISISval = null;
	String[] ptISISval = null;
	String[] Pstatus = null;
	int nv1;
	List<List<Object>> resultsbestprice;
	List<List<Object>> BestPrice;
	String StoreNo =EnhancedArticleLookUpTests1.StoreNo;
	ExtentTest extLogger=EnhancedArticleLookUpTests1.extLogger;
	String cName= EnhancedArticleLookUpTests1.cName;
	String mName=EnhancedArticleLookUpTests1.mName;
	public static WebDriver driver;
	
	public void setDriver(WebDriver driver){
		this.driver=driver;
	}
	EnhancedArticleLookUpTests1 test = new EnhancedArticleLookUpTests1();
	
	public void clickOnArticleReportReport(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, WebDriver driver)
					throws AWTException {
		//waitFor(1);
		//driver.navigate().to("http://cljbot1:8180/StoreCentral/1005/articlelookup/onPageLoad.htm");
		/*if(getContext().getStringProperty("Type").equals("UAT")){
		driver.navigate().to("http://ngbo-acpt.gss.woolworths.com.au/StoreCentral/1005/articlelookup/onPageLoad.htm");}else{
			driver.navigate().to("http://cljbot1:8180/StoreCentral/1005/articlelookup/onPageLoad.htm");
		}*/
		// waitForJSandJQueryToLoad(driver);;
		waitFor(1);
		Point coordinates = objEnhancedArticleLookup.Lookup.getLocation();
		Robot robot = new Robot();
		robot.mouseMove(coordinates.getX(), coordinates.getY() + 100);

		Actions action = new Actions(driver);
		action.moveToElement(objEnhancedArticleLookup.Lookup).click().build()
		.perform();
		waitFor(1);

		Point coordinates1 = objEnhancedArticleLookup.Article.getLocation();
		Robot robo1t = new Robot();
		robo1t.mouseMove(coordinates1.getX(), coordinates1.getY() + 100);

		Actions action2 = new Actions(driver);
		action2.moveToElement(objEnhancedArticleLookup.Article).click().build()
		.perform();
		waitFor(1);
		robot.mouseMove(5, 5);
		waitForJSandJQueryToLoad(driver);;
		waitFor(1);
	}
	/* public  List<List<Object>> getDbResults(String qName, String mName, String replace) throws SQLException
	{
	TestBase.data = new XMLDataReader(log);
	TestBase.log.info("Loading data for the class: " );
	TestBase.data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\enhancedarticlelookup.xml");
	TestBase.data.getTCNameFromChildren(mName);
	String query=null;
	if(null==replace){
	query =TestBase. data.getText(qName);
	}else{
	query =TestBase. data.getText(qName).replace("TEST", replace);	
	}

	List<List<Object>> results = sql.executeQuery(getContext(), query);
	return results;
	 } */
	public void salesHistory(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String article,List<List<Object>> results,
			List<List<Object>> results1,String name,WebDriver driver) throws IOException, SQLException
	{
		int count=0;int s=1;
		List<List<Object>> applList = new ArrayList<List<Object>>();
		List<List<Object>> applList1 = new ArrayList<List<Object>>();
		enterArt(objEnhancedArticleLookup, article,driver);
		
		String[] artic = splitString(objEnhancedArticleLookup.article.getText(), " - ");
		article=artic[0].trim();
		String art_sql = testdata.getText("verifyValues").replace("artno", article).replace("storeNo", getContext().getStringProperty("store")); // article query
		results = sql.executeQuery(getContext(), art_sql);	
		art_sql = testdata.getText("verifyValues").replace("artno", article).replace("storeNo", getContext().getStringProperty("store")); // article query
		results1 = sql.executeQuery(getContext(), art_sql);	
		
		
		htmlToExtent(cName,mName,extLogger,driver,"The below details is for "+name+" article - "+article+";;;Pass");
		objEnhancedArticleLookup.salesHist.click();
		waitForJSandJQueryToLoad(driver);;
		if(objEnhancedArticleLookup.salesHistWMlist.size()!=0)
		{
			String val = "Please note that Sales History for yesterday could be inaccurate and it will be updated after next data refresh.";
			if(objEnhancedArticleLookup.salesHistWM.getText().equals(val))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Warning message for Sales history is displayed;;;Pass");
				waitFor(1);
				String OM = objEnhancedArticleLookup.OMsalesHist.getText().trim();
				int size = objEnhancedArticleLookup.salesHistUOMlist.size();
				int value = 0;
				if(name.equals("CPBD"))
				{
					value=(4*size)+1;
				}
				for(int i=1;i<=size;i++)
				{
					if(name.equals("CPBD"))
					{
						value = value-(4*i);
					}
					WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.salesHistUOM, i,driver);
					WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.salesHistUOMname, i,driver);
					htmlToExtent(cName,mName,extLogger,driver,"UOM - "+elements.getText()+";;;Pass");
					if(i!=1)
					{
						element.click();
						waitForJSandJQueryToLoad(driver);
						count++;
					}
					applList.clear();
					applList1.clear();
					int tableSize = objEnhancedArticleLookup.salesHistTable.size();
					if(name.equals("CPBD"))
					{
						tableSize = tableSize/size;
					}
					for(int j=1;j<=tableSize;j++)
					{
						List app = new ArrayList();
						List app1 = new ArrayList();							
						for(int k=2;k<=9;k++)
						{	
							WebElement tableValue = null;
							if(name.equals("CPBD"))
							{
								tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, value,k,1,driver);
							}else{tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, j,k,i,driver);
							}
							if(tableValue.getAttribute("class").contains("uom_content uom_cont_"+elements.getText()+""))
							{
								app.add(tableValue.getText());
								app1.add("0");
							}
							else
							{
								if(name.equals("CPBD"))
								{
									try{										
										List a = driver.findElements(By.xpath("//*[@id='salesHistContent']/tr["+value+"]/td["+k+"]/span"));
										if(a.size()==1)
										{
											app1.add("0");
										}else{
										tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, value,k,1,driver);
										app1.add(tableValue.getText());}
										int p =i+1;
										tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, value,k,1,driver);
										app.add(tableValue.getText());
									}catch(Exception e){
										tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, j,k,1,driver);
										app1.add(tableValue.getText());
										int p =i+1;
										tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, j,k,p,driver);
										app.add(tableValue.getText());
									}
								}else{
								tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, j,k,1,driver);
								app1.add(tableValue.getText());
								int p =i+1;
								tableValue = prepareWebElementWithDynamicXpathWithIntIntInt(objEnhancedArticleLookup.salesHistTableValue, j,k,p,driver);
								app.add(tableValue.getText());}
							}
						}
						value++;
						applList.add(app);
						applList1.add(app1);
					}
					if(results.size()!=0)
					{
						List<List<Object>> DBList = results1;
						if(count==0)
						{
							String OM_DB = results.get(0).get(2).toString().replaceAll("\\.?0+$","");
							if(OM_DB.equals(OM))
							{
								htmlToExtent(cName,mName,extLogger,driver,"OM value for article "+article+" matched with backend;;;Pass");
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver,"OM value for article "+article+" mismatched with backend;;;Fail");
							}
							replacenullToZero(applList);
							replacenullToZero(applList1);
							replacenullToZero(results);
							replacevalueSH(results);
							replacenullToZero(results1);
							replacevalueSH(results1);
							removeIndex(results, "21"); removeIndex(results, "20"); removeIndex(results, "19"); removeIndex(results, "17");removeIndex(results, "15");removeIndex(results, "13"); removeIndex(results, "11");
							removeIndex(results, "9");removeIndex(results, "7");removeIndex(results, "5");removeIndex(results, "3");removeIndex(results, "2");removeIndex(results, "1");removeIndex(results, "0");
							removeLastZero(results,0); removeLastZero(results, 1); removeLastZero(results, 2); removeLastZero(results, 3); removeLastZero(results, 4);removeLastZero(results, 5);removeLastZero(results, 6);
							removeIndex(DBList, "21"); removeIndex(DBList, "20"); removeIndex(DBList, "18"); removeIndex(DBList, "16");removeIndex(DBList, "14");removeIndex(DBList, "12"); removeIndex(DBList, "10");
							removeIndex(DBList, "8");removeIndex(DBList, "6");removeIndex(DBList, "4");removeIndex(DBList, "3");removeIndex(DBList, "2");removeIndex(DBList, "1");removeIndex(DBList, "0");
							removeLastZero(applList,0); removeLastZero(applList, 1); removeLastZero(applList, 2); removeLastZero(applList, 3); removeLastZero(applList, 4);removeLastZero(applList, 5);removeLastZero(applList, 6);removeLastZero(applList, 7);
						}
						else
						{
							SHUOMDays(results, OM);
							replacenullToZero(applList);
							removeLastZero(applList,0); removeLastZero(applList, 1); removeLastZero(applList, 2); removeLastZero(applList, 3); 
							removeLastZero(applList, 4);removeLastZero(applList, 5);removeLastZero(applList, 6);removeLastZero(applList, 7);
						}
						htmlToExtent(cName,mName,extLogger,driver,"Comparing day sales for sales history with backend;;;Pass");
						roundOff(applList, 3);roundOff(applList1, 3);roundOff(results, 3);roundOff(DBList, 3);
						//System.out.println(applList);//System.out.println(results);//System.out.println(applList1);//System.out.println(DBList);
										ElementContains1(cName, mName,extLogger,driver, applList, results);
						htmlToExtent(cName,mName,extLogger,driver,"Comparing sales indicator for sales history with backend;;;Pass");
										ElementContains1(cName, mName,extLogger,driver, applList1, DBList);
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"No values in DB to verify Sales History;;;Fail");
					}
				}
				objEnhancedArticleLookup.salesHistOK.click();
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Warning message for Sales history is displayed incorrectly;;;Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Warning message for Sales history is not displayed;;;Fail");
		}
	}
	
	public void POSflag(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results, int row, int column, String name,
			String flagg,WebDriver driver) throws IOException {
		if (results.size() != 0) {
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			if (objEnhancedArticleLookup.articleNtFound.isDisplayed()) {
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				objEnhancedArticleLookup.articleNtFoundclose.click();
				waitFor(1);
			} else {
				verticalScroll(driver);
				String checkPOStab = objEnhancedArticleLookup.posTab
						.getAttribute("class");
				if (checkPOStab.contains("hide")) {
					htmlToExtent(cName,mName,extLogger,driver,"POS tab is not available for the article - "	+ ranArticle + ";;;Pass");
					//Report_AddStep("testcase","POS tab is not available for the article-"	+ ranArticle + "", "", "", "Pass");
				} else {
					objEnhancedArticleLookup.posTab.click();
					waitFor(1);
					WebElement element = prepareWebElementWithDynamicXpathWithIntInt(
							objEnhancedArticleLookup.POStabdetails, row, column,driver);
					String flag = element.getAttribute("class");
					String flagname = element.getText();
					if ((flag.equals(flagg)) && (flagname.equals(name))) {
						htmlToExtent(cName,mName,extLogger,driver,"" + name+ " validation - succesfull for article - "+ ranArticle + ";;;Pass");
						//Report_AddStep("testcase", "" + name+ " validation - succesfull for article - "+ ranArticle + "", "", "", "Pass");
					} else {
						htmlToExtent(cName,mName,extLogger,driver,"" + name+ " validation - unsuccesfull for article - "+ ranArticle + ";;;Fail");
						//Report_AddStep("testcase", "" + name+ " validation - unsuccesfull for article - "+ ranArticle + "", "", "", "Fail");
					}
				}
				scrollUp(driver);
				waitFor(1);
				objEnhancedArticleLookup.backbutton.click();
				waitFor(1);
			}
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"No Articles found in DB for " + name	+ " flag;;;Fail");
			//Report_AddStep("testcase", "No Articles found in DB for " + name+ " flag", "", "", "Pass");
		}
	}

	public void PTWvalue(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results, String val, int cases,WebDriver driver)
					throws IOException {
		if (results.size() != 0) {
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			if (objEnhancedArticleLookup.articleNtFound.isDisplayed()) {
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase", "Article not found", "", "", "Fail");
				objEnhancedArticleLookup.backbutton.click();
				waitFor(1);
			} else {
				verticalScroll(driver);
				String checkPOStab = objEnhancedArticleLookup.posTab
						.getAttribute("class");
				if (checkPOStab.contains("hide")) {
					htmlToExtent(cName,mName,extLogger,driver,"POS tab is not available for the article-"+ ranArticle + ";;;Fail");
					//	Report_AddStep("testcase","POS tab is not available for the article-"+ ranArticle + "", "", "", "Fail");
				} else {
					objEnhancedArticleLookup.posTab.click();
					waitFor(1);
					String ptwvalue = objEnhancedArticleLookup.PTWvalue
							.getText();
					int a = Integer.parseInt(ptwvalue);
					switch (cases) {
					case 1:
						if ((a > 0) && (val.equals("greater"))) {
							htmlToExtent(cName,mName,extLogger,driver,"POS Tare weight - "+ ptwvalue+ " which is greater than 0 for the article-"+ ranArticle + ";;;Pass");
							//						Report_AddStep(	"testcase",	"POS Tare weight - "+ ptwvalue+ " which is greater than 0 for the article-"+ ranArticle + "", "", "", "Pass");
						} else {
							htmlToExtent(cName,mName,extLogger,driver,"POS Tare weight - "	+ ptwvalue+ " which is equal to 0 for the article-"	+ ranArticle + ";;;Fail");
							//							Report_AddStep("testcase", "POS Tare weight - "	+ ptwvalue+ " which is equal to 0 for the article-"	+ ranArticle + "", "", "", "Fail");
						}
						break;
					case 2:
						if ((a == 0) && (val.equals("lesser"))) {
							htmlToExtent(cName,mName,extLogger,driver,"POS Tare weight - "+ ptwvalue+ " which is equal to 0 for the article-"+ ranArticle + ";;;Pass");
							//							Report_AddStep("testcase", "POS Tare weight - "+ ptwvalue+ " which is equal to 0 for the article-"+ ranArticle + "", "", "", "Pass");
						} else {
							htmlToExtent(cName,mName,extLogger,driver,"POS Tare weight - "	+ ptwvalue+ " which is greater than 0 for the article-"+ ranArticle + ";;;Fail");
							//						Report_AddStep("testcase","POS Tare weight - "	+ ptwvalue+ " which is greater than 0 for the article-"+ ranArticle + "", "", "", "Fail");
						}
						break;
					default:
						break;
					}
				}
				scrollUp(driver);
				waitFor(1);
				objEnhancedArticleLookup.backbutton.click();
			}
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"No Articles found in DB to POS Tare weight;;;Fail");
			//			Report_AddStep("testcase", "No Articles found in DB", "", "","Pass");
		}
	}

	public void CUPPrice(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String arttype,WebDriver driver) throws IOException
	{
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String article = results.get(num).get(0).toString();
			String CUPprice = results.get(num).get(1).toString();
			if(CUPprice.contains(",")){
				CUPprice = CUPprice.replace(",", "");}
			enterArt(objEnhancedArticleLookup, article,driver);
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for "+arttype+" article - "+article+";;;Pass");
			if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase","Article not found" , "", "", "Fail");
				objEnhancedArticleLookup.articleNtFoundclose.click();
			}
			else
			{
				verticalScroll(driver);
				objEnhancedArticleLookup.clickPUdetails.click();
				String cup = objEnhancedArticleLookup.CUPprice.getText();
				if(cup.contains(",")){
				cup = cup.replace(",", "");}
				if(cup.contains(CUPprice))
				{
					htmlToExtent(cName,mName,extLogger,driver,"CUP price matched with backend for "+arttype+" article - "+article+";"+objEnhancedArticleLookup.CUPprice.getText()+";"+CUPprice+";Pass");
					//Report_AddStep("testcase","CUP price matched with backend for article - "+article+"" , objEnhancedArticleLookup.CUPprice.getText(), CUPprice, "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"CUP price mismatched with backend for "+arttype+" article - "+article+";"+objEnhancedArticleLookup.CUPprice.getText()+";"+CUPprice+";Fail");
					//Report_AddStep("testcase","CUP price mismatched with backend for article - "+article+"" , objEnhancedArticleLookup.CUPprice.getText(), CUPprice, "Fail");
				}
				clear(objEnhancedArticleLookup,driver);
				waitFor(2);
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No "+arttype+"articles found in DB to check CUP price;;;Fail");
			//Report_AddStep("testcase","No articles found in DB to check CUP price" , "", "", "Fail");
		}
	}

	public void orderQty(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results, int val,WebDriver driver,String name) throws IOException,
			AWTException {
		waitFor(2);
		List a = new ArrayList();
		List<List<Object>> applList = new ArrayList<List<Object>>();
		List b = new ArrayList();
		List<List<Object>> DBList = new ArrayList<List<Object>>();
		if (results.size() != 0) {
			switch (val) {
			case 1:
				int num = common.RandomFromDB(results);
				String ranArticle = results.get(num).get(0).toString();
				clickOnArticleReportReport(objEnhancedArticleLookup,driver);
				waitFor(1);
				waitForClickOfElement(objEnhancedArticleLookup.advSearch, driver);
				waitFor(1);
				objEnhancedArticleLookup.advSearch.click();
				objEnhancedArticleLookup.vendor.click();
				objEnhancedArticleLookup.vendor_no.click();
				enterText(objEnhancedArticleLookup.vendor_no, ranArticle,driver);
				objEnhancedArticleLookup.vendor_verify.click();
				waitForJSandJQueryToLoad(driver);
				objEnhancedArticleLookup.clickGO.click();
				waitForJSandJQueryToLoad(driver);
				objEnhancedArticleLookup.artClick.click();
				waitForJSandJQueryToLoad(driver);
				String[] arti = splitString(
						objEnhancedArticleLookup.article.getText(), " - ");
				String art = arti[0];
				htmlToExtent(cName,mName,extLogger,driver,"Comparing Minimum Order quantity and value for the vendor-"+ ranArticle + " and article - " + art+ " with the backend data;;;Pass");
				//Report_AddStep("testcase","Comparing Minimum Order quantity and value for the vendor-"+ ranArticle + " and article - " + art+ " with the backend data", "", "", "");
				verticalScroll(driver);
				objEnhancedArticleLookup.suppliertab.click();
				waitForJSandJQueryToLoad(driver);;
				for (int i = 2; i <= 4; i++) {
					WebElement element = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.suppliertabdetails, i,driver);
					a.add(decimalFormat(element.getText()));
					i++;
				}
				applList.add(a);
				b.add(decimalFormat(results.get(num).get(1).toString()));
				b.add(decimalFormat(results.get(num).get(2).toString()));
				DBList.add(b);
								ElementContains1(cName, mName,extLogger,driver, applList, DBList);
				break;

			case 2:
				num = common.RandomFromDB(results);
				ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"Comparing Minimum value,Expiry period,Maximum value and Expiry type for the article-"+ ranArticle + " with backend data;;;Pass");
				//Report_AddStep("testcase","Comparing Minimum value,Expiry period,Maximum value and Expiry type for the article-"+ ranArticle + " with backend data", "", "", "");
				clickOnArticleReportReport(objEnhancedArticleLookup,driver);
				enterArt(objEnhancedArticleLookup, ranArticle,driver);
				verticalScroll(driver);
				objEnhancedArticleLookup.additionaldetailsTab.click();
				waitForJSandJQueryToLoad(driver);
				objEnhancedArticleLookup.giftTab.click();
				waitForJSandJQueryToLoad(driver);;
				for (int i = 1; i <= 2; i++) {
					for (int j = 2; j <= 4; j++) {
						WebElement element = prepareWebElementWithDynamicXpathWithIntInt(
								objEnhancedArticleLookup.GCtabdetails, i, j,driver);
						if ((i == 2) && (j == 4)) {
							a.add(element.getText());
						} else {
							a.add(decimalFormat(element.getText()));
						}
						j++;
					}
				}
				applList.add(a);
				b.add(decimalFormat(results.get(num).get(1).toString()));
				b.add(decimalFormat(results.get(num).get(3).toString()));
				b.add(decimalFormat(results.get(num).get(2).toString()));
				b.add(results.get(num).get(4).toString());
				DBList.add(b);
								ElementContains1(cName, mName,extLogger,driver, applList, DBList);
				break;

			case 3:
				num = common.RandomFromDB(results);
				ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver,"Comparing Supplier,Name,Address and contact for the article-"+ ranArticle + " with backend data;;;Pass");
				//Report_AddStep("testcase","Comparing Supplier,Name,Address and contact for the article-"+ ranArticle + " with backend data", "", "", "");
				clickOnArticleReportReport(objEnhancedArticleLookup,driver);
				enterArt(objEnhancedArticleLookup, ranArticle,driver);
				int size = objEnhancedArticleLookup.ntrangedlist.size();
				if (size != 1) {
					selectNotRanged(objEnhancedArticleLookup, size, ranArticle,driver);
				}
				verticalScroll(driver);
				objEnhancedArticleLookup.suppliertab.click();
				waitForJSandJQueryToLoad(driver);;
				for (int i = 1; i <= 4; i++) {
					WebElement element = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.suppTabdetails, i,driver);
					a.add(element.getText());
				}
				applList.add(a);
				b.add(results.get(num).get(1).toString());
				b.add(results.get(num).get(2).toString());
				b.add(results.get(num).get(3).toString() + ", "
						+ results.get(num).get(4).toString() + ", "
						+ results.get(num).get(5).toString() + " - "
						+ results.get(num).get(6).toString());
				b.add(results.get(num).get(7).toString());
				DBList.add(b);
				//ElementContainsTemp(enhancedArtScenarios1, enhancedArttestname1, applList, DBList);
								ElementContains1(cName, mName,extLogger,driver, applList, DBList);
				break;
			}
			waitFor(1);
			scrollUp(driver);
			waitFor(1);
			objEnhancedArticleLookup.backbutton.click();
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"No Articles found in DB to verify "+name+" in Additional and supplier details tab ;;;Fail");
			//Report_AddStep("testcase", "No Articles found in DB", "", "",			"Fail");
		}
	}

	public void PUinfo(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String article, List<List<Object>> results1,
			List<List<Object>> results, int num, String ranArticle,
			List<List<Object>> results_temp, List<List<Object>> results2,
			List<List<Object>> results3,WebDriver driver) throws IOException {
		verticalScroll(driver);
		objEnhancedArticleLookup.clickPUdetails.click();
		waitFor(1);
		switch (article) {
		case "Taxable":
			GST(objEnhancedArticleLookup, results, num,driver);
			break;
		case "MultiPH":
			priceHistory(objEnhancedArticleLookup, results1, 2, results2,
					results3,driver);
			break;
		case "Produce":
			GST(objEnhancedArticleLookup, results, num,driver);
			priceHistory(objEnhancedArticleLookup, results1, 2, results2,
					results3,driver);
			break;
		case "Cigaratte":
			GST(objEnhancedArticleLookup, results, num,driver);
			priceHistory(objEnhancedArticleLookup, results1, 1, results2,
					results3,driver);
			break;
		case "Liquor":
			GST(objEnhancedArticleLookup, results, num,driver);
			priceHistory(objEnhancedArticleLookup, results1, 1, results2,
					results3,driver);
			break;
		case "CPBD":
			break;
		case "LinkedParent":
			GST(objEnhancedArticleLookup, results, num,driver);
			linkedArticle(objEnhancedArticleLookup, results_temp,driver);
			priceHistory(objEnhancedArticleLookup, results1, 2, results2,
					results3,driver);
			break;
		case "LinkedChild":
			linkedchildArt(objEnhancedArticleLookup, results, num, ranArticle,driver);
			GST(objEnhancedArticleLookup, results, num,driver);
			break;
		default:
			break;
		}
	}

	public void clear(EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver) {
		scrollUp(driver);
		waitFor(1);
		objEnhancedArticleLookup.backbutton.click();
	}

	public void GST(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results, int num,WebDriver driver) throws IOException {
		List<List<Object>> applList = new ArrayList<List<Object>>();
		List GST = new ArrayList();
		for (int i = 2; i <= 4; i++) {
			WebElement element = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.GST, i,driver);
			String a = element.getText();
			GST.add(a);
			i++;
		}
		applList.add(GST);
		htmlToExtent(cName,mName,extLogger,driver,"Seller price Group,GST rates - " + GST + ";;;Pass");
		//Report_AddStep("testcase",				"Seller price Group,GST rates - " + GST + "", "", "", "");
		if (results.size() > 0) {
			List a = new ArrayList();
			a.add(results.get(num).get(1).toString() + " - "
					+ results.get(num).get(2).toString());
			a.add((int) Math.round(Float.parseFloat(results.get(num).get(3)
					.toString()))
					+ " %");
			results.clear();
			results.add(a);
							ElementContains1(cName, mName,extLogger,driver, applList, results);
		}
		int count = 1;
	}

	public void priceHistory(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results1, int value,
			List<List<Object>> results2, List<List<Object>> results3,WebDriver driver)
					throws IOException {
		List<List<Object>> description = new ArrayList<List<Object>>();
		List priceHistory = null;
		List desc = new ArrayList();
		int size = objEnhancedArticleLookup.UOMlists.size();
		List UOM = additionaEAN(objEnhancedArticleLookup, value, results2,
				results3,driver);
		waitFor(1);
		objEnhancedArticleLookup.priceHistory.click();
		waitForJSandJQueryToLoad(driver);;
		if (objEnhancedArticleLookup.priceHistoryDetail.size() == 1) {
			if (objEnhancedArticleLookup.priceTypeList.size() == size + 1) {
				List<String> options = getOptionsText(objEnhancedArticleLookup.priceType);
				for (int i = 0; i < size; i++) {
					String uomname = (String) UOM.get(i);
					if (options.contains(uomname)) {
						htmlToExtent(cName,mName,extLogger,driver,""+ uomname+ " is available in dropdown(price history table);;;Pass");
						//Report_AddStep("testcase",""+ uomname	+ " is available in dropdown(price history table)",	"", "", "Pass");
						waitFor(1);
						selectByVisibleText(objEnhancedArticleLookup.priceType,uomname);
						waitForJSandJQueryToLoad(driver);;
						waitFor(1);
						List<WebElement> elements = driver.findElements(By.xpath("//*[@id='prcHstryTbl']/tbody/tr[contains(@class,'"+ uomname + "')]"));
						if (elements.size() > 0) {
							for (int j = 1; j <= elements.size(); j++) {
								priceHistory = new ArrayList();
								for (int p = 1; p <= 4; p++) {
									String a = null;
									WebElement element = driver.findElement(By.xpath("(//*[@id='prcHstryTbl']/tbody/tr[contains(@class,'"+ uomname+ "')])["+j+"]/td["+ p+ "]"));
									a = element.getText();
									if (p == 1) {
										String[] b = splitString(a, "/");
										a = b[2] + "-" + b[1] + "-" + b[0];
									}
									priceHistory.add(a);
								}
								htmlToExtent(cName,mName,extLogger,driver,"" + uomname	+ " price details - " + priceHistory+ ";;;Pass");
								//								Report_AddStep("testcase", "" + uomname	+ " price details - " + priceHistory+ "", "", "", "");
								description.add(priceHistory);
							}
						} else {
							htmlToExtent(cName,mName,extLogger,driver,"price history table not available;;;Fail");
							//Report_AddStep("testcase","price history table not available", "","", "Fail");
						}
						if (i == size - 1) {
							waitForJSandJQueryToLoad(driver);;
							waitFor(1);
							if(objEnhancedArticleLookup.OK.isDisplayed()){
								waitForClickOfElement(objEnhancedArticleLookup.OK,driver);
								verticalinternalscroll(objEnhancedArticleLookup.OK,driver);
								waitFor(1);
							objEnhancedArticleLookup.OK.click();}
							waitForJSandJQueryToLoad(driver);;
							waitFor(0.5);
						}
					} else {
						htmlToExtent(cName,mName,extLogger,driver,""+ uomname+ " is not available in dropdown(price history table);;;Fail");
						//						Report_AddStep("testcase",""+ uomname+ " is not available in dropdown(price history table)","", "", "Fail");
					}
				}
				if (results1.size() > 0) {
					removeIndex(results1, "0");
									ElementContains1(cName, mName,extLogger,driver, description, results1);
				}
			}
		}

	}

	public List<String> additionaEAN(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int val,
			List<List<Object>> results2, List<List<Object>> results3,WebDriver driver)
					throws IOException {
		List addEAN = null;
		List UOM = new ArrayList();
		List desc = null;
		List desc1 = null;
		int count = 1;
		List<List<Object>> description = new ArrayList<List<Object>>();
		List<List<Object>> description1 = new ArrayList<List<Object>>();
		int size = objEnhancedArticleLookup.UOMlists.size();
		if (objEnhancedArticleLookup.additionalEAN.getText().contains(
				"Additional EAN")) {
			htmlToExtent(cName,mName,extLogger,driver,"Additional EAN header is available in application;;;Pass");
			//Report_AddStep("testcase","Additional EAN header is available in application", "","", "Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Additional EAN header is not available in application;;;Fail");
			//Report_AddStep("testcase","Additional EAN header is not available in application","", "", "Fail");
		}
		for (int i = 1; i <= size; i++) {
			WebElement element = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.UOMnames, i,driver);
			String a = element.getText();
			UOM.add(a);
			element.click();
			waitFor(1);
			int strt = 0;
			int check = 0;
			List<WebElement> elements = driver.findElements(By
					.xpath("(//*[contains(@class,'priceAndUnitInfo unitPrc" + a
							+ "')])[1]/tr"));
			if (elements.size() > 0) {
				desc = new ArrayList();
				for (int l = 2; l <= 3; l++) {
					WebElement ele = prepareWebElementWithDynamicXpathWithIntInt(
							objEnhancedArticleLookup.descEANDetails, i, l,driver);
					String h = ele.getText();
					desc.add(h);
				}
				description.add(desc);
				htmlToExtent(cName,mName,extLogger,driver,"UOM - " + UOM.get(i - 1)+ " and its Description,scan description - " + desc+ ";;;Pass");
				//Report_AddStep("testcase", "UOM - " + UOM.get(i - 1)+ " and its Description,scan description - " + desc+ "", "", "", "");
			} else {
				htmlToExtent(cName,mName,extLogger,driver,"Description details not available;;;Fail");
				//Report_AddStep("testcase", "Description details not available",	"", "", "Fail");
			}
			// ElementContainsTemp(description, results2);
			List<WebElement> eles = driver
					.findElements(By
							.xpath("((//*[contains(@class,'addEanInfo price-tab-content')])/table/tbody)["
									+ val + "]/tr")); // value - 2 for produce
			waitFor(1);
			if (eles.size() > 0) {
				if ((val == 2) && (size == 1)) {
					strt = 1;
				}
				if ((val == 1) || (size > 1)) {
					strt = 2;
				}
				for (int m = strt; m <= eles.size(); m++) {
					desc1 = new ArrayList();
					for (int p = 1; p <= 4; p++) {
						waitFor(1);
						WebElement ele = prepareWebElementWithDynamicXpathWithIntIntInt(
								objEnhancedArticleLookup.addEANdetails, val, m,
								p,driver); // 1,2,1
						String h = ele.getText();
						desc1.add(h);
					}
					description1.add(desc1);
					htmlToExtent(cName,mName,extLogger,driver,"UOM - " + UOM.get(i - 1)+ " and its additional EAN are - " + desc1 + ";;;Pass");
					//Report_AddStep("testcase", "UOM - " + UOM.get(i - 1)+ " and its additional EAN are - " + desc1 + "","", "", "");
				}
				val++;
			} else {
				htmlToExtent(cName,mName,extLogger,driver,"Additional EAN details not available;;;Fail");
				//Report_AddStep("testcase","Additional EAN details not available", "", "", "Fail");
			}
			/*
			 * removeLastZero(description1, 3); removeLastZero(results3, 3);
			 * 				ElementContains1(description1, results3);
			 */
		}
		//ElementContainsTemp(enhancedArtScenarios1, enhancedArttestname1, description, results2);
		removeExtraSpaces(results2, 0);
		removeExtraSpaces(results2, 1);
						ElementContains1(cName, mName,extLogger,driver, description, results2);
		removeLastZero(description1, 3);
		removeLastZero(results3, 3);
		//ElementContainsTemp(enhancedArtScenarios1, enhancedArttestname1, description1, results3);
						ElementContains1(cName, mName,extLogger,driver, description1, results3);
		return UOM;
	}

	public void linkedArticle(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results1,WebDriver driver) throws IOException {
		List<List<Object>> description = null;
		waitFor(1);
		if (objEnhancedArticleLookup.linkedItems.getText().contains(
				"Linked Items")) {
			htmlToExtent(cName,mName,extLogger,driver,"Linked Item header is available in application;;;Pass");
			//Report_AddStep("testcase","Linked Item header is available in application", "", "","Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Linked Item header is not available in application;;;Fail");
			//Report_AddStep("testcase","Linked Item header is not available in application", "","", "Fail");
		}
		int sze = objEnhancedArticleLookup.childArtList.size();
		description = getValuesFromTable(objEnhancedArticleLookup.childArtList);
		for (int i = 0; i < description.size() - i; i++) {
			description.remove(i);
		}
		removeIndex(description, "4");
		removeIndex(description, "2");
		removeIndex(description, "0");

		if (results1.size() > 0) {
			removeLastZero(results1, 5);
			removeLastZero(results1, 6);
			removeIndex(results1, "3");
			removeIndex(results1, "2");
			removeIndex(results1, "1");
			removeIndex(results1, "0");
							ElementContains1(cName, mName,extLogger,driver, description, results1);
		}
	}

	public void linkedchildArt(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results, int num, String ranArticle,WebDriver driver)
					throws IOException {
		List<List<Object>> description = null;
		waitFor(2);
		if (objEnhancedArticleLookup.childArtList.size() == 2) {
			description = getValuesFromTable(objEnhancedArticleLookup.childArtList);
			description.remove(1);
			removeIndex(description, "0");
		}
		if (description.get(0).get(0).toString()
				.equals(results.get(num).get(4).toString())) {
			htmlToExtent(cName,mName,extLogger,driver,"Parent article - "+ results.get(num).get(4).toString()+ " matched with backend data for child article "+ ranArticle + ";;;Pass");
			//Report_AddStep("testcase", "Parent article - "+ results.get(num).get(4).toString()+ " matched with backend data for child article "+ ranArticle + "", "", "", "Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Parent article - "+ results.get(num).get(4).toString()+ " mismatched with backend data for child article "+ ranArticle + ";;;Fail");
			//Report_AddStep("testcase", "Parent article - "+ results.get(num).get(4).toString()+ " mismatched with backend data for child article "+ ranArticle + "", "", "", "Pass");
		}
	}

	public void clickOnOrderEnquiry(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver)
					throws AWTException {
		// waitForJSandJQueryToLoad(driver);;
		waitFor(1);
		Point coordinates = objEnhancedArticleLookup.Orders.getLocation();
		Robot robot = new Robot();
		robot.mouseMove(coordinates.getX(), coordinates.getY() + 100);

		Actions action = new Actions(driver);
		action.moveToElement(objEnhancedArticleLookup.Orders).click().build()
		.perform();
		waitFor(1);

		Point coordinates1 = objEnhancedArticleLookup.orderEnquiry
				.getLocation();
		Robot robo1t = new Robot();
		robo1t.mouseMove(coordinates1.getX(), coordinates1.getY() + 100);

		Actions action2 = new Actions(driver);
		action2.moveToElement(objEnhancedArticleLookup.orderEnquiry).click()
		.build().perform();
		waitFor(1);
		robot.mouseMove(5, 5);
	}

	public void clickOnAddToDraft(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)
					throws AWTException {
		waitFor(1);
		Point coordinates = objEnhancedArticleLookup.addTo.getLocation();
		Robot robot = new Robot();
		robot.mouseMove(coordinates.getX(), coordinates.getY() + 100);

		Actions action = new Actions(driver);
		action.moveToElement(objEnhancedArticleLookup.addTo).click().build()
		.perform();
		waitFor(1);

		WebElement element = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.addToclick, i,driver);
		Point coordinates1 = element.getLocation();
		Robot robo1t = new Robot();
		robo1t.mouseMove(coordinates1.getX(), coordinates1.getY() + 100);

		Actions action2 = new Actions(driver);
		action2.moveToElement(element).click().build().perform();
		waitFor(1);
		robot.mouseMove(5, 5);
	}

	public void clickOnAddToDraft1(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)
					throws AWTException {
		waitFor(1);
		Point coordinates = objEnhancedArticleLookup.addTo.getLocation();
		Robot robot = new Robot();
		robot.mouseMove(coordinates.getX(), coordinates.getY() + 100);

		Actions action = new Actions(driver);
		action.moveToElement(objEnhancedArticleLookup.addTo).click().build()
		.perform();
		waitFor(1);

		WebElement element = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.addToclick1, i,driver);
		Point coordinates1 = element.getLocation();
		Robot robo1t = new Robot();
		robo1t.mouseMove(coordinates1.getX(), coordinates1.getY() + 100);

		Actions action2 = new Actions(driver);
		action2.moveToElement(element).click().build().perform();
		waitFor(1);
		robot.mouseMove(5, 5);
	}

	
	public void draftDisplayPromotion(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws IOException, AWTException
	{
		htmlToExtent(cName,mName,extLogger,driver,"****Display promotion****;;;Pass");
		//	Report_AddStep("testcase", "****Display promotion****", "", "", "");
		scrollUp(driver);
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		enterArt(objEnhancedArticleLookup, ranArticle,driver);
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
			//Report_AddStep("testcase","Article not found" , "", "", "Fail");
			objEnhancedArticleLookup.articleNtFoundclose.click();
		}
		else
		{
			List applcheck = new ArrayList();
			List appl = new ArrayList();
			List<List<Object>> applcheckList = new ArrayList<List<Object>>();
			List<List<Object>> applList = new ArrayList<List<Object>>();
			String[] art = splitString(getText(objEnhancedArticleLookup.article)," - ");
			appl.add(art[0]);
			appl.add(art[1]);
			appl.add(getText(objEnhancedArticleLookup.unitInfo_uom));
			applList.add(appl);
			clickOnAddToDraft1(objEnhancedArticleLookup, 1,driver);
			objEnhancedArticleLookup.viewList.click();
			for (int j = 3; j <= 5; j++) 
			{
				WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.viewListvalue, j,driver);
				applcheck.add(elements.getText());
			}
			objEnhancedArticleLookup.killdispdraft.click();
			objEnhancedArticleLookup.kill.click();
			waitFor(1);
			applcheckList.add(appl);
							ElementContains1(cName, mName,extLogger,driver, applcheckList, applList);
		}
	}

	public void draftFn(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws AWTException, IOException {
		int k = 0;
		int l = 0;
		for (int i = 2; i <= 6; i++) {
			clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			List applcheck = new ArrayList();
			List appl = new ArrayList();
			List<List<Object>> applcheckList = new ArrayList<List<Object>>();
			List<List<Object>> applList = new ArrayList<List<Object>>();
			String val = "";
			String[] art = splitString(
					getText(objEnhancedArticleLookup.article), " - ");
			appl.add(art[0]);
			appl.add(art[1]);
			appl.add(getText(objEnhancedArticleLookup.unitInfo_uom));
			if (i == 4) {
				val = "Advertised";
			}
			if (i == 5) {
				val = "Special Activity";
			}
			if (i == 6) {
				val = "Local Marketing";
			}
			if (i == 2) {
				htmlToExtent(cName,mName,extLogger,driver,"****clearance promotion****;;;Pass");
				//Report_AddStep("testcase", "****clearance promotion****", "",						"", "");
			} else if (i == 3) {
				htmlToExtent(cName,mName,extLogger,driver,"****competition promotion****;;;Pass");
				//Report_AddStep("testcase", "****competition promotion****", "",						"", "");
			} else {
				htmlToExtent(cName,mName,extLogger,driver,"****" + val + " promotion****;;;Pass");
				//Report_AddStep("testcase", "****" + val + " promotion****", "",						"", "");
			}
			appl.add(val);
			applList.add(appl);
			clickOnAddToDraft(objEnhancedArticleLookup, i,driver);
			waitFor(1);
			if (i == 2) {
				k = 12;
				l = 15;
			}
			if (i == 3) {
				k = 13;
				l = 17;
			}
			if ((i == 4) || (i == 5) || (i == 6)) {
				k = 14;
				l = 19;
			}
			WebElement element = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.viewToList, k,driver);
			element.click();
			waitFor(0.5);
			for (int j = 3; j <= 5; j++) {
				WebElement elements = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.viewToListvalue, j,driver);
				applcheck.add(elements.getText());
			}
			String centerval = getText(objEnhancedArticleLookup.centervalue);
			if (centerval.equals("Draft")) {
				applcheck.add("");
			} else {
				applcheck.add(centerval);
			}
			WebElement ele = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.killarticle, l,driver);
			ele.click();
			objEnhancedArticleLookup.kill.click();
			waitForJSandJQueryToLoad(driver);
			waitFor(1);
			applcheckList.add(appl);
							ElementContains1(cName, mName,extLogger,driver, applcheckList, applList);
		}
	}

	public List<List<Object>> replinshmentDetail(String article,EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws AWTException, IOException 
	{
		htmlToExtent(cName,mName,extLogger,driver,"The below details is for articles "+ranArticle+";;;Pass");
		//Report_AddStep("testcase","The below details is for articles "+ranArticle+"" , "", "", "");
		waitFor(1);
		List appl = new ArrayList();
		List<List<Object>> applList = new ArrayList<List<Object>>();
		switch(article)
		{
		case "first":
		enterArt(objEnhancedArticleLookup, ranArticle,driver);
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
			//Report_AddStep("testcase","Article not found" , "", "", "Fail");
			objEnhancedArticleLookup.articleNtFoundclose.click();
			waitFor(1);
		}
		else
		{
		waitFor(1);
		verticalScroll(driver);
		for (int i = 1; i <= 3; i++) 
		{
			if(i==2){}else{
			WebElement ele = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.replinisment, i, 2,driver);
			String value = ele.getText();
			if(value.equals(""))
			{
				ele = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.replinisment, i, 2,driver);
			}
			if (value.contains("/")) 
			{
				String[] val = splitString(value, "/");
				value = val[1] + "/" + val[0] + "/" + val[2];
			}
			appl.add(value);}
		}
		applList.add(appl);
		}
		break;
		case "second":
		scrollUp(driver);
		waitFor(1);
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		waitFor(1);
		enterArt(objEnhancedArticleLookup, ranArticle,driver);
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
			//Report_AddStep("testcase","Article not found" , "", "", "Fail");
			objEnhancedArticleLookup.articleNtFoundclose.click();
		}
		else
		{
		waitFor(1);
		verticalScroll(driver);
		for (int i = 1; i <= 3; i++) 
		{
			WebElement ele = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.replinisment, i, 4,driver);
			String value = ele.getText();
			if ((i == 2) || (i == 3)) 
			{
				String[] a = splitString(value, " ");
				appl.add(decimalFormat(a[0]) + " " + a[1]);
			} 
			else 
			{
				appl.add(value);
			}
		}
		applList.add(appl);
		}
		break;
		case "third":
		scrollUp(driver);
		waitFor(1);
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		waitFor(1);
		enterArt(objEnhancedArticleLookup, ranArticle,driver);
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
			//Report_AddStep("testcase","Article not found" , "", "", "Fail");
			objEnhancedArticleLookup.articleNtFoundclose.click();
		}
		else
		{
		waitFor(1);
		verticalScroll(driver);
		for (int i = 4; i <= 5; i++) 
		{
			WebElement ele = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.replinisment, i, 2,driver);
			String value = ele.getText();
			appl.add(value);
		}
		applList.add(appl);
		}
		break;
		case "fourth":
			scrollUp(driver);
			waitFor(1);
			clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			waitFor(1);
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase","Article not found" , "", "", "Fail");
				objEnhancedArticleLookup.articleNtFoundclose.click();
			}
			else
			{
			waitFor(1);
			verticalScroll(driver);
			WebElement ele = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.replinisment, 4, 4,driver);
			String value = ele.getText();
			appl.add(value);
			applList.add(appl);
			}
			break;
		}
		return applList;
	}

	public void draftOrderFn(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws AWTException, IOException 
	{
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		enterArt(objEnhancedArticleLookup, ranArticle,driver);
		htmlToExtent(cName,mName,extLogger,driver,"****Draft Order****;;;Pass");
		//Report_AddStep("testcase", "****Draft Order****", "", "", "");
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
			//Report_AddStep("testcase","Article not found" , "", "", "Fail");
			objEnhancedArticleLookup.articleNtFoundclose.click();
		}
		else
		{	
		List applcheck = new ArrayList();
		List appl = new ArrayList();
		List<List<Object>> applcheckList = new ArrayList<List<Object>>();
		List<List<Object>> applList = new ArrayList<List<Object>>();
		String[] arti = splitString(getText(objEnhancedArticleLookup.article),
				" - ");
		String[] SOH = splitString(getText(objEnhancedArticleLookup.SOH), " ");
		clickOnAddToDraft(objEnhancedArticleLookup, 1,driver);
		int y = (random_no(7)) + 1;
		int k = (Integer.parseInt(getText(objEnhancedArticleLookup.OM))) * y;
		enterText(objEnhancedArticleLookup.orderQty, "" + y,driver);
		if (k == (Integer.parseInt(decimalFormat(getText(objEnhancedArticleLookup.totalUint))))) 
		{
			htmlToExtent(cName,mName,extLogger,driver,"Total Units displayed is correct;;;Pass");
			//Report_AddStep("testcase", "Total Units displayed is correct", "","", "Pass");
		} 
		else 
		{
			htmlToExtent(cName,mName,extLogger,driver,"Total Units displayed is incorrect;;;Fail");
			//Report_AddStep("testcase", "Total Units displayed is incorrect","", "", "Fail");
		}
		appl.add(arti[0]);
		appl.add(arti[1]);
		appl.add(SOH[0]);
		appl.add(y + " " + getText(objEnhancedArticleLookup.orderUOM));
		appl.add(getText(objEnhancedArticleLookup.OM));
		appl.add(decimalFormat(getText(objEnhancedArticleLookup.totalUint))+ " " + (objEnhancedArticleLookup.totalUOM.getText()));
		applList.add(appl);
		objEnhancedArticleLookup.clickonAdd.click();
		waitForJSandJQueryToLoad(driver);;
		if (getText(objEnhancedArticleLookup.sucmsgMPLSC).equals(
				"You can access draft order from Orders menu.")) {
			htmlToExtent(cName,mName,extLogger,driver,"Order Quantity added succesfully, now you can access draft order from Orders menu.;;;Pass");
			//Report_AddStep("testcase","Order Quantity added succesfully, now you can access draft order from Orders menu.","", "", "Pass");
			objEnhancedArticleLookup.close.click();
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Order Quantity not added;;;Fail");
			//Report_AddStep("testcase", "Order Quantity not added succesfully",					"", "", "Fail");
			objEnhancedArticleLookup.close.click();
		}
		clickOnOrderEnquiry(objEnhancedArticleLookup,driver);
		waitForJSandJQueryToLoad(driver);;
		objEnhancedArticleLookup.createOrder.click();
		waitFor(1);
		objEnhancedArticleLookup.expand.click();
		verticalScroll(driver);
		List<List<Object>> orderDetail = getValuesFromTable(objEnhancedArticleLookup.OrderDetail);
		applcheck.add(orderDetail.get(0).get(1));
		applcheck.add(orderDetail.get(0).get(2));
		applcheck.add(orderDetail.get(0).get(3));
		applcheck.add(objEnhancedArticleLookup.OMvalue.getAttribute("value")+ " " + orderDetail.get(0).get(4));
		String[] om = splitString(orderDetail.get(0).get(6).toString(), " ");
		applcheck.add(om[0]);
		applcheck.add(orderDetail.get(0).get(7));
		applcheckList.add(applcheck);
						ElementContains1(cName, mName,extLogger,driver, applList, applcheckList);
		htmlToExtent(cName,mName,extLogger,driver,"" + arti[0] + " has delivery date - "+ objEnhancedArticleLookup.date.getAttribute("value")+ " with status - "+ getText(objEnhancedArticleLookup.status) + ";;;Pass");
		//Report_AddStep("testcase","Article - " + arti[0] + " has delivery date - "+ objEnhancedArticleLookup.date.getAttribute("value")+ " with status - "+ getText(objEnhancedArticleLookup.status) + "", "","", "Pass");
		objEnhancedArticleLookup.killdraft.click();
		objEnhancedArticleLookup.kill.click();
		htmlToExtent(cName,mName,extLogger,driver,"Draft detaills deleted;;;Pass");
		//Report_AddStep("testcase", "Draft detaills deleted","", "", "");
		}
	}

	public void pluCheck(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String totalPLU, String ranArticle, String art,WebDriver driver) throws IOException {
		if (Integer.parseInt(totalPLU)>=2) {
			htmlToExtent(cName,mName,extLogger,driver,""+totalPLU+" records found for PLU code "+ ranArticle + ";;;Pass");
			//RReport_AddStep("testcase", "2 records found for PLU code "+ ranArticle + "", "", "", "Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"only 1 record found for PLU code " + ranArticle + ";;;Fail");
			//RReport_AddStep("testcase", ""+ getText(objEnhancedArticleLookup.totalcount)+ " records found for PLU code " + ranArticle + "", "", "","Fail");
		}
		String arti = objEnhancedArticleLookup.article.getText();
		String PLU = objEnhancedArticleLookup.unitInfo_PLU.getText();
		if ((arti.contains(art)) && (PLU.equals(ranArticle))) {
			htmlToExtent(cName,mName,extLogger,driver,"Article - " + art + " and PLU code - "+ ranArticle + " matched with backend data;;;Pass");
			//RReport_AddStep("testcase", "Article - " + art + " and PLU code - "+ ranArticle + " matched with backend data", "", "", "Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Article - " + art + " and PLU code - "+ ranArticle + " mismatched with backend data;;;Fail");
			//RReport_AddStep("testcase", "Article - " + art + " and PLU code - "+ ranArticle + " mismatched with backend data", "", "","Fail");
		}
	}

	public List<List<Object>> ooc(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver)
					throws AWTException, IOException, NumberFormatException,
					ParseException {
		String art = null;
		String desc = null;
		String numb = null;
		List<List<Object>> allticket = null;

		int v = objEnhancedArticleLookup.check4.size();
		for (int j = 1; j <= v; j++) {
			if (j != 1) {
				WebElement element = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.chec56, j,driver);
				element.click();
				waitFor(1);
			}
			int u = objEnhancedArticleLookup.check2.size();
			u = u - 2;
			for (int i = 1; i <= u; i++) {
				if (i != 1) {
					WebElement elements = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.chec, i,driver);
					elements.click();
					waitFor(1);
				}
				allticket = getValuesFromTable(objEnhancedArticleLookup.check1);
				//System.out.println(allticket);
				Report_AddStep(
						"testcase",
						"The below details is about article, description,Stock on hand",
						"", "", "");
				fn(allticket, art, desc, numb,driver);
			}
		}

		return allticket;

	}

	public void fn(List<List<Object>> allticket, String art, String desc,
			String numb,WebDriver driver) throws IOException {
		for (Iterator<List<Object>> it = allticket.iterator(); it.hasNext();) {
			List<Object> elem = it.next();

			for (int i = 0; i < elem.size(); i++) {
				if (i == 0) {
					art = (String) elem.get(i);
				}
				if (i == 1) {
					desc = (String) elem.get(i);
				}
				if (i == 2) {
					numb = (String) elem.get(i);
				}
			}
			if (art.equals("Aisle NO AISLE")) {

			} else {
				
				Report_AddStep("testcase", "The details are " + art + ","+ desc + "," + numb + "", "", "", "");
			}

		}
	}

	public String clickdept(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String dept_name, String cat_name, String text,WebDriver driver) 
	{
		int deptsize = objEnhancedArticleLookup.department.size();
		for (int i = 1; i <= deptsize; i++) 
		{
			WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.departmentlist, i,driver);
			String dept_name_appl = element.getText();
			if (dept_name.equals(dept_name_appl))
			{
				verticalinternalscroll(element,driver);
				element.click();
			}
		}
		int catsize = objEnhancedArticleLookup.category.size();
		for (int i = 1; i <= catsize; i++)
		{
			WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.categorylist, i,driver);
			String cat_name_appl = element.getText();
			if (cat_name.equals(cat_name_appl)) 
			{
				verticalinternalscroll(element,driver);
				element.click();
			}
		}
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		objEnhancedArticleLookup.searchText.sendKeys(text);
		objEnhancedArticleLookup.smartsearch.click();
		waitFn(driver);
		waitFor(1);
		String art="";
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
			//Report_AddStep("testcase","Article not found" , "", "", "Fail");
			objEnhancedArticleLookup.articleNtFoundclose.click();
		}
		else
		{	
		art = objEnhancedArticleLookup.article.getText();
		String[] article = art.split(" -");
		art = article[0];}
		return art;
	}

	public void supplierInfocheck(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String uom_db, List DBList, String art,WebDriver driver) throws IOException 
	{
		htmlToExtent(cName,mName,extLogger,driver,"Supplier Information for article - " + art+ ";;;Pass");
		//Report_AddStep("testcase", "Supplier Information for article - " + art+ "", "", "", "");
		List appln = new ArrayList();
		List<List<Object>> appllist = new ArrayList<List<Object>>();
		List a = new ArrayList();
		String uom_UI = getText(objEnhancedArticleLookup.unitInfo_uom);
		String uom_SI = getText(objEnhancedArticleLookup.suppInfo_UOM);
		String uomval_SI = "";
		if (uom_SI.contains(" ")) 
		{
			String[] uom = splitString(uom_SI, " ");
			uom_SI = uom[1];
			uomval_SI = uom[0];
		} 
		else 
		{
		}
		int sze = objEnhancedArticleLookup.UOMList.size();
		for (int i = 1; i <= sze; i++) 
		{
			WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMval, i,driver);
			String UOMval = element.getText();
			a.add(UOMval);
		}
		if ((uom_UI.equals(uom_SI)) && (uom_UI.equals(uom_db))) 
		{
			for (int i = 1; i <= sze; i++) 
			{
				if (uom_SI.equals(a.get(i - 1))) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM matches with backend and application;;;Pass");
					//Report_AddStep("testcase","UOM matches with backend and application", "", "","Pass");
				} 
				else 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM mismatches with replinishment and supplier info data;;;Fail");
					//Report_AddStep("testcase","UOM mismatches with replinishment and supplier info data","", "", "Fail");
				}
			}
		} 
		else 
		{
			htmlToExtent(cName,mName,extLogger,driver,"UOM mismatches with backend/application;;;Fail");
			//Report_AddStep("testcase","UOM mismatches with backend/application", "", "", "Fail");
		}
		String source = getText(objEnhancedArticleLookup.SI_source);
		htmlToExtent(cName,mName,extLogger,driver,"Comapring supplier info for source - "+source+"  with backend;;;Pass");
		if (source.equals("Warehouse"))
		{
			source = "2";
		} 
		else if (source.equals("Vendor"))
		{
			source = "1";
		}
		appln.add(uomval_SI);
		appln.add(source);
		appln.add(getText(objEnhancedArticleLookup.SI_supplierno));
		appln.add(getText(objEnhancedArticleLookup.SI_suppliername));
		appllist.add(appln);		
		replacenullToZero(appllist);replacenullToZero(DBList);
						ElementContains1(cName, mName,extLogger,driver, appllist, DBList);
	}

	public void smartchecker(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,WebDriver driver) throws IOException
	{
		List DB = new ArrayList();
		List<List<Object>> DBList = new ArrayList<List<Object>>();
		for (int i = 0; i <= 3; i++)
		{
			DB.add(results.get(0).get(i).toString());
		}
		DBList.add(DB);
		List appln = new ArrayList();
		List<List<Object>> applnList = new ArrayList<List<Object>>();
		for (int i = 1; i <= 4; i++)
		{
			WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.hierachylist, i,driver);
			String s = elements.getText();
			appln.add(s);
		}
		applnList.add(appln);
						ElementContains1(cName, mName,extLogger,driver, applnList, DBList);
	}

	
	public List<List<Object>> freshfood(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String number,WebDriver driver) throws IOException, AWTException, SQLException
	{
		List app = new ArrayList();
		List<List<Object>> appList = new ArrayList<List<Object>>();
		List DB = new ArrayList();
		List<List<Object>> DBList = new ArrayList<List<Object>>();
		String ranArticle="";
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			articleValidation(objEnhancedArticleLookup, ranArticle,driver);
			String fftab = getText(objEnhancedArticleLookup.freshfoodTab);
			if(fftab.equals("Fresh Food"))
			{
				switch (number)
				{
				case "one":
					String ff = getText(objEnhancedArticleLookup.freshfood);
					if(ff.equals("Fresh Food Item Flag:"))
					{
						String freshFoodflag = getText(objEnhancedArticleLookup.freshfoodflag);
						if(freshFoodflag.equals("Y"))
						{
							htmlToExtent(cName,mName,extLogger,driver,"Fresh food article - "+ranArticle+", validation - success;;;Pass");
							//Report_AddStep("testcase","Fresh food article - "+ranArticle+", validation - success" , "", "", "Pass");
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Fresh food article - "+ranArticle+", validation - failure;;;Fail");
							//Report_AddStep("testcase","Fresh food - "+ranArticle+", validation - failure" , "", "", "Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Fresh food flag not available in application for article- "+ranArticle+";;;Fail");
						//Report_AddStep("testcase","Fresh food flag not available in application for article- "+ranArticle+"" , "", "", "Fail");
					}
				break;
			case "two":
				WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,1,2,driver);
				app.add(elements.getText());
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,2,2,driver);
				app.add(elements.getText());
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,5,2,driver);
				String a = elements.getText();
				if(a.equals(""))
				{
					a="0";
				}
				app.add(a); 
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,4,4,driver);
				app.add(elements.getText());
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,5,4,driver);
				app.add(elements.getText());
				appList.add(app);
				removeExtraSpaces(results, 2);
				DB.add(results.get(num).get(1).toString());
				DB.add(results.get(num).get(2).toString());
				DB.add(results.get(num).get(3).toString());
				DB.add(results.get(num).get(4).toString());
				DB.add(results.get(num).get(5).toString());
				DBList.add(DB);
				htmlToExtent(cName,mName,extLogger,driver,"Below Deails is for Label Description,Label Format,shelf life,counter weighed flag for article- "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Below Deails is for Label Description,Label Format,shelf life,counter weighed flag for article- "+ranArticle+"","", "", "");
								ElementContains1(cName, mName,extLogger,driver, appList, DBList);
				break;
			case "three":
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,4,2,driver);
				app.add(elements.getText()); 
				appList.add(app);
				DB.add(results.get(num).get(1).toString());
				DBList.add(DB);
				htmlToExtent(cName,mName,extLogger,driver,"Below Deails is for Use by Days for article- "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Below Deails is for Use by Days for article- "+ranArticle+"","", "", "");
								ElementContains1(cName, mName,extLogger,driver, appList, DBList);
				break;
			case "four":
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,3,2,driver);
				app.add(elements.getText()); 
				appList.add(app);
				DB.add(results.get(num).get(2).toString());
				DBList.add(DB);
				htmlToExtent(cName,mName,extLogger,driver,"Below Deails is for Best before days for article- "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Below Deails is for Best before days for article- "+ranArticle+"","", "", "");
								ElementContains1(cName, mName,extLogger,driver, appList, DBList);
				break;
			case "five":
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,6,4,driver);
				a = elements.getText();
				if(a.equals(""))
				{
					a="0";
				}
				app.add(a); 
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,6,2,driver);
				a = elements.getText();
				if(a.equals(""))
				{
					a="0";
				}
				app.add(elements.getText()); 
				appList.add(app);
				DB.add(results.get(num).get(1).toString());
				DB.add(results.get(num).get(2).toString());
				DBList.add(DB);
				htmlToExtent(cName,mName,extLogger,driver,"Below Deails is for wrap tare and tray no for article- "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Below Deails is for wrap tare and tray no for article- "+ranArticle+"","", "", "");
								ElementContains1(cName, mName,extLogger,driver,appList, DBList);
				break;
			case "six":
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,3,6,driver);
				app.add(elements.getText());
				elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.FFvalidations,4,6,driver);
				app.add(elements.getText()); 
				appList.add(app);
				String nuing_sql = testdata.getText("getffmandatorycheck").replace("artno", ranArticle); // nutrinal claim,serving size,origin country
				List<List<Object>> results_t = sql.executeQuery(getContext(), nuing_sql);
				replacenullToZero(results_t);
				removeIndex(results_t, "3");removeIndex(results_t, "0");
				//DB.add(results.get(num).get(1).toString());
				//DB.add(results.get(num).get(2).toString());
				DBList.add(DB);
				htmlToExtent(cName,mName,extLogger,driver,"Below Details is for Mandatory warning and Storage handling for article- "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Below Deails is for Mandatory warning and Storage handling for article- "+ranArticle+"","", "", "");
								ElementContains1(cName, mName,extLogger,driver, appList, results_t);
				break;
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Fresh food tab not available in application for article - "+ranArticle+";;;Fail");
				//Report_AddStep("testcase","Fresh food tab not available in application for article - "+ranArticle+"" , "", "", "Fail");
			}
			waitFor(2);
			scrollUp(driver);
			objEnhancedArticleLookup.backbutton.click();
			objEnhancedArticleLookup.searchText.clear();			
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to verify fresh food detils;;;Fail");
			//	Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
		return appList;
	}
	
	public void nutrition(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String number,WebDriver driver) throws IOException, AWTException, SQLException
	{
		String ranArticle="";
		List app = new ArrayList();
		List<List<Object>> appList = new ArrayList<List<Object>>();
		List DB = new ArrayList();
		List<List<Object>> DBList = new ArrayList<List<Object>>();
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver,"Below Details is for article- "+ranArticle+";;;Pass");
			clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			articleValidation(objEnhancedArticleLookup, ranArticle,driver);
			String fftab = getText(objEnhancedArticleLookup.nutrientTab);
			if(fftab.equals("Nutritional / Ingredients Info"))
			{
				objEnhancedArticleLookup.nutrientTab.click();
				waitFor(1);
				switch(number)
				{
				case "one":
					String nuing_sql = testdata.getText("origincheck").replace("artno", ranArticle); // nutrinal claim,serving size,origin country
					List<List<Object>> results_t = sql.executeQuery(getContext(), nuing_sql);
					replacenullToZero(results_t);
					WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.nutriValidations,1,2,driver);
					app.add(elements.getText());
					nuing_sql = testdata.getText("servingSize").replace("artno", ranArticle).replace("desc", elements.getText().trim()); // nutrinal claim,serving size,origin country
					List<List<Object>> results_d = sql.executeQuery(getContext(), nuing_sql);
					replacenullToZero(results_d);
					if(results_d.size()!=0)
					{
						DB.add(results_d.get(0).get(1).toString());
						DB.add(results_d.get(0).get(2).toString());
					}else{
						DB.add(results.get(num).get(1).toString());
						DB.add(results.get(num).get(2).toString());
					}
					elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.nutriValidations,1,4,driver);
					app.add(elements.getText());
					elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.nutriValidations,4,2,driver);
					String n = elements.getText();if(n.equals("")){n="0";}
					app.add(n);
					appList.add(app);
					/*DB.add(results_d.get(0).get(1).toString());
					DB.add(results_d.get(0).get(2).toString());*/
					DB.add(results_t.get(0).get(0).toString());
					DBList.add(DB);
					htmlToExtent(cName,mName,extLogger,driver,"Below Details is for Nutrition claim,serving size,Origin Country for article- "+ranArticle+";;;Pass");
					//("testcase","Below Deails is for Nutrition claim,serving size,Origin Country for article- "+ranArticle+"","", "", "");
					//				ElementContains1(cName, mName,extLogger,driver, appList, DBList);
					removeExtraSpaces(DBList, 2);
									ElementContains1(cName, mName,extLogger,driver, appList, DBList);
					artIndicatorPrintAndEmail(objEnhancedArticleLookup, "Nutritional / Ingredients Info",driver);
					break;
				case "two":
					elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.nutriValidations,2,2,driver);
					app.add(elements.getText());
					appList.add(app);
					DB.add(results.get(num).get(3).toString());
					DBList.add(DB);
					htmlToExtent(cName,mName,extLogger,driver,"Below Details is for Approval status for article- "+ranArticle+";;;Pass");
					//Report_AddStep("testcase","Below Deails is for Approval status for article- "+ranArticle+"","", "", "");
									ElementContains1(cName, mName,extLogger,driver,appList, DBList);
					break;
				case "three":
					elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.nutriValidations,2,6,driver);
					app.add(elements.getText());
					appList.add(app);
					String  y = results.get(num).get(1).toString();
					if(y.contains("."))
					{
						y = y.replaceAll("\\.?0+$","");
					}
					DB.add(y);
					DBList.add(DB);
					htmlToExtent(cName,mName,extLogger,driver,"Below Details is for serving per pack size for article- "+ranArticle+";;;Pass");
					//Report_AddStep("testcase","Below Deails is for serving per pack size for article- "+ranArticle+"","", "", "");
									ElementContains1(cName, mName,extLogger,driver, appList, DBList);
					break;
				}
			}
			waitFor(2);
			scrollUp(driver);
			objEnhancedArticleLookup.backbutton.click();
			objEnhancedArticleLookup.searchText.clear();
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to verify nutritional info;;;Fail");
			//Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
	}
	
	public void artIndicatorPrintAndEmail(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String name,WebDriver driver) throws IOException
	{
		if(objEnhancedArticleLookup.email.isDisplayed())
		{
			objEnhancedArticleLookup.email.click();
			htmlToExtent(cName,mName,extLogger,driver,"Email button is clickable for "+name+";;;Pass");
			//Report_AddStep("testcase","Email button is clickable for "+name+"","", "", "Pass");
			if(objEnhancedArticleLookup.emailpopper.size()==1)			
			{
				htmlToExtent(cName,mName,extLogger,driver,"Email popper is displayed for "+name+";;;Pass");
				//Report_AddStep("testcase","Email popper is displayed for "+name+"","", "", "Pass");
				waitFor(1);
				objEnhancedArticleLookup.enterEmail.click();
				objEnhancedArticleLookup.enterEmail.clear();
				objEnhancedArticleLookup.enterEmail.sendKeys("mmallikarjunanwoolworths.com.au");
				objEnhancedArticleLookup.emailSend.click();
				if(objEnhancedArticleLookup.errormsgGP.isDisplayed())
				{
					if(objEnhancedArticleLookup.errormsg.getText().equals("Please Enter Valid Email ID"))
					{
						objEnhancedArticleLookup.errorcancelMPLSCtab.click();
						waitFor(1);
						htmlToExtent(cName,mName,extLogger,driver,"Email validation is displayed for wrong mail id for "+name+";;;Pass");
						//Report_AddStep("testcase","Email validation is displayed for wrong mail id for "+name+"","", "", "Pass");
						if(objEnhancedArticleLookup.emailCancel.isDisplayed())
						{
							objEnhancedArticleLookup.emailCancel.click();
							htmlToExtent(cName,mName,extLogger,driver,"Cancelled email for "+name+";;;Pass");
							//Report_AddStep("testcase","Cancelled email for "+name+"","", "", "Pass");
							waitFor(1);
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Cannot Cancel email for "+name+";;;Fail");
							//Report_AddStep("testcase","Cannot Cancel email for "+name+"","", "", "Fail");
						}
						objEnhancedArticleLookup.email.click();;
						objEnhancedArticleLookup.enterEmail.click();
						objEnhancedArticleLookup.enterEmail.clear();
						objEnhancedArticleLookup.enterEmail.sendKeys("mmallikarjunan@woolworths.com.au");
						objEnhancedArticleLookup.emailSend.click();
						waitFor(1);
						if(objEnhancedArticleLookup.sucess.isDisplayed())
						{
							waitFor(1);
							if(objEnhancedArticleLookup.sucess.getText().equals("EMail sent successfully."))
							{
								htmlToExtent(cName,mName,extLogger,driver,"Email sent sucessfully is displayed for "+name+";;;Pass");
								//Report_AddStep("testcase","Email sent sucessfully is displayed for "+name+"","", "", "Pass");
								waitFor(1);
								objEnhancedArticleLookup.closesuccross.click();
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver,"Email not sent sucessfully is displayed for "+name+";;;Fail");
								//Report_AddStep("testcase","Email not sent sucessfully is displayed for "+name+"","", "", "Fail");	
							}
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Email validation is not displayed for wrong mail id for "+name+";;;Fail");
						//Report_AddStep("testcase","Email validation is not displayed for wrong mail id for "+name+"","", "", "Fail");
					}
				}				
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Email popper is not displayed for "+name+";;;Fail");
				//Report_AddStep("testcase","Email popper is not displayed for "+name+"","", "", "Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Email button is not clickable for "+name+";;;Fail");
			//Report_AddStep("testcase","Email button is not clickable for "+name+"","", "", "Fail");
		}
		if(objEnhancedArticleLookup.printbutton.isDisplayed())
		{
			htmlToExtent(cName,mName,extLogger,driver,"Print button is available for "+name+";;;Pass");
			//Report_AddStep("testcase","Print button is available for "+name+"","", "", "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Print button is not available for "+name+";;;Fail");
			//	Report_AddStep("testcase","Print button is not available for "+name+"","", "", "Fail");
		}
	}
	
	public List<List<Object>> getValuesFromTables(List<WebElement> objectTable) { 
		List<List<Object>> tableValues = new ArrayList<List<Object>>();
		List<Object> row = null;
		List<WebElement> tr_collection = objectTable;
		int row_Count = objectTable.size();
		System.out.println("Number Of Rows = " + row_Count);
		int row_num,col_num;
        row_num=1;
        for(WebElement trElement : tr_collection)
        {
            List<WebElement> td_collection=trElement.findElements(By.xpath("td"));
            System.out.println("NUMBER OF COLUMNS="+td_collection.size());
	            col_num=0;
	            row = new ArrayList<>(td_collection.size());
	            for(WebElement tdElement : td_collection)
	            {
	            	
	            	//System.out.println("row # "+row_num+", col # "+col_num+ "text="+tdElement.getText());
	            	row.add(tdElement.getText());	            	
					col_num++;
				}
	            
	            tableValues.add(row);
            row_num++;
        }

        for(int i=tableValues.size()-1;i>=0;i--)
        {
        	if(tableValues.get(i).isEmpty())
        	{
        		tableValues.remove(i);
        	}
        }
        return tableValues;
	}
	
	public void offersAndPromotion(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String ranArticle,
			String promo,String name,WebDriver driver,String check) throws AWTException, IOException, ParseException
	{
		/*waitFor(1);
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);*/
		waitFor(1);
		htmlToExtent(cName,mName,extLogger,driver,"The below details is for "+name+" article "+ranArticle+";;;Info");
		enterArt(objEnhancedArticleLookup, ranArticle,driver);
		verticalScroll(driver);
		objEnhancedArticleLookup.offerPromo.click();
		waitForJSandJQueryToLoad(driver);;
		switch (promo)
		{
		case "Active":
		if(objEnhancedArticleLookup.activePromo.size()>0)
		{
			htmlToExtent(cName,mName,extLogger,driver,"Comparing Active promotions with backend for "+ranArticle+";;;Pass");
			//Report_AddStep("testcase","Comparing Active promotions with backend for "+ranArticle+"","", "", "");
			int PagSize = (objEnhancedArticleLookup.currentPromoPagList.size());
			if(PagSize==0){PagSize=3;}
			List dates = new ArrayList();
			for(int i=2;i<PagSize;i++)
			{
				if(i!=2)
				{
					WebElement date = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currentPromoPag,i,driver);
					date.click();
				}
				List<List<Object>> application = getValuesFromTables(objEnhancedArticleLookup.activePromo);
				//application.remove(0);
				List al = new ArrayList();
				for(int j=0;j<application.size();j++)
				{
					al.add(application.get(j).get(0).toString());
				}
				java.util.HashSet<String> hs = new java.util.HashSet<>();
				hs.addAll(al);
				al.clear();
				al.addAll(hs);
				if(((al.contains("In-Store"))||(al.contains("Central")))&&((al.size()==1)||(al.size()==2)))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Active promotions has either In-Store/Central promotion;;;Pass");
					//Report_AddStep("testcase","Active promotions has either In-Store/Central promotion" , "", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Active promotions have neither In-Store/Central promotion;;;Fail");
					//Report_AddStep("testcase","Active promotions have neither In-Store/Central promotion" , "", "", "Fail");
				}
				removeIndex(application, "7");
				removeIndex(application, "0");
				if((results.size()==0) && (application.size()!=0))
				{
					htmlToExtent(cName,mName,extLogger,driver,"DB does not have promotion details but Application has promotion details for article - "+ranArticle+";;;Fail");
				}
				else
				{
					removeLastZero(results, 5); removeLastZero(application, 5);
					if(name.equals("CPBD"))
					{
						replaceCPBDuom(application, 4);		
						ElementContains1(cName, mName,extLogger,driver,results,application);
					}else{}
					ElementContains1(cName, mName,extLogger,driver,application,results);
				}
				//				ElementContains1(cName, mName,extLogger,driver, application, results);
			}
		}
		else if(results.size()==0)
		{
			htmlToExtent(cName,mName,extLogger,driver,"Active promotions is not present in application;;;Pass");
			//Report_AddStep("testcase","Active promotions is not present in application" , "", "", "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Active promotions is not present in application;;;Fail");
			//Report_AddStep("testcase","Active promotions is not present in application" , "", "", "Fail");
		}
		//clear(objEnhancedArticleLookup);
		break;
		case "Future":
		waitFor(1);
		objEnhancedArticleLookup.FuturePromoTab.click();
		if(objEnhancedArticleLookup.futurePromo.size()>0)
		{			
			waitFor(1);
			htmlToExtent(cName,mName,extLogger,driver,"Comparing Future promotions with backend for "+ranArticle+";;;Pass");
			//Report_AddStep("testcase","Comparing Past promotions with backend for "+ranArticle+"","", "", "");
			int PagSize = (objEnhancedArticleLookup.FutPromoPagList.size());
			if(PagSize==0){PagSize=3;}
			List dates = new ArrayList();
			for(int i=2;i<PagSize;i++)
			{
				if(i!=2)
				{
					WebElement date = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.FutPromoPag,i,driver);
					date.click();
				}
				List<List<Object>> application = getValuesFromTables(objEnhancedArticleLookup.futurePromo);
				//application.remove(0);
				List al = new ArrayList();
				for(int j=0;j<application.size();j++)
				{
					al.add(application.get(j).get(0).toString());
				}
				java.util.HashSet<String> hs = new java.util.HashSet<>();
				hs.addAll(al);
				al.clear();
				al.addAll(hs);
				if(((al.contains("In-Store"))||(al.contains("Central")))&&((al.size()==1)||(al.size()==2)))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Future promotions has either In-Store/Central promotion;;;Pass");
					//Report_AddStep("testcase","Past promotions has either In-Store/Central promotion" , "", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Future promotions have neither In-Store/Central promotion;;;Fail");
					//Report_AddStep("testcase","Past promotions have neither In-Store/Central promotion" , "", "", "Fail");
				}		
				removeIndex(application, "7");
				removeIndex(application, "0");
				if((results.size()==0) && (application.size()!=0))
				{
					htmlToExtent(cName,mName,extLogger,driver,"DB does not have promotion details but Application has promotion details for article - "+ranArticle+";;;Fail");
				}
				else
				{
					//removeLastZero(results, 5);
					if(name.equals("CPBD"))
					{
						replaceCPBDuom(application, 4);		
						ElementContains1(cName, mName,extLogger,driver,results,application);
					}else{}
					ElementContains1(cName, mName,extLogger,driver,application,results);
				}
				//				ElementContains1(cName, mName,extLogger,driver, application, results);
			}
		}
		else if(results.size()==0)
		{
			htmlToExtent(cName,mName,extLogger,driver,"Future promotions is not present in application;;;Pass");
			//Report_AddStep("testcase","Past promotions is not present in application" , "", "", "Pass");
		}
		else
		{
			if(check.equals("avail")){
				htmlToExtent(cName,mName,extLogger,driver,"Future promotions is not present in application for article - "+ranArticle+";;;Fail");
			}else{
			htmlToExtent(cName,mName,extLogger,driver,"Future promotions is not present in application for article - "+ranArticle+";;;Pass");
			}//Report_AddStep("testcase","Past promotions is not present in application" , "", "", "Fail");
		}		
		//clear(objEnhancedArticleLookup);
		break;
		case "Past":
			waitFor(1);
			objEnhancedArticleLookup.PastPromoTab.click();
			if(objEnhancedArticleLookup.pastPromo.size()>0)
			{			
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,"Comparing Past promotions with backend for "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Comparing Past promotions with backend for "+ranArticle+"","", "", "");
				int PagSize = (objEnhancedArticleLookup.PastPromoPagList.size());
				if(PagSize==0){PagSize=3;}
				List dates = new ArrayList();
				for(int i=2;i<PagSize;i++)
				{
					if(i!=2)
					{
						WebElement date = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.PastPromoPag,i,driver);
						date.click();
					}
					List<List<Object>> application = getValuesFromTables(objEnhancedArticleLookup.pastPromo);
					//application.remove(0);
					List al = new ArrayList();
					for(int j=0;j<application.size();j++)
					{
						al.add(application.get(j).get(0).toString());
					}
					java.util.HashSet<String> hs = new java.util.HashSet<>();
					hs.addAll(al);
					al.clear();
					al.addAll(hs);
					if(((al.contains("In-Store"))||(al.contains("Central")))&&((al.size()==1)||(al.size()==2)))
					{
						htmlToExtent(cName,mName,extLogger,driver,"Past promotions has either In-Store/Central promotion;;;Pass");
						//Report_AddStep("testcase","Past promotions has either In-Store/Central promotion" , "", "", "Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Past promotions have neither In-Store/Central promotion;;;Fail");
						//Report_AddStep("testcase","Past promotions have neither In-Store/Central promotion" , "", "", "Fail");
					}
					removeIndex(application, "7");
					removeIndex(application, "0");
					
					LocalDate ctdate = getFormattedDate("dd/MM/yyyy", common.getCurrentDate());
					List<List<Object>> applications = getValuesFromTable(objEnhancedArticleLookup.pastPromo);
					applications.remove(0);
					int count = 0;
					dates = getIndex(applications, 2);
					LocalDate dtdate = null;
					for(int j=0;j<=dates.size()-1;j++)
					{
						String dat = dates.get(j).toString();
						//LocalDate promodate= getFormattedDate("dd/MM/yyyy", dat);
						String fifthdate = common.addDaystoCurrentDate(-16);
						LocalDate promodate= getFormattedDate("dd/MM/yyyy", dat);
						LocalDate promodate1= getFormattedDate("dd/MM/yyyy", fifthdate);
						if(j==0){dtdate = promodate;}
						if((promodate.isBefore(ctdate))&&((dtdate.equals(promodate))||(dtdate.isAfter(promodate)))&&(promodate.isAfter(promodate1)))
						//if((promodate.isBefore(ctdate))&&((dtdate.equals(promodate))||(dtdate.isAfter(promodate))))
						{
							dtdate = ctdate;
							count++;
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Start date is after or equal to current date for row "+j+";;;Fail");
							//Report_AddStep("testcase","Start date is after current date for row "+j+"" , "", "", "Fail");
						}
					}
					if(count==dates.size())
					{
						int pagno=i-1;
						htmlToExtent(cName,mName,extLogger,driver,"All Start date is before or equal current date for page "+pagno+" and also sorted earliest dates;;;Pass");
						//Report_AddStep("testcase","All Start date is before or equal current date for page "+pagno+"" , "", "", "Pass");
					}

					if((results.size()==0) && (application.size()!=0))
					{
						htmlToExtent(cName,mName,extLogger,driver,"DB does not have promotion details but Application has promotion details for article - "+ranArticle+";;;Fail");
					}
					else
					{
						removeLastZero(results, 5);removeLastZero(application, 5);
						if(name.equals("CPBD"))
						{
							replaceCPBDuom(application, 4);		
							ElementContains1(cName, mName,extLogger,driver,results,application);
						}else{}
						ElementContains1(cName, mName,extLogger,driver,application,results);
					}
					//				ElementContains1(cName, mName,extLogger,driver, application, results);
				}
			}
			else if(results.size()==0)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Past promotions is not present in application;;;Pass");
				//Report_AddStep("testcase","Past promotions is not present in application" , "", "", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Past promotions is not present in application;;;Fail");
				//Report_AddStep("testcase","Past promotions is not present in application" , "", "", "Fail");
			}
			//clear(objEnhancedArticleLookup);
			break;
		}
		waitForJSandJQueryToLoad(driver);
		waitFor(1);
		scrollUp(driver);
		waitFor(1);
	}
	
	public void SellandPromoPrice(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,List<List<Object>> results1,WebDriver driver) throws IOException
	{
		String ranArticle ="";
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			articleValidation(objEnhancedArticleLookup, ranArticle,driver);
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for article "+ranArticle+";;;Pass");
			//Report_AddStep("testcase","The below details is for article "+ranArticle+"","", "", "");
			waitFor(1);
			scrollUp(driver);
			
			int size = objEnhancedArticleLookup.stdPrice1.size();
			String stdPrice = objEnhancedArticleLookup.stdPrice.getText();
			
			String DB = results.get(num).get(1).toString();
			if(size==0)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Std sell price is not available in application;;;Fail");
				//Report_AddStep("testcase","Std sell price is not available in application","", "", "Fail");
			}
			else if((stdPrice.contains(DB))&&(size==1))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Std sell price is matched with details page header;"+stdPrice+";"+DB+";Pass");
				//Report_AddStep("testcase","Std sell price is matched with details page header",stdPrice, DB, "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Std sell price is mismatched with details page header;"+stdPrice+";"+DB+";Fail");
				//Report_AddStep("testcase","Std sell price is mismatched with details page header",stdPrice, DB, "Fail");
			}
			int sizee=objEnhancedArticleLookup.PromoSellPrice1.size();
			String promoPrice = objEnhancedArticleLookup.PromoSellPrice.getText();
			
			DB = results.get(num).get(2).toString();
			if(sizee==1&&!objEnhancedArticleLookup.PromoSellPrice.isDisplayed())
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is not available in application;;;Fail");
				//Report_AddStep("testcase","Promo sell price is not available in application","", "", "Fail");
			}
			else if((promoPrice.contains(DB))&&(sizee==1))
			//if((objEnhancedArticleLookup.PromoSellPrice.getText().contains(results.get(num).get(2).toString()))&&(objEnhancedArticleLookup.PromoSellPrice1.size()==1))
			{
				String date = objEnhancedArticleLookup.Dateheader.getText();
				if((date.contains(results.get(num).get(3).toString()))&&(date.contains(results.get(num).get(4).toString()))&&(date.contains(results.get(num).get(5).toString()))&&(date.contains(results.get(num).get(6).toString())))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Promo sell price,Start and End date is matched with details page header;;;Pass");
					//Report_AddStep("testcase","Promo sell price,Start and End date is matched with details page header","", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Start and End date is mismatched with details page header;;;Fail");
					//Report_AddStep("testcase","Start and End date is mismatched with details page header","", "", "Fail");
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is mismatched with details page header;;;Fail");
				//Report_AddStep("testcase","Promo sell price is mismatched with details page header","", "", "Fail");
			}
			waitFor(1);
			objEnhancedArticleLookup.backbutton.click();
			waitFor(1);	
			String DBsell = results.get(num).get(1).toString();
			if((objEnhancedArticleLookup.LandingSell.getText().contains(DBsell))&&(objEnhancedArticleLookup.stdPrice1.size()==1))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Std sell price is matched with Landing page;"+objEnhancedArticleLookup.LandingSell.getText()+";"+DBsell+";Pass");
				//Report_AddStep("testcase","Std sell price is matched with Landing page",objEnhancedArticleLookup.LandingSell.getText(), DBsell, "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Std sell price is mismatched with Landing page (OR) Std sell price is not available in application;"+objEnhancedArticleLookup.LandingSell.getText()+";"+DBsell+";Fail");
				//Report_AddStep("testcase","Std sell price is mismatched with Landing page (OR) Std sell price is not available in application",objEnhancedArticleLookup.LandingSell.getText(), DBsell, "Fail");
			}
			String DBpromo = results.get(num).get(2).toString();
			if((objEnhancedArticleLookup.LandingPromo.getText().contains(DBpromo))&&(objEnhancedArticleLookup.PromoSellPrice1.size()==1))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is matched with Landing page;"+objEnhancedArticleLookup.LandingPromo.getText()+";"+DBpromo+";Pass");
				//Report_AddStep("testcase","Promo sell price is matched with Landing page",objEnhancedArticleLookup.LandingPromo.getText(), DBpromo, "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is mismatched with Landing page (OR) Promo sell price is not available in application;"+objEnhancedArticleLookup.LandingPromo.getText()+";"+DBpromo+";Fail");
				//Report_AddStep("testcase","Promo sell price is mismatched with Landing page (OR) Promo sell price is not available in application",objEnhancedArticleLookup.LandingPromo.getText(), DBpromo, "Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to check sell and promo price;;;Fail");
			//Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
		waitFor(1);
		if(results1.size()!=0)
		{
			htmlToExtent(cName,mName,extLogger,driver,"***Article having multiple promotion[START DATE <= Today()]***;;;Pass");
			//Report_AddStep("testcase","***Article having multiple promotion[START DATE <= Today()]***","", "", "");
			int num = common.RandomFromDB(results1);
			ranArticle = results1.get(num).get(0).toString();
			//ranArticle="25207";
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for article "+ranArticle+";;;Pass");
			//Report_AddStep("testcase","The below details is for article "+ranArticle+"","", "", "");
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			waitFor(1);			
			String myRegex = "[$ ]";
			String price = objEnhancedArticleLookup.PromoSellPrice.getText().replaceAll(myRegex, "");
			String stdPrice = objEnhancedArticleLookup.stdPrice.getText().replaceAll(myRegex, "");
			objEnhancedArticleLookup.offerPromo.click(); 
			verticalScroll(driver);
			waitFor(1);
			int size = (objEnhancedArticleLookup.totalPromo.size());
			if(size>1)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Multi promotion available for article "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Multi promotion available for article "+ranArticle+"","", "", "Pass");
				LocalDate ctdate = getFormattedDate("dd/MM/yyyy", common.getCurrentDate());
				List al = new ArrayList();
				List promo = new ArrayList();
				int PagSize = (objEnhancedArticleLookup.currentPromoPagList.size());
				List dates = new ArrayList();
				if(PagSize==0){PagSize=3;}
				for(int i=2;i<PagSize;i++)
				{
					if(i!=2)
					{
						WebElement date = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currentPromoPag,i,driver);
						date.click();
					}
					List<List<Object>> application = getValuesFromTable(objEnhancedArticleLookup.activePromo);
					application.remove(0);
					int count = 0;
					dates = getIndex(application, 1);
					for(int j=0;j<=dates.size()-1;j++)
					{
						String dat = dates.get(j).toString();
						LocalDate promodate= getFormattedDate("dd/MM/yyyy", dat);
						if((promodate.isBefore(ctdate))||(promodate.isEqual(ctdate)))
						{
							count++;
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Start date is after current date for row "+j+";;;Fail");
							//Report_AddStep("testcase","Start date is after current date for row "+j+"" , "", "", "Fail");
						}
					}//System.out.println(+count +dates.size());
					if(count==dates.size())
					{
						int pagno=i-1;
						htmlToExtent(cName,mName,extLogger,driver,"All Start date is before or equal current date for page "+pagno+";;;Pass");
						//Report_AddStep("testcase","All Start date is before or equal current date for page "+pagno+"" , "", "", "Pass");
					}
					al = getIndex(application, 6);
					for(int p=0;p<al.size();p++)
					{
						promo.add(al.get(p));
					}	
				}
				java.util.HashSet<String> hs = new java.util.HashSet<>();
				hs.addAll(promo);
				promo.clear();
				promo.addAll(hs);  
				int minIndex = al.indexOf(Collections.min(al));
				String minimum = (String) al.get(minIndex);
				if(minimum.contains(price))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Minimum Promo sell price is available in details page;"+minimum+";"+price+";Pass");
					//Report_AddStep("testcase","Minimum Promo sell price is available in details page" , minimum, price, "Pass");
				}
				else
				{
					if(Double.parseDouble(minimum)>Double.parseDouble(stdPrice))
					{
						if(stdPrice.equals(price))
						{
							htmlToExtent(cName,mName,extLogger,driver,"Minimum Promo sell price is available in details page;"+minimum+";"+price+";Pass");
							//Report_AddStep("testcase","Minimum Promo sell price is available in details page" , minimum, price, "Pass");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Minimum Promo sell price is not available in details page;"+minimum+";"+price+";Fail");
						//Report_AddStep("testcase","Minimum Promo sell price is not available in details page" , minimum, price, "Fail");
					}
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Multi promotion not available for article "+ranArticle+";;;Fail");
				//Report_AddStep("testcase","Multi promotion not available for article "+ranArticle+"" , "", "", "Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to sell price with promotions;;;Fail");
			//Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
		scrollUp(driver);
	}
	
	public void SellandPromoPricewithBestPrice(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,List<List<Object>> results1,WebDriver driver) throws IOException, SQLException
	{
		String ranArticle ="";
		String myRegex = "[$ ]";
		Date date1 = new Date();
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			
			String ForPromo = testdata.getText("UpdatedPromoPrice").replace("Article",ranArticle);
			BestPrice = sql.executeQueryStore(getContext(), ForPromo, getContext().getStringProperty("NZstore"));
			String promoprice = BestPrice.get(0).get(3).toString();
			
			Double pprice = toDouble(promoprice);
			String OnecardPromoprice = doubleToString(pprice,0.5);
			String Currentdate = formatDate(date1,"ddMMyyyy");
			String FromDate = formatDate(date1,"yyyy-MM-dd");
			String ToDate = formatDatewithValueadded(date1,"yyyy-MM-dd",4);
			
			String CreateProc = testdata.getText("CreateProc");
			sql.executeQuery_CUDStore(getContext(),CreateProc, getContext().getStringProperty("NZstore"));
			String InsertHDR = testdata.getText("InsertintoHDRforpromo").replace("CurrentDateformatted",Currentdate).replace("StartDate",FromDate).replace("EndDate",ToDate);
			sql.executeQuery_CUDStore(getContext(),InsertHDR, getContext().getStringProperty("NZstore"));
			String InsertITM = testdata.getText("InsertintoITMforpromo").replace("CurrentDateformatted",Currentdate).replace("FormattedPrice",OnecardPromoprice).replace("artno",ranArticle);
			sql.executeQuery_CUDStore(getContext(),InsertITM, getContext().getStringProperty("NZstore"));
		
			String CalltheProc = testdata.getText("CalltheProc");
			sql.executeQuery_CUDStore(getContext(),CalltheProc, getContext().getStringProperty("NZstore"));
			String DeleteProc = testdata.getText("DeleteProc");
			sql.executeQuery_CUDStore(getContext(),DeleteProc, getContext().getStringProperty("NZstore"));
			
			articleValidation(objEnhancedArticleLookup, ranArticle,driver);
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for article "+ranArticle+";;;Info");
			//Report_AddStep("testcase","The below details is for article "+ranArticle+"","", "", "");
			waitFor(1);
			scrollUp(driver);
			
			int sizee=objEnhancedArticleLookup.PromoSellPrice1.size();
			String promoPrice = objEnhancedArticleLookup.PromoSellPrice.getText().replaceAll(myRegex, "");
			String resultsNew = testdata.getText("UpdatedPromoPrice").replace("Article",ranArticle);
			resultsbestprice = sql.executeQueryStore(getContext(), resultsNew, getContext().getStringProperty("NZstore"));
			String DB = resultsbestprice.get(0).get(3).toString();
			
			if(sizee==0)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is not available in application;;;Fail");
				//Report_AddStep("testcase","Promo sell price is not available in application","", "", "Fail");
			}
			else if((promoPrice.equals(DB))&&(sizee==1)&&(promoPrice.equals(OnecardPromoprice)))
			//if((objEnhancedArticleLookup.PromoSellPrice.getText().contains(results.get(num).get(2).toString()))&&(objEnhancedArticleLookup.PromoSellPrice1.size()==1))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is same as One Card price;;;Fail");
				//Report_AddStep("testcase","Promo sell price is mismatched with details page header","", "", "Fail");
			}
			else
			{
				String date = objEnhancedArticleLookup.Dateheader.getText();
				if((date.contains(results.get(num).get(3).toString()))&&(date.contains(results.get(num).get(4).toString()))&&(date.contains(results.get(num).get(5).toString()))&&(date.contains(results.get(num).get(6).toString())))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Promo sell price,Start and End date is matched with details page header and One Card price not displayed;;;Pass");
					//Report_AddStep("testcase","Promo sell price,Start and End date is matched with details page header","", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Start and End date is mismatched with details page header;;;Fail");
					//Report_AddStep("testcase","Start and End date is mismatched with details page header","", "", "Fail");
				}
			}
			objEnhancedArticleLookup.backbutton.click();
			waitFor(1);	
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to check sell and promo price;;;Fail");
			//Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
		waitFor(1);
		if(results1.size()!=0)
		{
			htmlToExtent(cName,mName,extLogger,driver,"***Article having multiple promotion[START DATE <= Today()]***;;;Pass");
			//Report_AddStep("testcase","***Article having multiple promotion[START DATE <= Today()]***","", "", "");
			int num = common.RandomFromDB(results1);
			ranArticle = results1.get(num).get(0).toString();
			
			String ForPromo = testdata.getText("UpdatedPromoPrice").replace("Article",ranArticle);
			BestPrice = sql.executeQueryStore(getContext(), ForPromo, getContext().getStringProperty("NZstore"));
			String promoprice = BestPrice.get(0).get(3).toString();
			
			Double pprice = toDouble(promoprice);
			String OnecardPromoprice = doubleToString(pprice,0.5);
			String Currentdate = formatDate(date1,"ddmMMyyyy");
			String FromDate = formatDate(date1,"yyyy-MM-dd");
			String ToDate = formatDatewithValueadded(date1,"yyyy-MM-dd",4);
			
			String CreateProc = testdata.getText("CreateProc");
			sql.executeQuery_CUDStore(getContext(),CreateProc, getContext().getStringProperty("NZstore"));
			String InsertHDR = testdata.getText("InsertintoHDRforpromo").replace("CurrentDateformatted",Currentdate).replace("StartDate",FromDate).replace("EndDate",ToDate);
			sql.executeQuery_CUDStore(getContext(), InsertHDR, getContext().getStringProperty("NZstore"));
			String InsertITM = testdata.getText("InsertintoITMforpromo").replace("CurrentDateformatted",Currentdate).replace("FormattedPrice",OnecardPromoprice).replace("artno",ranArticle);
			sql.executeQuery_CUDStore(getContext(), InsertITM, getContext().getStringProperty("NZstore"));
	
			String CalltheProc = testdata.getText("CalltheProc");
			sql.executeQuery_CUDStore(getContext(),CalltheProc, getContext().getStringProperty("NZstore"));
			String DeleteProc = testdata.getText("DeleteProc");
			sql.executeQuery_CUDStore(getContext(),DeleteProc, getContext().getStringProperty("NZstore"));
			
		
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for article "+ranArticle+";;;Pass");
			//Report_AddStep("testcase","The below details is for article "+ranArticle+"","", "", "");
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			
			waitFor(5);			
			
			int sizee=objEnhancedArticleLookup.PromoSellPrice1.size();
			String price = objEnhancedArticleLookup.PromoSellPrice.getText().replaceAll(myRegex, "");
			String stdPrice = objEnhancedArticleLookup.stdPrice.getText().replaceAll(myRegex, "");
			String resultsNew = testdata.getText("UpdatedPromoPrice").replace("Article",ranArticle);
			resultsbestprice = sql.executeQueryStore(getContext(), resultsNew, getContext().getStringProperty("NZstore"));
			
			String DB = resultsbestprice.get(0).get(3).toString();
			
			if(sizee==0)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is not available in application for Multiple promotion;;;Fail");
				//Report_AddStep("testcase","Promo sell price is not available in application","", "", "Fail");
			}
			else if((price.equals(DB))&&(sizee==1)&&(price.equals(OnecardPromoprice)))
			//if((objEnhancedArticleLookup.PromoSellPrice.getText().contains(results.get(num).get(2).toString()))&&(objEnhancedArticleLookup.PromoSellPrice1.size()==1))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is mismatched with details page header and is same as OneCardPromoprice;;;Fail");
				//Report_AddStep("testcase","Promo sell price is mismatched with details page header","", "", "Fail");
			
			}
			else
			{
				String date = objEnhancedArticleLookup.Dateheader.getText();
				if((date.contains(results.get(num).get(3).toString()))&&(date.contains(results.get(num).get(4).toString()))&&(date.contains(results.get(num).get(5).toString()))&&(date.contains(results.get(num).get(6).toString())))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Promo sell price,Start and End date is matched with details page header and One Card price not displayed for Multiple promotion;;;Pass");
					//Report_AddStep("testcase","Promo sell price,Start and End date is matched with details page header","", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Start and End date is mismatched with details page header for Multiple promotion;;;Fail");
					//Report_AddStep("testcase","Start and End date is mismatched with details page header","", "", "Fail");
				}
			}
			
			objEnhancedArticleLookup.offerPromo.click(); 
			verticalScroll(driver);
			waitFor(1);
			int size = (objEnhancedArticleLookup.totalPromo.size());
			if(size>1)
			{
				htmlToExtent(cName,mName,extLogger,driver,"Multi promotion available for article "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","Multi promotion available for article "+ranArticle+"","", "", "Pass");
				LocalDate ctdate = getFormattedDate("dd/MM/yyyy", common.getCurrentDate());
				List al = new ArrayList();
				List promo = new ArrayList();
				int PagSize = (objEnhancedArticleLookup.currentPromoPagList.size());
				List dates = new ArrayList();
				for(int i=2;i<PagSize;i++)
				{
					if(i!=2)
					{
						WebElement date = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currentPromoPag,i,driver);
						date.click();
					}
					List<List<Object>> application = getValuesFromTable(objEnhancedArticleLookup.activePromo);
					application.remove(0);
					int count = 0;
					dates = getIndex(application, 1);
					for(int j=0;j<=dates.size()-1;j++)
					{
						String dat = dates.get(j).toString();
						LocalDate promodate= getFormattedDate("dd/MM/yyyy", dat);
						if((promodate.isBefore(ctdate))||(promodate.isEqual(ctdate)))
						{
							count++;
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Start date is after current date for row "+j+";;;Fail");
							//Report_AddStep("testcase","Start date is after current date for row "+j+"" , "", "", "Fail");
						} 
					}
					//System.out.println(+count +dates.size());
					if(count==dates.size())
					{
						int pagno=i-1;
						htmlToExtent(cName,mName,extLogger,driver,"All Start date is before or equal current date for page "+pagno+";;;Pass");
						//Report_AddStep("testcase","All Start date is before or equal current date for page "+pagno+"" , "", "", "Pass");
					}
					al = getIndex(application, 6);
					for(int p=0;p<al.size();p++)
					{
						promo.add(al.get(p));
					}	
				}
				java.util.HashSet<String> hs = new java.util.HashSet<>();
				hs.addAll(promo);
				promo.clear();
				promo.addAll(hs);  
				int minIndex = al.indexOf(Collections.min(al));
				String minimum = (String) al.get(minIndex);
				if(price.equals(OnecardPromoprice))
				{

					htmlToExtent(cName,mName,extLogger,driver,"Promo sell price is same as One Card Promo price;"+OnecardPromoprice+";"+OnecardPromoprice+";Fail");
					
				}
				else if(price.equals(minimum))
					{
						htmlToExtent(cName,mName,extLogger,driver,"One card Promo sell price is available in details page and same as Promo Price in header;"+minimum+";"+price+";Fail");
						//Report_AddStep("testcase","Minimum Promo sell price is available in details page" , minimum, price, "Pass");
						}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Promo sell price displayed is not same as One card promo price;"+OnecardPromoprice+";"+price+";Pass");
						//Report_AddStep("testcase","Minimum Promo sell price is not available in details page" , minimum, price, "Fail");
					}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Multi promotion not available for article "+ranArticle+";;;Fail");
				//Report_AddStep("testcase","Multi promotion not available for article "+ranArticle+"" , "", "", "Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to sell price with promotions;;;Fail");
			//Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
		scrollUp(driver);
	}
	
	public void articleLookup(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,List<List<Object>> results1,WebDriver driver) throws IOException
	{
		String ranArticle="";
		waitFor(1);
		objEnhancedArticleLookup.home.click();
		int size = objEnhancedArticleLookup.articleLookup.size();
		WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.artLookup,size,driver);
		elements.click();
		waitFor(2);
		if(objEnhancedArticleLookup.artLookupText1.size()==1){
		if(getText(objEnhancedArticleLookup.artLookupText).trim().equals("Type number, description, or EAN / TUN / PLU and press Enter"))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article lookup can be accessed through main menu;;;Pass");
			//Report_AddStep("testcase","Article lookup can be accessed through main menu" , "", "", "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Article lookup cannot be accessed through main menu;;;Fail");
			//Report_AddStep("testcase","Article lookup cannot be accessed through main menu" , "", "", "Fail");
		}}else{
			if(size>1){
				objEnhancedArticleLookup.home.click();
				waitFor(1);
			elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.artLookup,size-1,driver);
			elements.click();
			if(getText(objEnhancedArticleLookup.artLookupText).trim().equals("Type number, description, or EAN / TUN / PLU and press Enter"))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article lookup can be accessed through main menu;;;Pass");
				//Report_AddStep("testcase","Article lookup can be accessed through main menu" , "", "", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article lookup cannot be accessed through main menu;;;Fail");
				//Report_AddStep("testcase","Article lookup cannot be accessed through main menu" , "", "", "Fail");
			}
			}
		}
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(1).toString();
			htmlToExtent(cName,mName,extLogger,driver,"EAN - "+ranArticle+";;;Info");
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			waitFor(1);
			if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase","Article not found" , "", "", "Fail");
				objEnhancedArticleLookup.articleNtFoundclose.click();
			}
			else
			{	
				waitFor(1);
				scrollUp(driver);
				String[] article = splitString(getText(objEnhancedArticleLookup.article), " - ");
				if(article[0].equals(results.get(num).get(0).toString()))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Article can be searched through EAN;;;Pass");
					//Report_AddStep("testcase","Article can be searched through EAN" , "", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Article cannot be searched through EAN;;;Fail");
					//Report_AddStep("testcase","Article cannot be searched through EAN" , "", "", "Fail");
				}
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to verify EAN;;;Fail");
			//	Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
		objEnhancedArticleLookup.backbutton.click();
		if(results1.size()!=0)
		{
			int num = common.RandomFromDB(results1);
			ranArticle = results1.get(num).get(1).toString();	
			htmlToExtent(cName,mName,extLogger,driver,"TUN - "+ranArticle+";;;Info");
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			waitFor(1);
			if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase","Article not found" , "", "", "Fail");
				objEnhancedArticleLookup.articleNtFoundclose.click();
			}
			else
			{	
				waitFor(1);
				scrollUp(driver);
				String[] article = splitString(getText(objEnhancedArticleLookup.article), " - ");
				if(article[0].equals(results1.get(num).get(0).toString()))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Article can be searched through TUN;;;Pass");
					//Report_AddStep("testcase","Article can be searched through TUN" , "", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Article cannot be searched through TUN;;;Fail");
					//Report_AddStep("testcase","Article cannot be searched through TUN" , "", "", "Fail");
				}
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles found in DB to verify TUN;;;Fail");
			//Report_AddStep("testcase","No articles in DB" , "", "", "Fail");
		}
	}
	
	public void indicator(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle, WebElement obj, String name, int a,WebDriver driver)throws IOException, AWTException 
	{
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		if (a == 1) 
		{
			objEnhancedArticleLookup.advSearch.click();
			String f = objEnhancedArticleLookup.rangedCheck.getAttribute("checked");
			if (f == null) 
			{
			} 
			else
			{
				objEnhancedArticleLookup.rangedCheck.click();
			}
			waitFor(1);
		}
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
		String text = getText(obj);
		if (text.equals(name))
		{
			htmlToExtent(cName,mName,extLogger,driver,"" + name + " Article - " + ranArticle+ " Validation - successfull;;;Pass");
			//Report_AddStep("testcase", "" + name + " Article - " + ranArticle+ " Validation - successfull", "", "", "Pass");
			if(name.equals("Ranged"))
			{
				if(obj.getAttribute("class").equals("positiveStatus rangedInd"))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Ranged article is in green colour;;;Pass");
					//Report_AddStep("testcase", "Ranged article is in green colour", "", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Ranged article is not in green colour;;;Fail");
					//Report_AddStep("testcase", "Ranged article is not in green colour", "", "", "Fail");
				}
			}			
			if(name.equals("Not Ranged"))
			{
				/*Color your_color = Color.decode(obj.getCssValue("color"));
				String hex = "#"+Integer.toHexString(your_color.getRGB()).substring(2);*/
				String y =obj.getCssValue("color");
				//System.out.println(y);
				if((obj.getAttribute("class").equals("negativeStatus notRangedInd"))&&(obj.getCssValue("color")).equals("rgba(223, 11, 11, 1)"))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Not Ranged article is in red colour;;;Pass");
					//Report_AddStep("testcase", "Not Ranged article is in red colour", "", "", "Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Not Ranged article is not in red colour;;;Fail");
					//Report_AddStep("testcase", "Not Ranged article is not in red colour", "", "", "Fail");
				}
			}
		} 
		else 
		{
			htmlToExtent(cName,mName,extLogger,driver,"" + name + " Article - " + ranArticle+ " Validation - failure;;;Fail");
			//Report_AddStep("testcase", "" + name + " Article - " + ranArticle+ " Validation - failure", "", "", "Fail");
		}
		objEnhancedArticleLookup.backbutton.click();
		objEnhancedArticleLookup.searchText.clear();
	}

	public Object inputParameter(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String search,String SOS,String desc,WebDriver driver) throws IOException
	{
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String WHvendor = results.get(num).get(0).toString();
			String count =  results.get(num).get(1).toString();
			waitFor(1);
			objEnhancedArticleLookup.advSearch.click();
			switch(SOS)
			{
			case "WH":
				htmlToExtent(cName,mName,extLogger,driver,"Details for Warehouse - "+WHvendor+";;;Pass");
				//Report_AddStep("testcase", "Details for Warehouse - "+WHvendor+"", "", "", "");
				objEnhancedArticleLookup.WH.click(); 
				List<String> opt = getOptionsText(objEnhancedArticleLookup.WHdd); 
				int u = opt.size();
				for(int i=0;i<=u;i++)
				{
					String[] split=opt.get(i).split("|"); 
					String check = split[0]+split[1]+split[2]+split[3];
					if(WHvendor.contains(check)) 
					{
						String dd = opt.get(i); 
						selectByVisibleText(objEnhancedArticleLookup.WHdd,dd);
						waitFor(1);
						break; 
					} 
				}
				break;
			case "vendor":
				htmlToExtent(cName,mName,extLogger,driver,"Details for Vendor - "+WHvendor+";;;Pass");
				//Report_AddStep("testcase", "Details for Vendor - "+WHvendor+"", "", "", "");
				objEnhancedArticleLookup.vendor.click(); 
				objEnhancedArticleLookup.vendor_no.clear();
				objEnhancedArticleLookup.vendor_no.sendKeys(WHvendor);
				objEnhancedArticleLookup.vendor_verify.click();
				waitForJSandJQueryToLoad(driver);;
				break;
			}
			switch(search)
			{
			case "desc":
				htmlToExtent(cName,mName,extLogger,driver,"description - "+desc+";;;Pass");
				//Report_AddStep("testcase", "description - "+desc+"", "", "", "");
				waitFor(1);
				enterArt1(objEnhancedArticleLookup, desc,driver);
				waitFor(1);
				if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
				{
					htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
					//Report_AddStep("testcase","Article not found", "", "", "Fail");
					objEnhancedArticleLookup.articleNtFoundclose.click();
					return null;
				}
				else
				{
					if(Integer.parseInt(count)!=1)
					{
					String applcount = objEnhancedArticleLookup.totalcount.getText();
					if(applcount.equals(count))
					{
						htmlToExtent(cName,mName,extLogger,driver,"Count matched with DB for decription with "+SOS+";"+applcount+";"+count+";Pass");
						//Report_AddStep("testcase", "Count matched with DB for decription with "+SOS+"", applcount, count, "Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Count mismatched with DB for decription with "+SOS+";"+applcount+";"+count+";Fail");
						//Report_AddStep("testcase", "Count mismatched with DB for decription with "+SOS+"", applcount, count, "Fail");
					}					
					waitFor(1);
					objEnhancedArticleLookup.artClick.click();
					waitFn(driver);
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Count matched with DB for decription with "+SOS+";"+1+";"+1+";Pass");
						//Report_AddStep("testcase", "Count matched with DB for decription with "+SOS+"", "", "", "Pass");
					}waitFor(1);
					String[] art = splitString(getText(objEnhancedArticleLookup.article), " - ");
					if(getText(objEnhancedArticleLookup.suppno).equals(WHvendor))
					{
						htmlToExtent(cName,mName,extLogger,driver,"Description with "+SOS+" matched with application;;;Pass");
						//Report_AddStep("testcase", "Description with "+SOS+" matched with application", "", "", "Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Description with "+SOS+" mismatched with application;;;Fail");
						//Report_AddStep("testcase", "Description with "+SOS+" mismatched with application", "", "", "Pass");
					}
				}
				break;
			case "art":
				htmlToExtent(cName,mName,extLogger,driver,"Details for article - "+count+";;;Pass");
				//Report_AddStep("testcase", "Details for article - "+count+"", "", "", "");
				waitFor(1);
				enterArt(objEnhancedArticleLookup, count,driver);
				waitFor(1);
				if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
				{
					htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
					//Report_AddStep("testcase","Article not found", "", "", "Fail");
					objEnhancedArticleLookup.articleNtFoundclose.click();
					return null;
				}
				else
				{waitFor(1);
					String[] art = splitString(getText(objEnhancedArticleLookup.article), " - ");
					if((art[0].contains(count))&&(getText(objEnhancedArticleLookup.suppno)).equals(WHvendor))
					{
						htmlToExtent(cName,mName,extLogger,driver,"Article with "+SOS+" matched with application;;;Pass");
						//Report_AddStep("testcase", "Article with "+SOS+" matched with application", "", "", "Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Article with "+SOS+" mismatched with application;;;Fail");
						//Report_AddStep("testcase", "Article with "+SOS+" mismatched with application", "", "", "Pass");
					}
				}
				break;
			}
			objEnhancedArticleLookup.backbutton.click();			
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No "+SOS+" type of Articles found in DB to verify input parameter;;;Fail");
			//Report_AddStep("testcase", "No Article in DB", "", "", "Fail");
		}
		return desc;
	}
	
	public void vendor_WH(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String article, String ranArticle, String nr,WebDriver driver) throws IOException
	{
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.sendKeys(article);
		if (nr.equals("1")) 
		{
			objEnhancedArticleLookup.advSearch.click();
			String f = objEnhancedArticleLookup.rangedCheck.getAttribute("checked");
			if (f == null) 
			{
			} 
			else 
			{
				objEnhancedArticleLookup.rangedCheck.click();
			}
			waitFor(1);
			htmlToExtent(cName,mName,extLogger,driver,"Show only ranged articled check box is validated succesfully;;;Pass");
			//Report_AddStep("testcase","Show only ranged articled check box is validated succesfully","", "", "Pass");
		}
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		int size = objEnhancedArticleLookup.ntrangedlist.size();
		if (size != 1) 
		{
			selectNotRanged(objEnhancedArticleLookup, size, article,driver);
		}
		int y = objEnhancedArticleLookup.suppno1.size();
		//System.out.println(y);
		if (y != 0)
		{
			String vend_check = getText(objEnhancedArticleLookup.suppno);
			if (vend_check.equals(ranArticle)) 
			{
				// String art = objEnhancedArticleLookup.article.getText();
				htmlToExtent(cName,mName,extLogger,driver,"Vendor number -  " + vend_check+ " matched with DB for article number "+ article + ";"+ranArticle+";"+vend_check+";Pass");
				//Report_AddStep("testcase", "Vendor number -  " + vend_check+ " matches with DB with article number - " + article+ "", ranArticle, vend_check, "Pass");
			} 
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Vendor number -  " + vend_check+ " differs with DB for article number "+ article + ";"+ranArticle+";"+vend_check+";Fail");
				//Report_AddStep("testcase","Vendor number -  " + vend_check+ " differs with DB for article number "+ article + "", ranArticle, vend_check, "Fail");
			}
		}
		objEnhancedArticleLookup.backbutton.click();
		objEnhancedArticleLookup.searchText.clear();
	}

	public void WHcheck(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String article, String ranArticle, String nr,WebDriver driver) throws IOException {
		String dd = null;
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.sendKeys(article);
		if (nr.equals("1")) {
			objEnhancedArticleLookup.advSearch.click();
			String f = objEnhancedArticleLookup.rangedCheck
					.getAttribute("checked");
			if (f == null) {
			} else {
				objEnhancedArticleLookup.rangedCheck.click();
			}
			waitFor(1);
		}		
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		int size = objEnhancedArticleLookup.ntrangedlist.size();
		if (size != 1) {
			selectNotRanged(objEnhancedArticleLookup, size, article,driver);
		}
		/*
		 * click(objEnhancedArticleLookup.artClick); waitFn(driver);
		 */
		String WH_check = objEnhancedArticleLookup.suppno.getText();
		if (WH_check.equals(ranArticle)) {
			// String art = objEnhancedArticleLookup.article.getText();
			htmlToExtent(cName,mName,extLogger,driver,"Ware house number -  " + WH_check+ " matches with DB with article number - " + article + ";"+ranArticle+";"+WH_check+";Pass");
			//Report_AddStep("testcase", "Ware house number -  " + WH_check+ " matches with DB with article number - " + article + "",ranArticle, WH_check, "Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Ware house number -  " + WH_check+ " differs with DB with article number - " + article + ";"+ranArticle+";"+WH_check+";Fail");
			//Report_AddStep("testcase","Ware house number -  " + WH_check+ " differs with DB for the article number "+ article + "", ranArticle, WH_check, "Fail");
		}
		objEnhancedArticleLookup.backbutton.click();
		objEnhancedArticleLookup.searchText.clear();
	}

	public void articleValidation(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) 
	{
		objEnhancedArticleLookup.searchText.clear();
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		vertscroll(driver);
		objEnhancedArticleLookup.addtionalItem.click();
		waitFn(driver);
	}

	public void checkPOS(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws IOException, SQLException {
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);

		objEnhancedArticleLookup.clickPOS.click();
		waitFor(3);
		List<WebElement> UOMList = objEnhancedArticleLookup.UOM;
		int UOMsize = UOMList.size();
		//System.out.println("The display size is: " + UOMsize); // comment
		if (UOMsize >= 1) {
			for (int i = 1; i <= UOMsize; i++) {
				WebElement elements = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.POSliqUOM, i,driver);
				if ((i == 1) || (i == 2) || (i == 3)) {
					String UOMname = elements.getText();
					liquordetails(objEnhancedArticleLookup, UOMname, elements,
							i, UOMsize,driver);
				}
			}
		}
	}

	public void liquordetails(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String UOMname, WebElement elements, int i, int UOMsize,WebDriver driver)
					throws IOException {
		int count = 0;
		if ((i == 2) || (i == 3)) {
			elements.click();
			// waitFor(25);
			waitForJSandJQueryToLoad(driver);;
			waitFor(5);
		}
		if (i == 1) {
			// waitFor(25);
			waitForJSandJQueryToLoad(driver);;
			waitFor(5);
		}
		int l = objEnhancedArticleLookup.errormsgPOSlist.size();
		if (UOMname.equals("EA")) {
			// waitFor(2);

			int a = objEnhancedArticleLookup.errorsublist.size();
			// if(a!=count)
			// if(objEnhancedArticleLookup.errorsub.getAttribute("class").contains("hide"))
			if (a > 0) {
				if ((objEnhancedArticleLookup.errorsub.getAttribute("class")
						.contains("hide")) && (l != count)) {
					count++;
					String POSerrormsg = getText(objEnhancedArticleLookup.errormsgPOS);
					htmlToExtent(cName,mName,extLogger,driver,"Error receiving POS value for EA UOM: "+ POSerrormsg+";;;Fail");
					//Report_AddStep("testcase","Error receiving POS value for EA UOM: "+ POSerrormsg, "", "", "Fail");
					objEnhancedArticleLookup.errorcancel.click();
					POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
					htmlToExtent(cName,mName,extLogger,driver,"After receiving error, The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
					//Report_AddStep("testcase","After receiving error, The POS value for EA UOM: "+ POSliquorEA, "", "", "");
				} else {
					POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
					htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
					//Report_AddStep("testcase", "The POS value for EA UOM: "+ POSliquorEA, "", "", "Pass");
				}
			} else {
				POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
				htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
				//Report_AddStep("testcase", "The POS value for EA UOM: "+ POSliquorEA, "", "", "Pass");
			}
		} else if (UOMname.equals("CAR")) {
			// waitFor(2);
			int a = objEnhancedArticleLookup.errorsublist.size();
			// if(a!=count)
			// if(objEnhancedArticleLookup.errorsub.getAttribute("class").contains("hide"))
			if (a > 0) {
				if ((objEnhancedArticleLookup.errorsub.getAttribute("class")
						.contains("hide")) && (l != count)) {
					String POSerrormsg = getText(objEnhancedArticleLookup.errormsgPOS);
					htmlToExtent(cName,mName,extLogger,driver,"Error receiving POS value for CAR UOM: "+ POSerrormsg+";;;Fail");
					//					Report_AddStep("testcase","Error receiving POS value for CAR UOM: "+ POSerrormsg, "", "", "Fail");
					objEnhancedArticleLookup.errorcancel.click();
					POSliquorCAR = getText(objEnhancedArticleLookup.POSliqcarvalue);
					htmlToExtent(cName,mName,extLogger,driver,"After receiving error, The POS value for CAR UOM: "+ POSliquorCAR+";;;Pass");
					//Report_AddStep("testcase","After receiving error, The POS value for CAR UOM: "+ POSliquorCAR, "", "", "");
				} else {
					POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
					htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
					//Report_AddStep("testcase", "The POS value for EA UOM: "+ POSliquorEA, "", "", "Pass");
				}
			} else {
				POSliquorCAR = getText(objEnhancedArticleLookup.POSliqcarvalue);
				htmlToExtent(cName,mName,extLogger,driver,"The POS value for CAR UOM: "+ POSliquorCAR+";;;Pass");
				//Report_AddStep("testcase", "The POS value for CAR UOM: "+ POSliquorCAR, "", "", "Pass");
			}
		} else if (UOMname.equals("CA1")) {
			// waitFor(2);
			int a = objEnhancedArticleLookup.errorsublist.size();
			// if(a!=count)
			// if(objEnhancedArticleLookup.errorsub.getAttribute("class").contains("hide"))
			if (a > 0) {
				if ((objEnhancedArticleLookup.errorsub.getAttribute("class")
						.contains("hide")) && (l != count)) {
					String POSerrormsg = getText(objEnhancedArticleLookup.errormsgPOS);
					htmlToExtent(cName,mName,extLogger,driver,"Error receiving POS value for CA1 UOM: "+ POSerrormsg+";;;Fail");
					//Report_AddStep("testcase","Error receiving POS value for CA1 UOM: "+ POSerrormsg, "", "", "Fail");
					objEnhancedArticleLookup.errorcancel.click();
					POScigvalueca1 = getText(objEnhancedArticleLookup.POScigca1value);
					htmlToExtent(cName,mName,extLogger,driver,"After receiving error, The POS value for CA1 UOM: "+ POScigvalueca1+";;;Pass");
					//Report_AddStep("testcase","After receiving error, The POS value for CA1 UOM: "+ POScigvalueca1, "", "", "");
				} else {
					POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
					htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
					//Report_AddStep("testcase", "The POS value for EA UOM: "+ POSliquorEA, "", "", "Pass");
				}
			} else {
				POScigvalueca1 = getText(objEnhancedArticleLookup.POScigca1value);
				htmlToExtent(cName,mName,extLogger,driver,"The POS value for CA1 UOM: "+ POScigvalueca1+";;;Pass");
				//Report_AddStep("testcase", "The POS value for CA1 UOM: "+ POScigvalueca1, "", "", "Pass");
			}
		} else if (UOMname.equals("KG")) {
			// waitFor(2);
			int a = objEnhancedArticleLookup.errorsublist.size();
			// if(a!=count)
			// if(objEnhancedArticleLookup.errorsub.getAttribute("class").contains("hide"))
			if (a > 0) {
				if ((objEnhancedArticleLookup.errorsub.getAttribute("class")
						.contains("hide")) && (l != count)) {
					String POSerrormsg = getText(objEnhancedArticleLookup.errormsgPOS);
					htmlToExtent(cName,mName,extLogger,driver,"Error receiving POS value for KG UOM: "+ POSerrormsg+";;;Fail");
					//Report_AddStep("testcase",							"Error receiving POS value for KG UOM: "									+ POSerrormsg, "", "", "Fail");
					objEnhancedArticleLookup.errorcancel.click();
					POScigvaluekg = getText(objEnhancedArticleLookup.POScigkgvalue);
					htmlToExtent(cName,mName,extLogger,driver,"After receiving error, The POS value for KG UOM: "+ POScigvaluekg+";;;Pass");
					//Report_AddStep("testcase",							"After receiving error, The POS value for KG UOM: "								+ POScigvaluekg, "", "", "");
				} else {
					POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
					htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
					//Report_AddStep("testcase", "The POS value for EA UOM: "							+ POSliquorEA, "", "", "Pass");
				}
			} else {
				POScigvaluekg = getText(objEnhancedArticleLookup.POScigkgvalue);
				htmlToExtent(cName,mName,extLogger,driver,"The POS value for KG UOM: "+ POScigvaluekg+";;;Pass");
				//Report_AddStep("testcase", "The POS value for kg UOM: "						+ POScigvaluekg, "", "", "Pass");
			}
		} else {
			// waitFor(2);
			int a = objEnhancedArticleLookup.errorsublist.size();
			// if(a!=count)
			// if(objEnhancedArticleLookup.errorsub.getAttribute("class").contains("hide"))
			if (a > 0) {
				if ((objEnhancedArticleLookup.errorsub.getAttribute("class")
						.contains("hide")) && (l != count)) {
					String POSerrormsg = getText(objEnhancedArticleLookup.errormsgPOS);
					htmlToExtent(cName,mName,extLogger,driver,"Error receiving POS value for MPKUOM: "+ POSerrormsg+";;;Fail");
					//Report_AddStep("testcase",							"Error receiving POS value for MPK UOM: "									+ POSerrormsg, "", "", "Fail");
					objEnhancedArticleLookup.errorcancel.click();
					POSliquorMPK = getText(objEnhancedArticleLookup.POSliqmpkvalue);
					htmlToExtent(cName,mName,extLogger,driver,"After receiving error, The POS value for MPK UOM: "+ POSliquorMPK+";;;Pass");
					//Report_AddStep("testcase",							"After receiving error, The POS value for MPK UOM: "									+ POSliquorMPK, "", "", "");
				} else {
					POSliquorEA = getText(objEnhancedArticleLookup.POSliqeavalue);
					htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM: "+ POSliquorEA+";;;Pass");
					//Report_AddStep("testcase", "The POS value for EA UOM: "							+ POSliquorEA, "", "", "Pass");
				}
			} else {
				POSliquorMPK = getText(objEnhancedArticleLookup.POSliqmpkvalue);
				htmlToExtent(cName,mName,extLogger,driver,"The POS value for MPK UOM: "+ POSliquorMPK+";;;Pass");
				//Report_AddStep("testcase", "The POS value for MPK UOM: "						+ POSliquorMPK, "", "", "Pass");
			}
		}
		if (i == UOMsize) {
			objEnhancedArticleLookup.clickOK.click();
			verticalScroll(driver);
			verticalScroll(driver);
			objEnhancedArticleLookup.clickPUdetails.click();
			waitFor(1);
			List<WebElement> PUliq = objEnhancedArticleLookup.PUliq;
			int PUsize = PUliq.size();
			//System.out.println("The display size is: " + PUsize); // comment
			if (PUsize >= 1) {
				for (int j = 1; j <= PUsize; j++) {
					WebElement element = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.PUliquorPOS, j,driver);
					if ((j == 1) || (j == 2) || (j == 3)) {
						String PUname = element.getText();
						if ((j == 2) || (j == 3)) {
							element.click();
						}
						if (PUname.equals("EA")) {
							WebElement ele = prepareWebElementWithDynamicXpathWithInt(
									objEnhancedArticleLookup.PUval, j,driver);
							String PUEAval = ele.getText();
							if (PUEAval.equals(POSliquorEA)) {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM matches with price unit details;"+PUEAval+";"+POSliquorEA+";Pass");
								//Report_AddStep("testcase","The POS value for EA UOM matches with price unit details ",PUEAval, POSliquorEA, "Pass");
							} else {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for EA UOM conflicts with price unit details;"+PUEAval+";"+POSliquorEA+";Fail");
								//Report_AddStep("testcase","The POS value for EA UOM conflicts with price unit details ",PUEAval, POSliquorEA, "Fail");
							}
						} else if (PUname.equals("MPK")) {
							WebElement ele = prepareWebElementWithDynamicXpathWithInt(
									objEnhancedArticleLookup.PUval, j,driver);
							String PUMPKval = ele.getText();
							if (PUMPKval.equals(POSliquorMPK)) {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for MPK UOM matches with price unit details;"+PUMPKval+";"+POSliquorMPK+";Pass");
								//Report_AddStep("testcase","The POS value for MPK UOM matches with price unit details ",										PUMPKval, POSliquorMPK, "Pass");
							} else {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for MPK UOM conflicts with price unit details;"+PUMPKval+";"+POSliquorMPK+";Fail");
								//Report_AddStep("testcase","The POS value for MPK UOM conflicts with price unit details ",										PUMPKval, POSliquorMPK, "Fail");
							}
						} else if (PUname.equals("CA1")) {
							WebElement ele = prepareWebElementWithDynamicXpathWithInt(
									objEnhancedArticleLookup.PUval, j,driver);
							String PUCA1val = ele.getText();
							if (PUCA1val.equals(POScigvalueca1)) {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for CA1 UOM matches with price unit details;"+PUCA1val+";"+POScigvalueca1+";Pass");
								//Report_AddStep("testcase","The POS value for CA1 UOM matches with price unit details ",PUCA1val, POScigvalueca1, "Pass");
							} else {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for CA1 UOM conflicts with price unit details;"+PUCA1val+";"+POScigvalueca1+";Fail");
								//Report_AddStep("testcase","The POS value for CA1 UOM conflicts with price unit details ",PUCA1val, POScigvalueca1, "Fail");
							}
						} else if (PUname.equals("KG")) {
							WebElement ele = prepareWebElementWithDynamicXpathWithInt(
									objEnhancedArticleLookup.PUval, j,driver);
							String PUkgval = ele.getText();
							if (PUkgval.equals(POScigvaluekg)) {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for KG UOM matches with price unit details;"+PUkgval+";"+POScigvaluekg+";Pass");
								//Report_AddStep("testcase","The POS value for kg UOM matches with price unit details ",PUkgval, POScigvaluekg, "Pass");
							} else {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for KG UOM conflicts with price unit details;"+PUkgval+";"+POScigvaluekg+";Fail");
								//Report_AddStep(testcase","The POS value for kg UOM conflicts with price unit details ",PUkgval, POScigvaluekg, "Fail");
							}
						} else {
							WebElement ele = prepareWebElementWithDynamicXpathWithInt(
									objEnhancedArticleLookup.PUval, j,driver);
							String PUCARval = ele.getText();
							if (PUCARval.equals(POSliquorCAR)) {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for CAR UOM matches with price unit details;"+PUCARval+";"+POSliquorCAR+";Pass");
								//Report_AddStep("testcase","The POS value for CAR UOM matches with price unit details ",PUCARval, POSliquorCAR, "Pass");
							} else {
								htmlToExtent(cName,mName,extLogger,driver,"The POS value for CAR UOM conflicts with price unit details;"+PUCARval+";"+POSliquorCAR+";Fail");
								//Report_AddStep("testcase","The POS value for CAR UOM conflicts with price unit details ",PUCARval, POSliquorCAR, "Fail");
							}
						}
					}
				}
			}
		}
		scrollUp(driver);
	}

	public WebElement ivalue(EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)throws IOException, SQLException 
	{
		WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMlist, i,driver);
		return elements;
	}
	
	public List<List<Object>> supinfo(EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver)
	{
		List<List<Object>> applList =  new ArrayList<List<Object>>();
		WebElement elements=null;
		List app=new ArrayList();
		for(int i=1;i<=5;i++)
		{
			elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.suppinfo, i,driver);
			String y = elements.getText();
			if(y.contains("$"))
			{
				String myRegex = "[$]";
				y=y.replaceAll(myRegex, "");
				y=y.trim();
			}
			app.add(y);
		}
		applList.add(app);
		return applList;
	}
	
	public WebElement fullHistry(EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)throws IOException, SQLException 
	{
		WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.MPLSCuomclick, i,driver);
		return elements;
	}
	
	public WebElement dynamic(EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,int j,WebDriver driver)throws IOException, SQLException {
		WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.nutriValidations, i,j,driver);
		return elements;
	}
	
	public void fHistory(List<List<Object>> results,EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,String name,WebDriver driver) throws IOException
	{
		if(results.size()!=0) //if no history details in DB
		{
			removeIndex(results, "9"); removeIndex(results, "8"); removeIndex(results, "7");removeIndex(results, "6");removeIndex(results, "5");
			replacenullToZero(results);
			List<List<Object>> applList = getValuesFromTable(objEnhancedArticleLookup.fullHistoryTable);
			removeIndex(applList, "0");
			removeEmptyRow(applList);
			removeLastZero(results, 3);
			removeLastZero(results, 4);
			ElementContains1(cName, mName,extLogger,driver, applList, results);
		}
		else 
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Full history available for "+name+" in backend for article - "+ranArticle+";;;Fail");
		}
	}

	public void indicatorReplinishment(List<List<Object>> results1,EnhancedArticleLookUpObjects objEnhancedArticleLookup,String indname, WebElement a,WebDriver driver) throws IOException 
	{
		if (results1.size() != 0) 
		{
			int num = common.RandomFromDB(results1);
			String ranArticle = results1.get(num).get(0).toString();
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase","Article not found" , "", "", "Fail");
				objEnhancedArticleLookup.articleNtFoundclose.click();
			}
			else
			{
				verticalScroll(driver);
				String check = a.getAttribute("class");
				if (check.equals("positiveFlag")) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"" + indname+ " indicator is displayed for article - "+ ranArticle + ";;;Pass");
					//Report_AddStep("testcase", "" + indname+ " indicator is displayed for article - " + ranArticle+ "", "", "", "Pass");
				} 
				else 
				{
					htmlToExtent(cName,mName,extLogger,driver,"" + indname+ " indicator is not displayed for article - "+ ranArticle + ";;;Fail");
					//Report_AddStep("testcase", "" + indname+ " indicator is not displayed for article - "+ ranArticle + "", "", "", "Fail");
				}
				objEnhancedArticleLookup.backbutton.click();
			}
		} 
		else 
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Articles found in DB to verify " + indname+ " indicator;;;Fail");
			//Report_AddStep("testcase", "No Articles found in DB", "", "","Fail");
		}
	}

	public void grossprofit(List<List<Object>> results,
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String arttype,WebDriver driver) throws IOException, SQLException {
		if (results.size() != 0) {
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			if (objEnhancedArticleLookup.articleNtFound.isDisplayed()) {
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase", "Article not found", "", "", "Fail");
				objEnhancedArticleLookup.backbutton.click();

			} else {
				htmlToExtent(cName,mName,extLogger,driver,"The below details is for "+ arttype + " article: " + ranArticle + ";;;Pass");
				//Report_AddStep("testcase", "The below details is for "+ arttype + " article: " + ranArticle + " ", "", "", "");
				verifyGP(objEnhancedArticleLookup, ranArticle,driver);
				objEnhancedArticleLookup.backbutton.click();
			}
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"No "+ arttype + " Articles found in DB to check gross profit;;;Fail");
			//Report_AddStep("testcase", "No Articles found in DB", "", "",					"Pass");
			//objEnhancedArticleLookup.backbutton.click();
		}
	}

	public int FHsize(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ntart,WebDriver driver)
	{
		int size=0;int cnt=0;
		if (objEnhancedArticleLookup.arttable.size() != 0) 
		{
			int y = objEnhancedArticleLookup.arttablelist.size();
			for (int i = 1; i <= y; i++) 
			{
				WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, i,1,driver);
				String art = elements.getText();
				if (art.equals(ntart)) 
				{
					cnt=1;
					elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, i,4,driver);
					elements.click();
					break;
				}
			}
			size=1;
		}
		else{
		size = objEnhancedArticleLookup.MPLSCuomList.size();}
		return size;
	}
	
	public List<List<Object>> checkMPLandSC(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,String artname,WebDriver driver) throws IOException, SQLException 
	{
		int mplsc=0;
		List appl = null;
		List<List<Object>> appl1 = new ArrayList<List<Object>>();
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
		String[] nart = splitString(objEnhancedArticleLookup.article.getText(), " - ");
		String ntart = nart[0];
		objEnhancedArticleLookup.editbutton.click();
		waitFor(1);
		if (objEnhancedArticleLookup.mplandsctab.isDisplayed()) 
		{
			int cnt=0;
			objEnhancedArticleLookup.mplandsctab.click();
			if (objEnhancedArticleLookup.arttable.size() != 0) 
			{
				int y = objEnhancedArticleLookup.arttablelist.size();
				for (int i = 1; i <= y; i++) 
				{
					WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, i,1,driver);
					String art = elements.getText();
					if (art.equals(ntart)) 
					{
						cnt=1;
						elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, i,4,driver);
						elements.click();
						break;
					}
				}
				if(cnt!=1)
				{
					WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, 1,4,driver);
					elements.click();
				}
			}
		} 
		else 
		{
			objEnhancedArticleLookup.canceledate.click();
			if(objEnhancedArticleLookup.NotfrSaleArt.getText().equals("Deleted") && (!objEnhancedArticleLookup.NotfrSaleArt.getAttribute("class").contains("hide")))
			{
				htmlToExtent(cName,mName,extLogger,driver,"The article - " + ranArticle+ " has no option for MPL and SC;;;Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"The article - " + ranArticle+ " has no option for MPL and SC for "+artname+" article;;;Fail");
			}
			//Report_AddStep("testcase", "The article - " + ranArticle+ " has no option for MPL and SC", "", "", "Pass");
			
			// click(objEnhancedArticleLookup.crossbtn);
			return null;
		}
		waitFor(1);
		int cnt=0;
		List<WebElement> UOMList = objEnhancedArticleLookup.mplscUOM;
		int UOMsize = UOMList.size(); if(UOMsize==0){ cnt=1;UOMsize=1;}
		//System.out.println("The display size is: " + UOMsize); // comment
		if (UOMsize >= 1) {
			for (int i = 1; i <= UOMsize; i++)
			{
				WebElement elements=null;
				if(cnt==1){elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMlist1, 2,driver);}else{
				elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMlist, i,driver);}
				if ((i == 2) || (i == 3)) 
				{
					waitFor(1);
					objEnhancedArticleLookup.editbutton.click();
					waitFor(1);
					objEnhancedArticleLookup.mplandsctab.click();
					waitFor(1);
					elements.click();
					waitFor(1);
				}
				String UOMname = elements.getText();
				if (UOMname.equals("EA")) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM - EA;;;Pass");
					//Report_AddStep("testcase", "UOM - EA", "", "", "");
					saveMPLSC(objEnhancedArticleLookup, i,driver);
				}
				else if (UOMname.equals("CA1")) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM - CA1;;;Pass");
					//Report_AddStep("testcase", "UOM - CA1", "", "", "");
					saveMPLSC(objEnhancedArticleLookup, i,driver);
				} 
				else if (UOMname.equals("KG"))
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM - KG;;;Pass");
					//Report_AddStep("testcase", "UOM - KG", "", "", "");
					saveMPLSC(objEnhancedArticleLookup, i,driver);
				} 
				else if (UOMname.equals("CAR")) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM - CAR;;;Pass");
					//Report_AddStep("testcase", "UOM - CAR", "", "", "");
					saveMPLSC(objEnhancedArticleLookup, i,driver);
				} 
				else if (UOMname.equals("CA2")) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM - CA2;;;Pass");
					//Report_AddStep("testcase", "UOM - CA2", "", "", "");
					saveMPLSC(objEnhancedArticleLookup, i,driver);
				} 
				else 
				{
					htmlToExtent(cName,mName,extLogger,driver,"UOM - MPK;;;Pass");
					//Report_AddStep("testcase", "UOM - MPK", "", "", "");
					saveMPLSC(objEnhancedArticleLookup, i,driver);
				}
			}
			waitFor(1);
			objEnhancedArticleLookup.editbutton.click();
			waitFor(1);
			objEnhancedArticleLookup.mplandsctab.click();
			waitFor(1);
			for (int i = 1; i <= UOMsize; i++) 
			{				
				if (objEnhancedArticleLookup.arttable.size() != 0) 
				{
					int y = objEnhancedArticleLookup.arttablelist.size();
					for (int j = 1; j <= y; j++) 
					{
						WebElement elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, j,1,driver);
						String art = elements.getText();
						if (art.equals(ntart)) 
						{
							cnt=1;
							elements = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.artclick, j,4,driver);
							elements.click();
							break;
						}
					}
				}
				WebElement elements=null;
				if(cnt==1){elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMlist1, 2,driver);}else{
					elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMlist, i,driver);}
				//WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMlist, i);
				String UOMname = elements.getText();
				if ((i == 2) || (i == 3)) 
				{
					elements.click();
					waitFor(2);
				}
				if (UOMname.equals("EA")) 
				{
					eaval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
					if(mplsc!=1)
					{
						if((eaval[0].equals(objEnhancedArticleLookup.MPL.getText()))&&(eaval[1].equals(objEnhancedArticleLookup.SC.getText())))
						{
							mplsc++;
							htmlToExtent(cName,mName,extLogger,driver,"Current MPL and SC is matched with stock in application for UOM - EA;;;Pass");
							//Report_AddStep("testcase", "Current MPL and SC is matched with stock in application for UOM - EA", "", "", "");
						}
					}
				} 
				else if (UOMname.equals("KG"))
				{
					kgval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
					if(mplsc!=1)
					{
						if((kgval[0].equals(objEnhancedArticleLookup.MPL.getText()))&&(kgval[1].equals(objEnhancedArticleLookup.SC.getText())))
						{
							mplsc++;
							htmlToExtent(cName,mName,extLogger,driver,"Current MPL and SC is matched with stock in application for UOM - KG;;;Pass");
							//Report_AddStep("testcase", "Current MPL and SC is matched with stock in application for UOM - KG", "", "", "");
						}
					}
				} 
				else if (UOMname.equals("CA1")) 
				{
					ca1val = getvalMPLSC(objEnhancedArticleLookup, i,driver);
					if(mplsc!=1)
					{
						if((ca1val[0].equals(objEnhancedArticleLookup.MPL.getText()))&&(ca1val[1].equals(objEnhancedArticleLookup.SC.getText())))
						{
							mplsc++;
							htmlToExtent(cName,mName,extLogger,driver,"Current MPL and SC is matched with stock in application for UOM - CA1;;;Pass");
							//Report_AddStep("testcase", "Current MPL and SC is matched with stock in application for UOM - CA1", "", "", "");
						}
					}
				} 
				else if (UOMname.equals("CAR")) 
				{
					carval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
					if(mplsc!=1)
					{
						if((carval[0].equals(objEnhancedArticleLookup.MPL.getText()))&&(carval[1].equals(objEnhancedArticleLookup.SC.getText())))
						{
							mplsc++;
							htmlToExtent(cName,mName,extLogger,driver,"Current MPL and SC is matched with stock in application for UOM - CAR;;;Pass");
							//Report_AddStep("testcase", "Current MPL and SC is matched with stock in application for UOM - CAR", "", "", "");
						}
					}
				} 
				else if (UOMname.equals("CA2"))
				{
					ca2val = getvalMPLSC(objEnhancedArticleLookup, i,driver);
					if(mplsc!=1)
					{
						if((ca2val[0].equals(objEnhancedArticleLookup.MPL.getText()))&&(ca2val[1].equals(objEnhancedArticleLookup.SC.getText())))
						{
							mplsc++;
							htmlToExtent(cName,mName,extLogger,driver,"Current MPL and SC is matched with stock in application for UOM - CA2;;;Pass");
							//Report_AddStep("testcase", "Current MPL and SC is matched with stock in application for UOM - CA2", "", "", "");
						}
					}
				} 
				else 
				{
					mpkval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
					if(mplsc!=1)
					{
						if((mpkval[0].equals(objEnhancedArticleLookup.MPL.getText()))&&(mpkval[1].equals(objEnhancedArticleLookup.SC.getText())))
						{
							mplsc++;
							htmlToExtent(cName,mName,extLogger,driver,"Current MPL and SC is matched with stock in application for UOM - MPK;;;Pass");
							//Report_AddStep("testcase", "Current MPL and SC is matched with stock in application for UOM - MPK", "", "", "");
						}
					}
				}
				if (i == UOMsize) 
				{
					objEnhancedArticleLookup.cancelMPLSC.click();
					verticalScroll(driver);
					verticalScroll(driver);
					List<WebElement> checkMPLSC = objEnhancedArticleLookup.checkMPLSClist;
					int MPLSCsize = checkMPLSC.size();
					//System.out.println("The display size is: " + MPLSCsize); // comment
					if(artname.equals("CPBD"))
					{
						MPLSCsize = 1;
					}
					if (MPLSCsize >= 1) 
					{
						for (int j = 1; j <= MPLSCsize; j++) 
						{
							WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.checkMPLSC, j,driver);
							if ((j == 1) || (j == 2) || (j == 3))
							{								
								String MPLSCname = element.getText();
								if ((j == 2) || (j == 3)) 
								{
									element.click();
								}
								if (MPLSCname.equals("EA")) 
								{
									htmlToExtent(cName,mName,extLogger,driver,"UOM - EA;;;Pass");
									//Report_AddStep("testcase", "UOM - EA", "","", "");
									if(eaval==null){}else{
									appl = compareMPLSC(objEnhancedArticleLookup, j, eaval,driver);
									appl1.add(appl);}
								} 
								else if (MPLSCname.equals("MPK")) 
								{
									htmlToExtent(cName,mName,extLogger,driver,"UOM - MPK;;;Pass");
									//Report_AddStep("testcase", "UOM - MPK", "","", "");
									if(mpkval==null){}else{
									appl = compareMPLSC(objEnhancedArticleLookup, j, mpkval,driver);
									appl1.add(appl);}
								} 
								else if (MPLSCname.equals("CA1")) 
								{
									htmlToExtent(cName,mName,extLogger,driver,"UOM - CA1;;;Pass");
									//Report_AddStep("testcase", "UOM - CA1", "","", "");
									if(ca1val==null){}else{
									appl = compareMPLSC(objEnhancedArticleLookup, j, ca1val,driver);
									appl1.add(appl);}
								} 
								else if (MPLSCname.equals("CA2")) 
								{
									htmlToExtent(cName,mName,extLogger,driver,"UOM - CA2;;;Pass");
									//Report_AddStep("testcase", "UOM - CA2", "","", "");
									if(ca2val==null){}else{
									appl = compareMPLSC(objEnhancedArticleLookup, j, ca2val,driver);
									appl1.add(appl);}
								} 
								else if (MPLSCname.equals("KG"))
								{
									htmlToExtent(cName,mName,extLogger,driver,"UOM - KG;;;Pass");
									//Report_AddStep("testcase", "UOM - KG", "","", "");
									if(kgval==null){}else{
									appl = compareMPLSC(objEnhancedArticleLookup, j, kgval,driver);
									appl1.add(appl);}
								} 
								else
								{
									htmlToExtent(cName,mName,extLogger,driver,"UOM - CAR;;;Pass");
									//Report_AddStep("testcase", "UOM - CAR", "","", "");
									if(carval==null){}else{
									appl = compareMPLSC(objEnhancedArticleLookup, j, carval,driver);
									appl1.add(appl);}
								}
							}
						}
					}
				}
				scrollUp(driver);
			}
		}
		return appl1;
	}

	public List<List<Object>> compareMPLSC(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int j,
			String[] value,WebDriver driver) throws IOException {
		WebElement Csc = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkcurSC, j,driver);
		String currentSC1 = Csc.getText();
		WebElement Cmpl = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkcurMPL, j,driver);
		String currentMPL1 = Cmpl.getText();
		WebElement Pmpl = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkprevMPL, j,driver);
		String PreviousMPL1 = Pmpl.getText();
		WebElement Psc = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkprevSC, j,driver);
		String PreviousSC1 = Psc.getText();
		WebElement Dmpl = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkdefMPL, j,driver);
		String DefaultMPL1 = Dmpl.getText();
		WebElement Dsc = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkdefSC, j,driver);
		String DefaultSC1 = Dsc.getText();
		List app = new ArrayList();
		List appl = new ArrayList();
		List<List<Object>> appList = new ArrayList<List<Object>>();
		List<List<Object>> applList = new ArrayList<List<Object>>();
		app.add(value[0]);
		app.add(value[1]);
		app.add(value[2]);
		app.add(value[3]);
		app.add(value[4]);
		app.add(value[5]);
		appList.add(app);
		appl.add(currentMPL1);
		appl.add(currentSC1);
		appl.add(PreviousMPL1);
		appl.add(PreviousSC1);
		appl.add(DefaultMPL1);
		appl.add(DefaultSC1);
		applList.add(appl);
		replacenullToZero(appList);
		replacenullToZero(applList);
						ElementContains1(cName, mName,extLogger,driver, appList, applList);
		/*
		 * if(value[0].equals(currentMPL1)) {
		 * Report_AddStep("testcase","Current MPL value matched" , value[0],
		 * currentMPL1, "Pass"); } else {
		 * Report_AddStep("testcase","Current MPL value not matched" , value[0],
		 * currentMPL1, "Fail"); } if(value[1].equals(currentSC1)) {
		 * Report_AddStep("testcase","Current SC value matched" , value[1],
		 * currentSC1, "Pass"); } else {
		 * Report_AddStep("testcase","Current SC value not matched" , value[1],
		 * currentSC1, "Fail"); } if(value[2].equals(PreviousMPL1)) {
		 * Report_AddStep("testcase","Previous MPL value matched" , value[2],
		 * PreviousMPL1, "Pass"); } else {
		 * Report_AddStep("testcase","Previous MPL value not matched" ,
		 * value[2], PreviousMPL1, "Fail"); } if(value[3].equals(PreviousSC1)) {
		 * Report_AddStep("testcase","Previous SC value matched" , value[3],
		 * PreviousSC1, "Pass"); } else {
		 * Report_AddStep("testcase","Previous SC value not matched" , value[3],
		 * PreviousSC1, "Fail"); } if(value[4].equals(DefaultMPL1)) {
		 * Report_AddStep("testcase","Default MPL value matched" , value[4],
		 * DefaultMPL1, "Pass"); } else {
		 * Report_AddStep("testcase","Default MPL value not matched" , value[4],
		 * DefaultMPL1, "Fail"); } if(value[5].equals(DefaultSC1)) {
		 * Report_AddStep("testcase","Default SC value matched" , value[5],
		 * DefaultSC1, "Pass"); } else {
		 * Report_AddStep("testcase","Default SC value not matched" , value[5],
		 * DefaultSC1, "Fail"); }
		 */
		return appl;
	}
	
	public List compareFacing(EnhancedArticleLookUpObjects objEnhancedArticleLookup, int j,WebDriver driver) throws IOException {
		WebElement Csc = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkcurSC, j,driver);
		String currentSC1 = Csc.getText();
		WebElement Cmpl = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkcurMPL, j,driver);
		String currentMPL1 = Cmpl.getText();
		WebElement Pmpl = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkprevMPL, j,driver);
		String PreviousMPL1 = Pmpl.getText();
		WebElement Psc = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkprevSC, j,driver);
		String PreviousSC1 = Psc.getText();
		WebElement Dmpl = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkdefMPL, j,driver);
		verticalinternalscroll(Dmpl,driver);
		String DefaultMPL1 = Dmpl.getText();
		WebElement Dsc = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.checkdefSC, j,driver);
		verticalinternalscroll(Dsc,driver);
		String DefaultSC1 = Dsc.getText();
		List app = new ArrayList();
		app.add(currentMPL1);
		app.add(currentSC1);
		app.add(DefaultMPL1);
		app.add(DefaultSC1);
		app.add(PreviousMPL1);
		app.add(PreviousSC1);
		return app;
	}

	public String[] getvalMPLSC(EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)throws IOException 
	{
		WebElement Csc = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currentSC, i,driver);
		String currentSC = Csc.getAttribute("value");
		WebElement Cmpl = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currentMPL, i,driver);
		String currentMPL = Cmpl.getAttribute("value");
		WebElement Pmpl = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.previousMPL, i,driver);
		String PreviousMPL = Pmpl.getText();
		WebElement Psc = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.previousSC, i,driver);
		String PreviousSC = Psc.getText();
		WebElement Dmpl = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultMPL, i,driver);
		String DefaultMPL = Dmpl.getText();
		WebElement Dsc = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultSC, i,driver);
		String DefaultSC = Dsc.getText();
		return new String[] { currentMPL, currentSC, PreviousMPL, PreviousSC,DefaultMPL, DefaultSC };
	}

	public void saveMPLSC(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)
					throws IOException {
		WebElement element = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.currentSC, i,driver);
		WebElement ele = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.currentMPL, i,driver);
		String currentSC1 = element.getAttribute("value");
		String currentmpll = element.getAttribute("value");
		if (currentSC1.equals("")) {
			currentSC1 = "2".toString();
			element.sendKeys(currentSC1);
		}
		if (currentmpll.equals("")) {
			currentmpll = "2".toString();
			ele.sendKeys(currentmpll);
		}
		int currentSC = Integer.parseInt(currentSC1);
		int currentMPL2 = currentSC + 1;
		String currentMPL1 = Integer.toString(currentMPL2);
		ele.clear();
		ele.sendKeys(currentMPL1);
		objEnhancedArticleLookup.mplscSAVE.click();
		waitForJSandJQueryToLoad(driver);;
		//waitFor(2);
		String errormsg = getText(objEnhancedArticleLookup.lessMPLSC);
		if (errormsg.equals("MPL should be less than or equal to SC.")) {
			htmlToExtent(cName,mName,extLogger,driver,"Scenario: MPL current value should be less than SC current value;"+currentMPL1+";"+ currentSC1+";Pass");
			//Report_AddStep("testcase","Scenario: MPL current value should be less than SC current value",	currentMPL1, currentSC1, "Pass");
		objEnhancedArticleLookup.errorcancelMPLSCtab.click();
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Scenario: MPL current value should be less than SC current value;"+currentMPL1+";"+ currentSC1+";Fail");
			//Report_AddStep("testcase","Scenario: MPL current value should be less than SC current value",currentMPL1, currentSC1, "Fail");
			objEnhancedArticleLookup.errorcancelMPLSCtab.click();
		}
		currentSC1 = element.getAttribute("value");
		currentmpll = element.getAttribute("value");
		if ((currentSC1.equals("")) && (currentmpll.equals(""))) {
			currentmpll = "1".toString();
			ele.sendKeys(currentmpll);
			currentSC1 = "2".toString();
			element.sendKeys(currentSC1);
			int a = Integer.parseInt(currentmpll);
			int b = Integer.parseInt(currentSC1);
			b = b + 2;
			a = b - 1;
			currentmpll = Integer.toString(a);
			currentSC1 = Integer.toString(b);
			element.clear();
			ele.clear();
			element.sendKeys(currentSC1);
			ele.sendKeys(currentmpll);
		} else if ((currentSC1.equals("")) && (!(currentmpll.equals("")))) {
			currentmpll = ele.getAttribute("value");
			int a = Integer.parseInt(currentmpll);
			a = a + 5;
			currentmpll = Integer.toString(a);
			ele.clear();
			ele.sendKeys(currentmpll);
			currentSC1 = "2".toString();
			element.sendKeys(currentSC1);
			int b = Integer.parseInt(currentSC1);
			b = a + 1;
			currentSC1 = Integer.toString(b);
			element.clear();
			element.sendKeys(currentSC1);
		} else if ((!(currentSC1.equals(""))) && (currentmpll.equals(""))) {
			currentSC1 = ele.getAttribute("value");
			int b = Integer.parseInt(currentSC1);
			b = b + 5;
			currentSC1 = Integer.toString(b);
			element.clear();
			element.sendKeys(currentSC1);
			currentmpll = "2".toString();
			ele.sendKeys(currentmpll);
			int a = Integer.parseInt(currentmpll);
			a = b - 1;
			currentmpll = Integer.toString(a);
			ele.clear();
			ele.sendKeys(currentmpll);
		} else {
			String currentmpl = ele.getAttribute("value");
			int currentMPL = Integer.parseInt(currentmpl);
			if (currentMPL == currentSC) {
				if ((currentSC == 1) || (currentSC == 0)) {
					currentSC = 2;
					currentMPL = 1;
				} else {
					currentSC = currentSC + 2;
					currentMPL = currentSC - 1;
				}
				currentMPL1 = Integer.toString(currentMPL);
				currentSC1 = Integer.toString(currentSC);
				element.clear();
				ele.clear();
				element.sendKeys(currentSC1);
				ele.sendKeys(currentMPL1);
			} else {
				currentSC = currentSC + 2;
				currentMPL = currentSC - 1;
				currentMPL1 = Integer.toString(currentMPL);
				currentSC1 = Integer.toString(currentSC);
				element.clear();
				ele.clear();
				element.sendKeys(currentSC1);
				ele.sendKeys(currentMPL1);
			}
		}
		objEnhancedArticleLookup.mplscSAVE.click();
		waitForJSandJQueryToLoad(driver);;
		//waitFor(2);
		String sucmsg = getText(objEnhancedArticleLookup.sucmsgMPLSC);
		if (sucmsg.equals("MPL/SC/FACING Values Updated Successfully")) {
			htmlToExtent(cName,mName,extLogger,driver,"Scenario: MPL current value and SC current value saved sucessfully;;;Pass");
			//Report_AddStep("testcase","Scenario: MPL current value and SC current value saved sucessfully","", "", "Pass");
			objEnhancedArticleLookup.errorcancelMPLSC.click();
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Scenario: MPL current value and SC current value not saved;;;Fail");
			//Report_AddStep("testcase","Scenario: MPL current value and SC current value not saved","", "", "Fail");
			objEnhancedArticleLookup.errorcancelMPLSC.click();
		}
	}

	public void editExpirydate(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws IOException, SQLException,
			ParseException, AWTException {
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
		objEnhancedArticleLookup.editbutton.click();
		waitFor(1);
		if (objEnhancedArticleLookup.edatetab.isDisplayed()) {
			objEnhancedArticleLookup.edatetab.click();
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"The article - " + ranArticle+ " has no option for Expiry date;;;Pass");
			//Report_AddStep("testcase", "The article - " + ranArticle+ " has no option for Expiry date", "", "", "Pass");
			objEnhancedArticleLookup.cancel.click();
			return;
		}
		waitFor(1);
		List<WebElement> UOMList = objEnhancedArticleLookup.UOMedatelist;
		int UOMsize = UOMList.size();
		//System.out.println("Total UOM are: " + UOMsize); // comment
		if (UOMsize >= 1) {
			for (int i = 1; i <= UOMsize; i++) {
				waitFor(5);
				WebElement elements = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.UOMedate, i,driver);
				WebElement ele = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.UOMname, i + 1,driver);
				String UOMname = ele.getText();
				if (UOMname.equals("EA")) {
					expdate = getedate(objEnhancedArticleLookup, elements,
							UOMname, i,driver);
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[0]);
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[1]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[2]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMname+ "- dates added succesfully;;;Pass");
					//Report_AddStep("testcase", "" + UOMname+ "- dates added succesfully", "", "", "Pass");
				} else if (UOMname.equals("CA1")) {
					expdate = getedate(objEnhancedArticleLookup, elements,
							UOMname, i,driver);
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[0]);
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[1]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[2]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMname+ "- dates added succesfully;;;Pass");
					//Report_AddStep("testcase", "" + UOMname							+ "- dates added succesfully", "", "", "Pass");
				} else if (UOMname.equals("KG")) {
					expdate = getedate(objEnhancedArticleLookup, elements,
							UOMname, i,driver);
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[0]);
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[1]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[2]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMname+ "- dates added succesfully;;;Pass");
					//Report_AddStep("testcase", "" + UOMname							+ "- dates added succesfully", "", "", "Pass");
				} else if (UOMname.equals("CAR")) {
					expdate = getedate(objEnhancedArticleLookup, elements,
							UOMname, i,driver);
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[0]);
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[1]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[2]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMname+ "- dates added succesfully;;;Pass");
					//Report_AddStep("testcase", "" + UOMname							+ "- dates added succesfully", "", "", "Pass");
				} else {
					expdate = getedate(objEnhancedArticleLookup, elements,
							UOMname, i,driver);
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[0]);
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[1]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					waitFor(1);
					objEnhancedArticleLookup.enteredate.sendKeys(expdate[2]);
					if ((i == 2) || (i == 3) || (i == 4)) {
						int s = i;
						WebElement radiobutton = prepareWebElementWithDynamicXpathWithInt(
								objEnhancedArticleLookup.UOMedate, s,driver);
						radiobutton.click();
					}
					objEnhancedArticleLookup.addedate.click();
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMname+ "- dates added succesfully;;;Pass");
					//Report_AddStep("testcase", "" + UOMname							+ "- dates added succesfully", "", "", "Pass");
				}
			}
			verticalScroll(driver);
			objEnhancedArticleLookup.canceledate.click();
		}
		scrollUp(driver);
	}

	public void vertscroll(WebDriver driver) {
		verticalScroll(driver);
	}

	public void vertscrollup(WebDriver driver) {
		scrollUp(driver);
	}
	
	public void verticalinternalscroll(WebElement element,WebDriver driver){ 
		((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView();", element);
	}

	public String[] getedate(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			WebElement elements, String UOMname, int i,WebDriver driver) throws ParseException,
			IOException {
		elements.click();
		String currentdate = common.getCurrentDate();
		String firstedate = common.addDaystoCurrentDate(1);
		String seconddate = common.addDaystoCurrentDate(2);
		String thirddate = common.addDaystoCurrentDate(3);
		List<WebElement> edateList = objEnhancedArticleLookup.edatelist;
		int edatesize = edateList.size();
		List<String> dates_ea = new ArrayList<>();
		List<String> dates_kg = new ArrayList<>();
		List<String> dates_ca1 = new ArrayList<>();
		List<String> dates_car = new ArrayList<>();
		List<String> dates_mpk = new ArrayList<>();
		for (int k = 1; k <= edatesize; k++) {
			WebElement expiDate = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.edate, k,driver);
			WebElement expiDate1 = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.edate1, k,driver);
			waitFor(2);
			String expUOM = expiDate.getAttribute("class");
			if (expUOM.contains("expireDatePopUp-EA")) {
				String a = expiDate1.getText();
				dates_ea.add(a);
			} else if (expUOM.contains("expireDatePopUp-CA1")) {
				String a = expiDate1.getText();
				dates_ca1.add(a);
			} else if (expUOM.contains("expireDatePopUp-CAR")) {
				String a = expiDate1.getText();
				dates_car.add(a);
			} else if (expUOM.contains("expireDatePopUp-KG")) {
				String a = expiDate1.getText();
				dates_kg.add(a);
			} else {
				String a = expiDate1.getText();
				dates_mpk.add(a);
			}
			if (k == edatesize) {
				if (UOMname.equals("EA")) {
					boolean check1 = dates_ea.contains(firstedate);
					int l = 5;
					if (check1 == false) {
					} else {
						do {
							firstedate = common.addDaystoCurrentDate(l);
							check1 = dates_ea.contains(firstedate);
							l++;
							if (check1 == false) {
								break;
							}
						} while (check1 = true);
					}
					boolean check2 = dates_ea.contains(seconddate);
					int m = 12;
					if (check2 == false) {
					} else {
						do {
							seconddate = common.addDaystoCurrentDate(m);
							check2 = dates_ea.contains(seconddate);
							m++;
							if (check2 == false) {
								break;
							}
						} while (check2 = true);
					}
					boolean check3 = dates_ea.contains(thirddate);
					int n = 19;
					if (check3 == false) {
					} else {
						do {
							thirddate = common.addDaystoCurrentDate(n);
							check3 = dates_ea.contains(thirddate);
							m++;
							if (check3 == false) {
								break;
							}
						} while (check3 = true);
					}
				}

				if (UOMname.equals("KG")) {
					boolean check1 = dates_kg.contains(firstedate);
					int l = 5;
					if (check1 == false) {
					} else {
						do {
							firstedate = common.addDaystoCurrentDate(l);
							check1 = dates_kg.contains(firstedate);
							l++;
							if (check1 == false) {
								break;
							}
						} while (check1 = true);
					}
					boolean check2 = dates_kg.contains(seconddate);
					int m = 12;
					if (check2 == false) {
					} else {
						do {
							seconddate = common.addDaystoCurrentDate(m);
							check2 = dates_kg.contains(seconddate);
							m++;
							if (check2 == false) {
								break;
							}
						} while (check2 = true);
					}
					boolean check3 = dates_kg.contains(thirddate);
					int n = 19;
					if (check3 == false) {
					} else {
						do {
							thirddate = common.addDaystoCurrentDate(n);
							check3 = dates_kg.contains(thirddate);
							m++;
							if (check3 == false) {
								break;
							}
						} while (check3 = true);
					}
				}

				if (UOMname.equals("CA1")) {
					boolean check1 = dates_ca1.contains(firstedate);
					int l = 5;
					if (check1 == false) {
					} else {
						do {
							firstedate = common.addDaystoCurrentDate(l);
							check1 = dates_ca1.contains(firstedate);
							l++;
							if (check1 == false) {
								break;
							}
						} while (check1 = true);
					}
					boolean check2 = dates_ca1.contains(seconddate);
					int m = 12;
					if (check2 == false) {
					} else {
						do {
							seconddate = common.addDaystoCurrentDate(m);
							check2 = dates_ca1.contains(seconddate);
							m++;
							if (check2 == false) {
								break;
							}
						} while (check2 = true);
					}
					boolean check3 = dates_ca1.contains(thirddate);
					int n = 19;
					if (check3 == false) {
					} else {
						do {
							thirddate = common.addDaystoCurrentDate(n);
							check3 = dates_ca1.contains(thirddate);
							m++;
							if (check3 == false) {
								break;
							}
						} while (check3 = true);
					}
				}
				if (UOMname.equals("CAR")) {
					boolean check1 = dates_car.contains(firstedate);
					int l = 5;
					if (check1 == false) {
					} else {
						do {
							firstedate = common.addDaystoCurrentDate(l);
							check1 = dates_car.contains(firstedate);
							l++;
							if (check1 == false) {
								break;
							}
						} while (check1 = true);
					}
					boolean check2 = dates_car.contains(seconddate);
					int m = 12;
					if (check2 == false) {
					} else {
						do {
							seconddate = common.addDaystoCurrentDate(m);
							check2 = dates_car.contains(seconddate);
							m++;
							if (check2 == false) {
								break;
							}
						} while (check2 = true);
					}
					boolean check3 = dates_car.contains(thirddate);
					int n = 19;
					if (check3 == false) {
					} else {
						do {
							thirddate = common.addDaystoCurrentDate(n);
							check3 = dates_car.contains(thirddate);
							m++;
							if (check3 == false) {
								break;
							}
						} while (check3 = true);
					}
				}
				if (UOMname.equals("MPK")) {
					boolean check1 = dates_mpk.contains(firstedate);
					int l = 5;
					if (check1 == false) {
					} else {
						do {
							firstedate = common.addDaystoCurrentDate(l);
							check1 = dates_mpk.contains(firstedate);
							l++;
							if (check1 == false) {
								break;
							}
						} while (check1 = true);
					}
					boolean check2 = dates_mpk.contains(seconddate);
					int m = 12;
					if (check2 == false) {
					} else {
						do {
							seconddate = common.addDaystoCurrentDate(m);
							check2 = dates_mpk.contains(seconddate);
							m++;
							if (check2 == false) {
								break;
							}
						} while (check2 = true);
					}
					boolean check3 = dates_mpk.contains(thirddate);
					int n = 19;
					if (check3 == false) {
					} else {
						do {
							thirddate = common.addDaystoCurrentDate(n);
							check3 = dates_mpk.contains(thirddate);
							m++;
							if (check3 == false) {
								break;
							}
						} while (check3 = true);
					}
				}
			}
		}
		//System.out.println(firstedate +" "+ seconddate +" "+  thirddate);
		return new String[] { firstedate, seconddate, thirddate };
	}
	
	public void SitSoo(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,WebDriver driver) throws IOException
	{
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String ranArticle = results.get(num).get(0).toString();
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			String sit = objEnhancedArticleLookup.inTransit.getText();
			String soo = objEnhancedArticleLookup.onOrder.getText();
			if((sit.equals(results.get(num).get(1).toString()))&&(soo.equals(results.get(num).get(2).toString())))
			{
				htmlToExtent(cName,mName,extLogger,driver,"SIT and SOO validation succesfull for article - "+ranArticle+";;;Pass");
				//Report_AddStep("testcase","SIT and SOO validation succesfull for article - "+ranArticle+"" , "", "", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"SIT and SOO validation unsuccesfull for article - "+ranArticle+";;;Fail");
				//Report_AddStep("testcase","SIT and SOO validation unsuccesfull for article - "+ranArticle+"" , "", "", "Fail");
			}
			clear(objEnhancedArticleLookup,driver);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No details Found in DB to verify SIT and SOO;;;Fail");
			//Report_AddStep("testcase","No details Found in DB to verify SIT and SOO" , "", "", "Fail");
		}
	}
	
	

	
	public String[] unknowItem(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String artname,String type,WebDriver driver) throws IOException
	{
		String SOH="";
		String endSOH="";
		String endSOHUom = "";
		String ranArticle = "";
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for "+artname+" article ("+type+") - "+ranArticle+";;;Pass");
			//Report_AddStep("testcase", "The below details is for "+artname+" article ("+type+") - "+ranArticle+"", "", "","");
			enterNRArt(objEnhancedArticleLookup, ranArticle,driver);
			waitFor(1);
			selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
			if(objEnhancedArticleLookup.rangingRequest.getAttribute("class").contains("disabled"))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Request for ranging option is disabled;;;Fail");
			}
			else
			{
			objEnhancedArticleLookup.rangingRequest.click();
			waitForJSandJQueryToLoad(driver);;
			if(objEnhancedArticleLookup.rangingRequestcloselist.size()!=0)
			{
				objEnhancedArticleLookup.rangingRequestclose.click();
			}
			String adjReason = objEnhancedArticleLookup.adjReason.getText();
			selectByVisibleText(objEnhancedArticleLookup.adjReasonDD, adjReason);
			String[] end=null;
			switch(artname)
			{
			case "RandomWeighted":
				end = adjSOH(objEnhancedArticleLookup, endSOH, endSOHUom, "52.000",driver);
				SOH="52.000";
				break;
			case "Weighted":
				end = adjSOH(objEnhancedArticleLookup, endSOH, endSOHUom, "52.000",driver);
				SOH="52.000";
				break;
			case "Litre":
				end = adjSOH(objEnhancedArticleLookup, endSOH, endSOHUom, "52.000",driver);
				SOH="52.000";
				break;
			case "PBD":
				end = adjSOH(objEnhancedArticleLookup, endSOH, endSOHUom, "52",driver);
				SOH="52";
				break;
			case "NonPI":
				end = adjSOH(objEnhancedArticleLookup, endSOH, endSOHUom, "52",driver);
				SOH="52";
				break;
			}
			endSOH = end[0];
			endSOHUom = end[1];
			String successRangingReq = "Ranging Request has been successfully submitted";
			String sucTimeMsg = "Please Note: Your request may take up to 1 hour to process";
			if((objEnhancedArticleLookup.successRangingReq.getText().equals(successRangingReq))&&(objEnhancedArticleLookup.sucTimeMsg.getText().equals(sucTimeMsg))
					&&((objEnhancedArticleLookup.sucRangingArt.getText()).contains(ranArticle)&&(objEnhancedArticleLookup.sucRangingMsg.getText().contains(adjReason))))
			{
				htmlToExtent(cName,mName,extLogger,driver,""+successRangingReq+", "+objEnhancedArticleLookup.sucRangingArt.getText()+", "+objEnhancedArticleLookup.sucRangingMsg.getText()+";;;Pass");
				//Report_AddStep("testcase",""+successRangingReq+", "+objEnhancedArticleLookup.sucRangingArt.getText()+", "+objEnhancedArticleLookup.sucRangingMsg.getText()+"", "","", "Pass");
				objEnhancedArticleLookup.successRangingClose.click();
				waitFor(1);
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"Ranging Request has not been successfully submitted;;;Fail");
				//Report_AddStep("testcase","Ranging Request has not been successfully submitted", "","", "Fail");
			}	
			}
			scrollUp(driver);
		}
		else
		{
			if(type.equals("ALC status as 'ES'"))
			{
				htmlToExtent(cName,mName,extLogger,driver,"No Details found in DB for "+artname+" articles to validate unknownItem("+type+");;;Pass");
				//Report_AddStep("testcase","No Details found in DB for "+artname+" articles to validate unknownItem("+type+")", "","", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No Details found in DB for "+artname+" articles to validate unknownItem("+type+");;;Fail");
				//Report_AddStep("testcase","No Details found in DB for "+artname+" articles to validate unknownItem("+type+")", "","", "Fail");	
			}
		}
		return new String[] { ranArticle,SOH, endSOH,endSOHUom };
	}

	public String[] adjSOH(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String endSOH,String endSOHUom,String SOHvalue,WebDriver driver)
	{
		objEnhancedArticleLookup.adjSOH.click();
		objEnhancedArticleLookup.adjSOH.clear();
		objEnhancedArticleLookup.adjSOH.sendKeys(SOHvalue);
		waitFor(3);
		waitForJSandJQueryToLoad(driver);;
		endSOH = objEnhancedArticleLookup.endSOH.getText();
		endSOHUom = objEnhancedArticleLookup.endSOHUom.getText();
		objEnhancedArticleLookup.saveSOH.click();waitFor(3);
		waitForJSandJQueryToLoad(driver);
		return new String[] { endSOH,endSOHUom };
	}
	
	public List<List<Object>> geteDate(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws AWTException, IOException,
			NumberFormatException, ParseException {
		List<List<Object>> ExpiryDateTable = getValuesFromTable(objEnhancedArticleLookup.edatelist);
		ExpiryDateTable = convertDateFormat(objEnhancedArticleLookup.edatelist,
				0);
		ExpiryDateTable = removeIndex(ExpiryDateTable, "1");
		ExpiryDateTable = removeIndex(ExpiryDateTable, "2");
		// ExpiryDateTable = removeAndReplaceIndex(ExpiryDateTable, "0");
		int s = ExpiryDateTable.size();
		return ExpiryDateTable;
	}

	public List<List<Object>> geteDateappln(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver)
					throws AWTException, IOException, NumberFormatException,
					ParseException {
		waitForJSandJQueryToLoad(driver);;
		waitFor(2);
		List<List<Object>> ExpiryDateTable = getValuesFromTable(objEnhancedArticleLookup.edateappln);
		ExpiryDateTable = convertDateFormat(
				objEnhancedArticleLookup.edateappln, 0);
		
		ExpiryDateTable.remove(0);
		int s = ExpiryDateTable.size();
		return ExpiryDateTable;
	}

	public List<List<Object>> dbReports(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			List<List<Object>> results, int numOfArt,WebDriver driver) throws AWTException,
			IOException {
		if ((numOfArt == (results.size())) || ((results.size()) > numOfArt)) {
			results = results.subList(0, numOfArt);
			results = removeIndex(results, "0");
			// results = replacenullToZero(results);
			// results = replaceElement(results);
			// results= removeExtraSpaces(results,1);
			// results=removeLeadingZero(results, 10);
		} else {
			results = results.subList(0, results.size());
			results = removeIndex(results, "0");
		}
		return results;
	}

	public void waitFn(WebDriver driver) {
		waitForJSandJQueryToLoad(driver);;
	}
	
	public WebElement ltoActiveStatus(EnhancedArticleLookUpObjects objEnhancedArticleLookup,int l,WebDriver driver) 
	{
		WebElement lto = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.LTOActive, l,driver);
		return lto;
	}

	/*
	 * public void nearbyStorecheck(EnhancedArticleLookUpObjects
	 * objEnhancedArticleLookup,String dist,String dist1,int sale_org) throws
	 * IOException { if(sale_org==1) {
	 * objEnhancedArticleLookup.salesOrg.click();
	 * objEnhancedArticleLookup.allStore.click(); }
	 * 
	 * int count=0; int count1=0; for(int i=1;i<=6;i++) { if(i==1){ dist =
	 * "20";} if(i==2){ dist = "30";} if(i==3){ dist = "40";} if(i==4){ dist =
	 * "50";} if(i==5){ dist = "80";} if(i==6){ dist = "100";} for(int
	 * j=1;j<=7;j++) { if(j==1){ dist1 = "10";} if(j==2){ dist1 = "20";}
	 * if(j==3){ dist1 = "30";} if(j==4){ dist1 = "40";} if(j==5){ dist1 =
	 * "50";} if(j==6){ dist1 = "80";} if(j==7){ dist1 = "100";}
	 * objEnhancedArticleLookup.siteNo.clear();
	 * objEnhancedArticleLookup.siteNo.sendKeys
	 * (getContext().getStringProperty("store"));
	 * selectByVisibleText(objEnhancedArticleLookup.distance, dist);
	 * selectByVisibleText(objEnhancedArticleLookup.maxStores, dist1);
	 * objEnhancedArticleLookup.searchNear.click(); waitForJSandJQueryToLoad(driver);;
	 * //if(objEnhancedArticleLookup.detailTable.size()==1) String table =
	 * objEnhancedArticleLookup.detailTable1.getAttribute("class");
	 * if(table.contains("hideBlock")) {
	 * Report_AddStep("testcase","No Details are available for Distance "
	 * +dist+"KM with maximum no of stores selected as "+dist1+"" , "", "",
	 * "Fail"); count1++; break; } else { int y =
	 * objEnhancedArticleLookup.paginationval.size(); y = y-5; int d =
	 * Integer.parseInt(dist1); if(y==(d/10)) { count++; } else {
	 * Report_AddStep("testcase","Details are available for Distance "+dist+
	 * "KM with maximum no of stores selected as "
	 * +dist1+" but pagination is not matched" , "", "", "Fail"); count++; } } }
	 * if(count1>1) { Report_AddStep("testcase",
	 * "Except for the above mentioned values for max no of stores" , "", "",
	 * "Pass"); } int s =(7-count1); //if((s>0)&&(s<=7)) if(count>0) {
	 * Report_AddStep("testcase","Details are available for Distance "+dist+
	 * "KM with all other maximum no of stores selected" , "", "", "Pass"); } }
	 * }
	 */

	public void nearbyStorecheck(EnhancedArticleLookUpObjects objEnhancedArticleLookup, String dist,String dist1,WebDriver driver) throws IOException 
	{
		objEnhancedArticleLookup.siteNo.clear();
		objEnhancedArticleLookup.siteNo.sendKeys(getContext().getStringProperty("store"));
		int count = 0;
		int count1 = 0;
		for (int i = 1; i <= 4; i++) 
		{
			if (i == 1) 
			{
				dist = "20";
			}
			if (i == 2)
			{
				dist = "20";
			}
			if (i == 3) 
			{
				dist = "100";
			}
			if (i == 4) 
			{
				dist = "100";
			}
			for (int j = 1; j <= 1; j++) 
			{
				if (i == 1)
				{
					dist1 = "10";
					htmlToExtent(cName,mName,extLogger,driver,"*****Checking for 1005 sales Org only*****;;;Pass");
					//Report_AddStep("testcase","*****Checking for 1005 sales Org only*****", "","", "");
				}
				if (i == 2) 
				{
					dist1 = "100";
				}
				if (i == 3) 
				{
					dist1 = "100";
				}
				if (i == 4) 
				{
					dist1 = "100";
					objEnhancedArticleLookup.salesOrg.click();
					int size = objEnhancedArticleLookup.salesOrgDDlist.size();
					List DD = new ArrayList();
					for(int s=1;s<=size;s++)
					{
						WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.salesOrgDD, s,driver);
						DD.add(element.getText());
					}
					htmlToExtent(cName,mName,extLogger,driver,"Sales Org Drop down has "+DD+";;;Pass");
					//Report_AddStep("testcase","Sales Org Drop down has "+DD, "", "", "");
					objEnhancedArticleLookup.allStore.click();
					htmlToExtent(cName,mName,extLogger,driver,"*****Checking for All sales Org *****;;;Pass");
					//Report_AddStep("testcase","*****Checking for All sales Org *****", "", "", "");
				}
				selectByVisibleText(objEnhancedArticleLookup.distance, dist);
				selectByVisibleText(objEnhancedArticleLookup.maxStores, dist1);
				objEnhancedArticleLookup.searchNear.click();
				waitForJSandJQueryToLoad(driver);;
				// if(objEnhancedArticleLookup.detailTable.size()==1)
				String table = objEnhancedArticleLookup.detailTable1.getAttribute("class");
				if (table.contains("hideBlock"))
				{
					htmlToExtent(cName,mName,extLogger,driver,"No Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + ";;;Info");
					//Report_AddStep("testcase","No Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + "", "", "", "Fail");
					count1++;
					break;
				} 
				else 
				{
					int c=0;
					int size = objEnhancedArticleLookup.nBslist.size();
					List DD = new ArrayList();
					for(int s=1;s<=size;s++)
					{
						WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.nBsSOH, s,driver);
						if(element.getText().isEmpty())
						{
							htmlToExtent(cName,mName,extLogger,driver,"SOH is not present for row number "+s+";;;Fail");
							//Report_AddStep("testcase","SOH is not present for row number "+s+"", "", "", "Fail");
						}
						else
						{
							DD.add(element.getText());
						}
						WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.nBsdist, s,driver);
						String distance= elements.getText();
						int d = (int)Math.round(Float.parseFloat(distance));
						if(d<=Integer.parseInt(dist))
						{
							c++;
						}						
					}	
					htmlToExtent(cName,mName,extLogger,driver,"SOH values are "+DD+";;;Pass");
					//Report_AddStep("testcase","SOH values are "+DD, "", "", "Pass");
					if(c==size)
					{
						htmlToExtent(cName,mName,extLogger,driver,"All Distance are below "+dist+";;;Pass");
						//Report_AddStep("testcase","All Distance are below "+dist+"","", "", "Pass");
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver,"Distance are not below "+dist+";;;Fail");
						//Report_AddStep("testcase","Distance are not below "+dist+"","", "", "Fail");
					}
					}
					int y = objEnhancedArticleLookup.paginationval.size();
					y = y - 2;
					int d = Integer.parseInt(dist1);
					if (y >= 1) 
					{
						htmlToExtent(cName,mName,extLogger,driver,"Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page 1;;;Pass");
						//Report_AddStep("testcase","Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page 1", "", "", "Pass");
						count++;
						if (y == 1) 
						{}
						else 
						{
							for (int k = 3; k <= y + 2; k++) 
							{
								int val = k - 1;
								WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.pagClick, k,driver);
								elements.click();
								waitForJSandJQueryToLoad(driver);
								table = objEnhancedArticleLookup.detailTable1.getAttribute("class");
								if (table.contains("hideBlock")) 
								{
									htmlToExtent(cName,mName,extLogger,driver,"No Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val+ ";;;Fail");
									//Report_AddStep("testcase","No Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val+ "", "", "", "Fail");
								} else 
								{
									htmlToExtent(cName,mName,extLogger,driver,"Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val+ ";;;Pass");
									//Report_AddStep("testcase","Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val+ "", "", "", "Pass");
								}
							}
							WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.pagClick, 2,driver);
							element.click();
							waitForJSandJQueryToLoad(driver);
						}
					}
				}
			}
		}

	public void enterArt(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws IOException 
	{
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.clear();
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
	}
	
	public void enterArt1(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws IOException 
	{
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.clear();
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		//selectionOfArticles(objEnhancedArticleLookup, ranArticle);
	}
	
	public void enterNRArt(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws IOException 
	{
		objEnhancedArticleLookup.advSearch.click();
		objEnhancedArticleLookup.rangedCheck.click();
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.clear();
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
	}
	
	public void enterArticle(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String ranArticle,WebDriver driver) throws IOException 
	{
		objEnhancedArticleLookup.searchText.click();
		objEnhancedArticleLookup.searchText.clear();
		objEnhancedArticleLookup.searchText.sendKeys(ranArticle);
		objEnhancedArticleLookup.clickGO.click();
		waitFn(driver);
		selectionOfArticles(objEnhancedArticleLookup, ranArticle,driver);
		if(objEnhancedArticleLookup.articleNtFound.isDisplayed())
		{
			objEnhancedArticleLookup.articleNtFoundclose.click();
			waitFor(1);
			enterNRArt(objEnhancedArticleLookup, ranArticle,driver);
		}
	}
	
	public void bigWadv(EnhancedArticleLookUpObjects objEnhancedArticleLookup,String style,String size,String colour,String ranArticle,String check,String advType,WebDriver driver) throws IOException, AWTException
	{
		List app = new ArrayList();
		List DB = new ArrayList();
		List<List<Object>> applist = new ArrayList<List<Object>>();
		List<List<Object>> DBlist = new ArrayList<List<Object>>();
		objEnhancedArticleLookup.advSearch.click();
		objEnhancedArticleLookup.advSearchStyle.click();
		objEnhancedArticleLookup.advSearchStyle.sendKeys(style);
		objEnhancedArticleLookup.advstyleVerify.click();
		waitForJSandJQueryToLoad(driver);;
		switch(advType)
		{
		case "colour":
			selectByVisibleText(objEnhancedArticleLookup.sizeDD, size);
			selectByVisibleText(objEnhancedArticleLookup.colorDD, colour);
			break;
		case "size":
			selectByVisibleText(objEnhancedArticleLookup.sizeDD, size);
			break;
		}
		objEnhancedArticleLookup.clickGO.click();
		waitForJSandJQueryToLoad(driver);;
		int sze = objEnhancedArticleLookup.ntrangedlist.size();
		if(sze>1)
		{
			String art = objEnhancedArticleLookup.artClick.getText();
			objEnhancedArticleLookup.artClick.click();
			waitForJSandJQueryToLoad(driver);;
			verticalScroll(driver);
			objEnhancedArticleLookup.addtionalItem.click();
			waitFor(1);
			objEnhancedArticleLookup.style.click();
			waitFor(1);
			String styles = objEnhancedArticleLookup.styleValue.getText();
			app.add(styles);
			DB.add(style);
			switch(advType)
			{
			case "size":
				objEnhancedArticleLookup.size.click();
				waitFor(1);
				String sizeapp = objEnhancedArticleLookup.sizeValue.getText();
				app.add(sizeapp);
				DB.add(size);
				break;
			}
			applist.add(app);
			DBlist.add(DB);
			htmlToExtent(cName,mName,extLogger,driver,"Comparing "+check+" values with backend;;;Pass");
							ElementContains1(cName, mName,extLogger,driver, applist, DBlist);			
		}
		else if(sze==1)
		{
			String[] art = splitString(objEnhancedArticleLookup.article.getText(), " - ");
			verticalScroll(driver);
			objEnhancedArticleLookup.addtionalItem.click();
			waitFor(1);
			objEnhancedArticleLookup.style.click();
			waitFor(1);
			String styles = objEnhancedArticleLookup.styleValue.getText();
			objEnhancedArticleLookup.size.click();
			waitFor(1);
			String sizeapp = objEnhancedArticleLookup.sizeValue.getText();
			String colorapp = objEnhancedArticleLookup.colorValue.getText();	
			app.add(art[0]);
			DB.add(ranArticle);
			app.add(styles);
			DB.add(style);
			app.add(sizeapp);
			DB.add(size);
			app.add(colorapp);
			DB.add(colour);
			applist.add(app);
			DBlist.add(DB);
			htmlToExtent(cName,mName,extLogger,driver,"Comparing "+check+" values with backend;;;Pass");
							ElementContains1(cName, mName,extLogger,driver, applist, DBlist);
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No articles available in application to verify bigW advance serach;;;Fail");
		}
		waitFor(2);
		scrollUp(driver);
		scrollUp(driver);
		waitFor(1);
		clickOnArticleReportReport(objEnhancedArticleLookup,driver);
	}

	public List facingcheck(EnhancedArticleLookUpObjects objEnhancedArticleLookup,int curFacing,String ranArticle,int k,WebDriver driver) throws IOException
	{
		List a= new ArrayList();
		double defaultMPL,defaultSC;
		WebElement curMPL = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currMPL, k,driver);
		String one=curMPL.getAttribute("value");		
		double currentMPL = (double)curFacing/Double.parseDouble(one);
		WebElement deffac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultFacing, k,driver);
		WebElement defMPL = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultMPL1, k,driver);
		String three = defMPL.getText();
		if(deffac.getText().equals("")){defaultMPL = 1;}else{
		defaultMPL =  Double.parseDouble(deffac.getText())/ Double.parseDouble(defMPL.getText());}
		WebElement curSC = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currSC, k,driver);
		String two = curSC.getAttribute("value");
		double currentSC =(double)curFacing/Double.parseDouble(two);
		deffac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultFacing, k,driver);
		WebElement defSC = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultSC1, k,driver);
		String four = defSC.getText();
		if(deffac.getText().equals("")){defaultSC = 1;}else{
		defaultSC = Double.parseDouble(deffac.getText())/Double.parseDouble(defSC.getText());}
		
		WebElement prevMPL = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.PREVIOUSMPL1, k,driver);
		String five=prevMPL.getText();
		WebElement prevSC = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.previousSC1, k,driver);
		String six = prevSC.getText();
		
		if((currentMPL==defaultMPL)&&(currentSC==defaultSC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Facing ratio is equal with MPL,SC for the article - " + ranArticle+ ";;;Pass");
			//Report_AddStep("testcase", "Facing ratio is equal with MPL,SC for the article - " + ranArticle+ "", "", "", "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Facing ratio is not equal with MPL,SC for the article - " + ranArticle+ ";;;Fail");
			//Report_AddStep("testcase", "Facing ratio is not equal with MPL,SC for the article - " + ranArticle+ "", "", "", "Fail");
		}
		waitFor(2);
		//return new String[]{curMPL.getText(),curSC.getText(),defMPL.getText(),defSC.getText(),prevMPL.getText(),prevSC.getText()};
		a.add(one);a.add(two);a.add(three);a.add(four);a.add(five);a.add(six);
		return a;
	}
	
	public List<List<Object>> facing(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,String name,WebDriver driver) throws IOException, AWTException
	{
		List<List<Object>> applic1 =new ArrayList<List<Object>>();
		List<List<Object>> application =new ArrayList<List<Object>>();
		List<List<Object>> DBList =new ArrayList<List<Object>>();
		List DB=new ArrayList();
		List uom=new ArrayList();
		String ranArticle = "";
		if (results.size() != 0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			//ranArticle="19100";
			DB.add(ranArticle);
			DBList.add(DB);
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for "+name+" article - "+ranArticle+";;;Pass");
			//Report_AddStep("testcase", "The below details is for article - "+ranArticle+"", "", "","");
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			if (objEnhancedArticleLookup.articleNtFound.isDisplayed()) 
			{
				htmlToExtent(cName,mName,extLogger,driver,"Article not found in application;;;Fail");
				//Report_AddStep("testcase", "Article not found", "", "", "Fail");
				objEnhancedArticleLookup.backbutton.click();
				waitFor(1);
			} else {
			objEnhancedArticleLookup.editbutton.click();
			waitForJSandJQueryToLoad(driver);;
			int uomSize =0;
			if (objEnhancedArticleLookup.mplandsctab.isDisplayed()) 
			{
				objEnhancedArticleLookup.mplandsctab.click();
				waitFor(1);
				uomSize = objEnhancedArticleLookup.selectUOM.size();
				for(int k=1;k<=uomSize;k++)
				{
					WebElement elementsuom=null;
					if(k!=1)
					{
						elementsuom = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMclick, k,driver);
						elementsuom.click();
						waitFor(1);
					}
					WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMnamee, k,driver);
					String UOMname = element.getText();
					uom.add(UOMname);
					htmlToExtent(cName,mName,extLogger,driver,"UOM - "+UOMname+";;;Pass");
					//Report_AddStep("testcase", "UOM - "+UOMname+"", "", "","");
					WebElement curfac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currFacing, k,driver);
					String currentFacing = curfac.getAttribute("value");
					int currFacing = 1+Integer.parseInt(currentFacing);
					int curFacing = Integer.parseInt(currentFacing);
					WebElement deffac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultFacing, k,driver);
					if(deffac.getText().equals("")){}else{
					int defFacing = Integer.parseInt(deffac.getText());}
				//	String[] value = facingcheck(objEnhancedArticleLookup, curFacing,ranArticle,k);				
					waitFor(1);
					curfac.clear();
					curfac.sendKeys(""+currFacing);
					objEnhancedArticleLookup.saveFacing.click();
					waitForJSandJQueryToLoad(driver);;
					if(objEnhancedArticleLookup.sucmsgMPLSC.isDisplayed())
					{
						if(objEnhancedArticleLookup.sucmsgMPLSC.getText().equals("MPL/SC/FACING Values Updated Successfully"))
						{
							htmlToExtent(cName,mName,extLogger,driver,"Facing value updated succesfully for the article - " + ranArticle+ ";;;Pass");
							//Report_AddStep("testcase", "Facing value updated succesfully for the article - " + ranArticle+ "", "", "", "Pass");
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver,"Facing value not updated for the article - " + ranArticle+ ";;;Fail");
							//Report_AddStep("testcase", "Facing value not updated for the article - " + ranArticle+ "", "", "", "Fail");
						}
						objEnhancedArticleLookup.closesuccross.click();
						waitFor(1);
					}
					scrollUp(driver);
					objEnhancedArticleLookup.editbutton.click();
					waitForJSandJQueryToLoad(driver);;
					objEnhancedArticleLookup.mplandsctab.click();
					waitFor(1);
					if(k!=1)
					{
						WebElement elements = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.UOMclick, k,driver);
						elements.click();
						waitFor(1);
					}
					curfac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currFacing, k,driver);
					curFacing = Integer.parseInt(curfac.getAttribute("value"));
					htmlToExtent(cName,mName,extLogger,driver,"After updating facing value for the article - " + ranArticle+ ";;;Pass");
					//Report_AddStep("testcase", "After updating facing value for the article - " + ranArticle+ "", "", "", "");
					List value = facingcheck(objEnhancedArticleLookup, curFacing,ranArticle,k,driver);
					application.add(value);
					
					htmlToExtent(cName,mName,extLogger,driver,"Comparing current MPL,SC,Previous MPL,SC, Default MPL,SC with replinishment tab;;;Pass");
					//Report_AddStep("testcase", "Comparing current MPL,SC,Previous MPL,SC, Default MPL,SC with replinishment tab", "", "", "");
									
					
					waitFor(1);
					DB=new ArrayList();
					WebElement curMPL = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currMPL, k,driver);
					DB.add(curMPL.getAttribute("value"));
					WebElement defMPL = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultMPL1, k,driver);
					if(defMPL.getText().equals("")){DB.add("0");}else{
					DB.add(defMPL.getText());}
					DBList.add(DB);
					DB=new ArrayList();
					WebElement curSC = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currSC, k,driver);
					DB.add(curSC.getAttribute("value"));
					WebElement defSC = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultSC1, k,driver);
					if(defSC.getText().equals("")){DB.add("0");}else{
					DB.add(defSC.getText());}
					DBList.add(DB);
					DB=new ArrayList();
					curfac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.currFacing, k,driver);
					DB.add(curfac.getAttribute("value"));
					deffac = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.defaultFacing, k,driver);
					if(deffac.getText().equals("")){DB.add("0");}else{
					DB.add(deffac.getText());}
					DBList.add(DB);
				}
				verticalinternalscroll(objEnhancedArticleLookup.canceledit,driver);
				objEnhancedArticleLookup.canceledit.click();
				waitFor(1);
				for(int k=1;k<=uomSize;k++)
				{
					WebElement ele = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.checkMPLSC, k,driver);
					ele.click();
					List applic = compareFacing(objEnhancedArticleLookup, k,driver);
					applic1.add(applic);					
				}
				replacenullToZero(application);replacenullToZero(applic1);
								ElementContains1(cName, mName,extLogger,driver, application, applic1);
				waitFor(1);
				scrollUp(driver);	
				waitFor(2);										
				clickOnArticleReportReport(objEnhancedArticleLookup,driver);
				htmlToExtent(cName,mName,extLogger,driver,"verifying facing value with DB for "+uom+";;;Pass");
				DBList.add(uom);
			} 
			else 
			{
				htmlToExtent(cName,mName,extLogger,driver,"The article - " + ranArticle+ " has no option for MPL and SC;;;Pass");
				//Report_AddStep("testcase", "The article - " + ranArticle+ " has no option for MPL and SC", "", "", "Pass");
				objEnhancedArticleLookup.canceledate.click();
				return null;
			}
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No "+name+" Articles found in DB to verify facing value;;;Fail");
			//Report_AddStep("testcase", "No Articles found in DB to verify facing value", "", "","Fail");
		}
		return DBList;
	}
	
	public String securityTag(EnhancedArticleLookUpObjects objEnhancedArticleLookup,List<List<Object>> results,WebDriver driver) throws IOException
	{
		String ranArticle = "";
		if (results.size() != 0)
		{
			int num = common.RandomFromDB(results);
			ranArticle = results.get(num).get(0).toString();
			htmlToExtent(cName,mName,extLogger,driver,"The below details is for article - "+ranArticle+";;;Pass");
			//Report_AddStep("testcase", "The below details is for article - "+ranArticle+"", "", "","");
			enterArt(objEnhancedArticleLookup, ranArticle,driver);
			objEnhancedArticleLookup.editbutton.click();
			waitForJSandJQueryToLoad(driver);;
			objEnhancedArticleLookup.STtab.click();
			waitForJSandJQueryToLoad(driver);;
			String checked = objEnhancedArticleLookup.checkSTtab.getAttribute("checked");
			if (checked == null) 
			{
				objEnhancedArticleLookup.checkSTtab.click();
				objEnhancedArticleLookup.mplscSAVE.click();
				waitForJSandJQueryToLoad(driver);;
				/*if (driver.findElements(By
						.cssSelector("#error-warn-wrapper li")).size() != 0) {*/
				if (objEnhancedArticleLookup.errormsgPOScheck.size()>0)
				{
					String msg = objEnhancedArticleLookup.errormsgPOS.getText();
					if (msg.equals("Security Tag Update FAILED"))
					{
						htmlToExtent(cName,mName,extLogger,driver,"" + msg + " for article - "+ranArticle+";;;Fail");
						//Report_AddStep("testcase", "" + msg + " for article - "+ranArticle+"", "", "","Pass");
						objEnhancedArticleLookup.closecross.click();
					}
					else if (msg.equals("Cannot Update As Security Tag Is Enabled In Central")) 
					{
						htmlToExtent(cName,mName,extLogger,driver,"" + msg + " for article - "+ranArticle+";;;Pass");
						//Report_AddStep("testcase", "" + msg + " for article - "+ranArticle+"", "", "","Pass");
						objEnhancedArticleLookup.closecross.click();
					}
					waitFor(1);
					objEnhancedArticleLookup.canceledit.click();
				}
				else if (objEnhancedArticleLookup.sucmsgMPLSC.isDisplayed())
				{
					String msg = objEnhancedArticleLookup.sucmsgMPLSC.getText();
					if (msg.equals("Security Tag Updated Successfully"))
					{
						htmlToExtent(cName,mName,extLogger,driver,"" + msg + " for article - "+ranArticle+";;;Pass");
						//Report_AddStep("testcase", "" + msg + " for article - "+ranArticle+"", "", "","Pass");
						objEnhancedArticleLookup.closesuccross.click();
						waitForJSandJQueryToLoad(driver);;
					}
				}/*
				else if (objEnhancedArticleLookup.errormsgPOSlist.size()!=0)
				{
					String msg = objEnhancedArticleLookup.errormsgPOS.getText();
					if (msg.equals("Cannot Update As Security Tag Is Enabled In Central")) 
					{
						htmlToExtent(cName,mName,extLogger,driver,"" + msg + " for article - "+ranArticle+";;;Pass");
						//Report_AddStep("testcase", "" + msg + " for article - "+ranArticle+"", "", "","Pass");
						objEnhancedArticleLookup.closecross.click();
						objEnhancedArticleLookup.canceledit.click();
					}
				}*/
				else 
				{
					htmlToExtent(cName,mName,extLogger,driver,"Security tag is already updated for this article "+ ranArticle + ";;;Pass");
					//Report_AddStep("testcase","Security tag is already updated for this article "+ ranArticle + "", "", "", "");
				}
				objEnhancedArticleLookup.backbutton.click();
				waitForJSandJQueryToLoad(driver);;
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No Articles found in DB for security tag;;;Fail");
			//Report_AddStep("testcase", "No Articles found in DB for security tag", "", "","Fail");
		}
		return ranArticle;
	}

	public void nearbyStorecheck_notranged(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, String dist,
			String dist1,WebDriver driver) throws IOException {
		objEnhancedArticleLookup.siteNo.clear();
		objEnhancedArticleLookup.siteNo.sendKeys(getContext()
				.getStringProperty("store"));

		int count = 0;
		int count1 = 0;
		for (int i = 1; i <= 2; i++) {
			if (i == 1) {
				dist = "100";
			}
			if (i == 2) {
				dist = "100";
			}

			for (int j = 1; j <= 1; j++) {
				if (i == 1) {
					dist1 = "100";
					htmlToExtent(cName,mName,extLogger,driver,"*****Checking for 1005 sales Org only*****;;;Pass");
					//Report_AddStep("testcase",							"*****Checking for 1005 sales Org only*****", "",							"", "");
				}
				if (i == 2) {
					dist1 = "100";
					objEnhancedArticleLookup.salesOrg.click();
					int size = objEnhancedArticleLookup.salesOrgDDlist.size();
					List DD = new ArrayList();
					for(int s=1;s<=size;s++)
					{
						WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.salesOrgDD, s,driver);
						DD.add(element.getText());
					}
					htmlToExtent(cName,mName,extLogger,driver,"Sales Org Drop down has "+DD+";;;Pass");
					//Report_AddStep("testcase","Sales Org Drop down has "+DD, "", "", "");
					objEnhancedArticleLookup.allStore.click();
					htmlToExtent(cName,mName,extLogger,driver,"*****Checking for All sales Org *****;;;Pass");
					//Report_AddStep("testcase",							"*****Checking for All sales Org *****", "", "", "");
				}

				selectByVisibleText(objEnhancedArticleLookup.distance, dist);
				selectByVisibleText(objEnhancedArticleLookup.maxStores, dist1);
				objEnhancedArticleLookup.searchNear.click();
				waitForJSandJQueryToLoad(driver);;
				// if(objEnhancedArticleLookup.detailTable.size()==1)
				String table = objEnhancedArticleLookup.detailTable1.getAttribute("class");
				waitFor(1);
				if (table.contains("hideBlock")) 
				{
					htmlToExtent(cName,mName,extLogger,driver,"Sorry no records found for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + ";;;Info");
					//Report_AddStep("testcase","Sorry no records found for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + "", "", "", "Fail");
					count1++;
					break;
				} else 
				{
					int size = objEnhancedArticleLookup.nBslist.size();
					List DD = new  ArrayList();
					for(int s=1;s<=size;s++)
					{
						WebElement element = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.nBsSOH, s,driver);
						if(element.getText().isEmpty())
						{
							htmlToExtent(cName,mName,extLogger,driver,"SOH is not present for row number "+s+";;;Fail");
							//Report_AddStep("testcase","SOH is not present for row number "+s+"", "", "", "Fail");
						}
						else
						{
							DD.add(element.getText());
						}
					}
					htmlToExtent(cName,mName,extLogger,driver,"SOH values are "+DD+";;;Pass");
					//Report_AddStep("testcase","SOH values are "+DD, "", "", "Pass");
					int y = objEnhancedArticleLookup.paginationval.size();
					y = y - 2;
					int d = Integer.parseInt(dist1);
					if (y >= 1) {
						htmlToExtent(cName,mName,extLogger,driver,"Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page 1;;;Pass");
						//Report_AddStep("testcase","Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page 1", "", "", "Pass");
						count++;
						if (y == 1) 
						{}
						else 
						{
							for (int k = 3; k <= y + 2; k++)
							{
								int val = k - 1;
								WebElement elements = prepareWebElementWithDynamicXpathWithInt(
										objEnhancedArticleLookup.pagClick, k,driver);
								elements.click();
								waitForJSandJQueryToLoad(driver);
								table = objEnhancedArticleLookup.detailTable1
										.getAttribute("class");
								if (table.contains("hideBlock")) {
									htmlToExtent(cName,mName,extLogger,driver,"No Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val+ ";;;Fail");
									//Report_AddStep("testcase","No Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val+ "", "", "", "Fail");
								} else {
									htmlToExtent(cName,mName,extLogger,driver,"Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val	+ ";;;Pass");
									//Report_AddStep("testcase","Details are available for Distance "+ dist+ "KM with maximum no of stores selected as "+ dist1 + " in page " + val	+ "", "", "", "Pass");
								}
							}
							WebElement element = prepareWebElementWithDynamicXpathWithInt(
									objEnhancedArticleLookup.pagClick, 2,driver);
							element.click();
							waitForJSandJQueryToLoad(driver);
						}
					}
				}
			}
		}
	}

	public void clickntranged(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) {
		int size = objEnhancedArticleLookup.ntrangedlist.size();
		if (size == 1) {
			objEnhancedArticleLookup.nearBystore.click();
			waitFn(driver);
		} else {
			selectNotRanged(objEnhancedArticleLookup, size, ranArticle,driver);
			objEnhancedArticleLookup.nearBystore.click();
			waitFn(driver);
		}
	}

	public void selectNotRanged(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int size,
			String ranArticle,WebDriver driver) {
		for (int i = 1; i <= size; i++) {
			WebElement element = prepareWebElementWithDynamicXpathWithInt(
					objEnhancedArticleLookup.ntranged, i,driver);
			String val = element.getText();
			if (val.equals(ranArticle)) {
				element.click();
				waitFn(driver);
				waitFor(1);
			}
		}
	}

	public void notRanged(EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver)
			throws IOException {

		String ranArticle = null;
		int size = objEnhancedArticleLookup.deptlist.size();
		int s = random_no(size);
		if (s == 0) {
			s = 1;
		}
		WebElement element = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.selectDept, s,driver);
		verticalinternalscroll(element,driver);
		element.click();
		waitFor(1);
		objEnhancedArticleLookup.advSearch.click();
		objEnhancedArticleLookup.rangedCheck.click();
		objEnhancedArticleLookup.clickGO.click();
		waitForJSandJQueryToLoad(driver);;
		objEnhancedArticleLookup.rangedClick.click();
		String w = objEnhancedArticleLookup.negative_NR.getAttribute("class");
		if (w.equals("negativeStatus")) {
			ranArticle = objEnhancedArticleLookup.artClick.getText();
			objEnhancedArticleLookup.artClick.click();
		} else {
			objEnhancedArticleLookup.rangedClick.click();
			w = objEnhancedArticleLookup.negative_NR.getAttribute("class");
			if (w.equals("negativeStatus")) {
				ranArticle = objEnhancedArticleLookup.artClick.getText();
				objEnhancedArticleLookup.artClick.click();
			}
		}
		waitFn(driver);
		htmlToExtent(cName,mName,extLogger,driver,"The below details is for not ranged article from SAP: "+ ranArticle + ";;;Pass");
		//Report_AddStep("testcase",				"The below details is for not ranged article from SAP: "+ ranArticle + " ", "", "", "");
		objEnhancedArticleLookup.nearBystore.click();
		waitFn(driver);
	}

	public int random_no(int max) {
		Random rand = new Random();
		int n = rand.nextInt(max);
		return n;
	}

	public void verifyGP(EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws IOException, SQLException {
		if (objEnhancedArticleLookup.containsTotal.isDisplayed()) {
			String title = getText(objEnhancedArticleLookup.containsTotal);
			waitFor(1);
			if (title.contains("Total")) {
				String parts[] = title.split("Total ");
				String p[] = parts[1].split(" records");
				String trecord = p[0];
				int val = Integer.parseInt(trecord);
				for (int i = 1; i <= val; i++) {
					WebElement elements = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.selectarticle, i,driver);
					String getarticle = elements.getText();
					if (getarticle.equals(ranArticle)) {
						elements.click();
						waitFor(3);
						htmlToExtent(cName,mName,extLogger,driver,"Article number found in the page "	+ ranArticle + ";;;Pass");
						//Report_AddStep("testcase",		"Article number found in the page "	+ ranArticle, "", "", "Pass");
						break;
					} else {
						htmlToExtent(cName,mName,extLogger,driver,"Article number not found in the page "	+ ranArticle + ";;;Fail");
						//Report_AddStep("testcase", "Article number not found "								+ ranArticle, "", "", "Fail");
					}
				}
				grossprofit(objEnhancedArticleLookup, ranArticle,driver);
			}
		} else {
			grossprofit(objEnhancedArticleLookup, ranArticle,driver);
		}
	}

	public void grossprofit(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws IOException {
		String UOM = getText(objEnhancedArticleLookup.checkUOM);
		String gp = objEnhancedArticleLookup.clickGP2.getAttribute("class");
		if (gp.contains("hideBlock")) {
			htmlToExtent(cName,mName,extLogger,driver,"No Gross profit tab is available;;;Pass");
			//Report_AddStep("testcase", "No Gross profit tab is available", "",					"", "Pass");
			// objEnhancedArticleLookup.backbutton.click();
		} else {
			objEnhancedArticleLookup.clickGP.click();
			waitForJSandJQueryToLoad(driver);;
			if (UOM.equals("CA1")) {
				String GPvalue = getText(objEnhancedArticleLookup.checkGP1);
				if (GPvalue.equals(" ") || (GPvalue.equals(""))
						|| GPvalue.equals("null")) {
					String GPerrormsg = getText(objEnhancedArticleLookup.errormsgGP);
					objEnhancedArticleLookup.errormsgGP.click();
					htmlToExtent(cName,mName,extLogger,driver,"Fetcing Gross profit issue for article number: "+ ranArticle + " is " + GPerrormsg+";;;Fail");
					//Report_AddStep("testcase","Fetcing Gross profit issue for article number: "+ ranArticle + " is " + GPerrormsg, "", "",			"Fail");
				} else {
					htmlToExtent(cName,mName,extLogger,driver,"The article - cigaratte, Gross profit value for "+ ranArticle + " is " + GPvalue+";;;Pass");
					//Report_AddStep("testcase","The article - cigaratte, Gross profit value for "+ ranArticle + " is " + GPvalue, "", "",	"Pass");
				}
			} else if (UOM.equals("EA")) {
				String GPvalue = getText(objEnhancedArticleLookup.checkGP);

				if (GPvalue.equals(" ") || (GPvalue.equals(""))
						|| GPvalue.equals("null")) {
					String GPerrormsg = getText(objEnhancedArticleLookup.errormsgGP);
					objEnhancedArticleLookup.errormsgGP.click();
					htmlToExtent(cName,mName,extLogger,driver,"Fetcing Gross profit issue for article number: "+ ranArticle + " is " + GPerrormsg+";;;Fail");
					//Report_AddStep("testcase","Fetcing Gross profit issue for article number: "+ ranArticle + " is " + GPerrormsg, "", "",	"Fail");
				} else {
					htmlToExtent(cName,mName,extLogger,driver,"The article - cigaratte, Gross profit value for "+ ranArticle + " is " + GPvalue+";;;Pass");
					//Report_AddStep("testcase","The article - cigaratte, Gross profit value for "+ ranArticle + " is " + GPvalue, "", "","Pass");
				}
			}
			objEnhancedArticleLookup.clickOK.click();
		}
	}

	public WebElement prepareWebElementWithDynamicXpathWithInt(
			String xpathValue, int i,WebDriver driver) // meenu
	{
		return driver.findElement(By.xpath(xpathValue
				.replace("dynamic", "" + i)));
	}

	public void selectionOfArticles(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			String ranArticle,WebDriver driver) throws IOException {
		if (objEnhancedArticleLookup.containsTotal.isDisplayed()) {
			String title = getText(objEnhancedArticleLookup.containsTotal);
			waitFor(1);
			if (title.contains("Total")) {
				String parts[] = title.split("Total ");
				String p[] = parts[1].split(" records");
				String trecord = p[0];
				int val = Integer.parseInt(trecord);int size =val; 
				//objEnhancedArticleLookup.artClick.click();
				selectNotRanged(objEnhancedArticleLookup, size, ranArticle,driver);
			}
		}
	}

	public void clickOnPrintTicket(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int i,WebDriver driver)
					throws AWTException {
		// waitForJSandJQueryToLoad(driver);;
		waitFor(1);
		Point coordinates = objEnhancedArticleLookup.printticket.getLocation();
		Robot robot = new Robot();
		robot.mouseMove(coordinates.getX(), coordinates.getY() + 100);

		Actions action = new Actions(driver);
		action.moveToElement(objEnhancedArticleLookup.printticket).click()
		.build().perform();
		waitFor(1);

		WebElement element = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.printoptions, i,driver);
		Point coordinates1 = element.getLocation();
		Robot robo1t = new Robot();
		robo1t.mouseMove(coordinates1.getX(), coordinates1.getY() + 100);

		Actions action2 = new Actions(driver);
		action2.moveToElement(element).click().build().perform();
		waitFor(1);
		robot.mouseMove(5, 5);
	}

	public void scroll(WebDriver driver) {
		verticalScroll(driver);
	}

	public void scrollUp(WebDriver driver) {
		((JavascriptExecutor) driver).executeScript("scrollBy(0, -1000);");
	}

	public ArrayList<String> uomISISnumberdefault(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int pt,
			int pt_btn, String ranArticle, int UOMsize,WebDriver driver) throws IOException,
			SQLException, ParseException, AWTException {
		//System.out.println("Total UOM are: " + UOMsize);
		ArrayList<String> numbers = new ArrayList<String>();
		if (UOMsize >= 1) {
			for (int i = 1; i <= UOMsize; i++) {
				waitFor(2);
				WebElement element = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.PUliquorPOS, i,driver);
				if ((i == 2) || (i == 3)) {
					element.click();
				}
				String a = element.getText();
				WebElement elements = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.uomIsis, i,driver);
				if (a.equals("EA")) {
					UOMeaISISval = elements.getText();
					numbers.add(UOMeaISISval);
					// ptISISval[i]=UOMeaISISval;
				} else if (a.equals("CA1")) {
					UOMca1ISISval = elements.getText();
					numbers.add(UOMca1ISISval);
					// ptISISval[i]=UOMca1ISISval;
				} else if (a.equals("CAR")) {
					UOMcarISISval = elements.getText();
					numbers.add(UOMcarISISval);
					// ptISISval[i]=UOMcarISISval;
				} else {
					UOMmpkISISval = elements.getText();
					numbers.add(UOMmpkISISval);
					// ptISISval[i]=UOMmpkISISval;
				}
				// numbers.add(ptISISval[i]);
				// to check
				if (i == UOMsize) {
					scrollUp(driver);
					scrollUp(driver);
					clickOnPrintTicket(objEnhancedArticleLookup, pt,driver);
					WebElement clickprintbtn = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.print, pt_btn,driver);
					if (UOMsize == 1) {
						checkPrint(objEnhancedArticleLookup, clickprintbtn,driver);
					} else if (UOMsize == 2) {
						objEnhancedArticleLookup.secondprintCB.click();
						checkPrint(objEnhancedArticleLookup, clickprintbtn,driver);
					} else {
						/*
						 * Random rand = new Random(); int n = rand.nextInt(1);
						 * if(n==1) {
						 */
						objEnhancedArticleLookup.secondprintCB.click();
						objEnhancedArticleLookup.thirdprintCB.click();
						checkPrint(objEnhancedArticleLookup, clickprintbtn,driver);
						/*
						 * } else {
						 * click(objEnhancedArticleLookup.firstprintallCB);
						 * click(objEnhancedArticleLookup.secondprintallCB);
						 * click(objEnhancedArticleLookup.thirdprintallCB);
						 * chooseprint(objEnhancedArticleLookup); }
						 */
					}
				}
			}
		}
		scrollUp(driver);
		scrollUp(driver);
		return numbers;
	}

	public ArrayList<String> uomISISnumber(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int pt_btn,
			String ranArticle, int UOMsize,WebDriver driver) throws IOException, SQLException,
			ParseException, AWTException {
		//System.out.println("Total UOM are: " + UOMsize);
		ArrayList<String> numbers = new ArrayList<String>();
		if (UOMsize >= 1) {
			for (int i = 1; i <= UOMsize; i++) {
				waitFor(5);
				WebElement element = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.PUliquorPOS, i,driver);
				if ((i == 2) || (i == 3)) {
					element.click();
				}
				String a = element.getText();

				WebElement elements = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.uomIsis, i,driver);
				if (a.equals("EA")) {
					UOMeaISISval = elements.getText();
					numbers.add(UOMeaISISval);
				} else if (a.equals("CA1")) {
					UOMca1ISISval = elements.getText();
					numbers.add(UOMca1ISISval);
				} else if (a.equals("CA2")) {
					UOMca2ISISval = elements.getText();
					numbers.add(UOMca2ISISval);
				} else if (a.equals("CAR")) {
					UOMcarISISval = elements.getText();
					numbers.add(UOMcarISISval);
				} else {
					UOMmpkISISval = elements.getText();
					numbers.add(UOMmpkISISval);
				}
				// to check
				if (i == UOMsize) {
					scrollUp(driver);
					scrollUp(driver);
					clickOnPrintTicket(objEnhancedArticleLookup, 3,driver);
					if (UOMsize == 1) {
						chooseprint(objEnhancedArticleLookup, pt_btn,driver);
					} else if (UOMsize == 2) {
						objEnhancedArticleLookup.secondprintallCB.click();
						chooseprint(objEnhancedArticleLookup, pt_btn,driver);
					} else {
						objEnhancedArticleLookup.secondprintallCB.click();
						objEnhancedArticleLookup.thirdprintallCB.click();
						chooseprint(objEnhancedArticleLookup, pt_btn,driver);
					}
				}
			}
		}
		scrollUp(driver);
		scrollUp(driver);
		return numbers;
	}

	public void checkPrint(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			WebElement clickprintbtn,WebDriver driver) throws IOException {
		Random rand = new Random();
		int n = rand.nextInt(25) + 1;
		String printcopy = "" + n;
		objEnhancedArticleLookup.printcopies.click();
		objEnhancedArticleLookup.printcopies.sendKeys(printcopy);
		clickprintbtn.click();
		waitFor(2);
		String msg = objEnhancedArticleLookup.successmsg.getText();
		if (msg.contains("SUCCESSFULLY")) {
			htmlToExtent(cName,mName,extLogger,driver,""+msg+";;;Pass");
			//Report_AddStep("testcase", "Tickets added successfully", "", "",					"Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Tickets not added;;;Fail");
			//Report_AddStep("testcase", "Tickets not added", "", "", "Fail");
		}
		objEnhancedArticleLookup.successmsgclose.click();
		waitFor(1);
	}

	public int sendMPLSCeavalue(int count, String ranArticle,
			List<List<Object>> results1, String[] eaval,WebDriver driver) throws IOException {
		String current_SC = results1.get(count).get(3).toString();
		double current_SC1 = Double.parseDouble(current_SC);
		current_SC1 = Math.round(current_SC1);
		int SC = (int) current_SC1;
		current_SC = "" + SC;
		String previous_SC = results1.get(count).get(4).toString();
		if (previous_SC.equals("")) {
			previous_SC = "0";
		} else {
			double previous_SC1 = Double.parseDouble(previous_SC);
			previous_SC1 = Math.round(previous_SC1);
			int SC1 = (int) previous_SC1;
			previous_SC = "" + SC1;
		}
		count++;
		String current_MPL = results1.get(count).get(3).toString();
		double current_MPL1 = Double.parseDouble(current_MPL);
		current_MPL1 = Math.round(current_MPL1);
		int MPL = (int) current_MPL1;
		current_MPL = "" + MPL;
		String previous_MPL = results1.get(count).get(4).toString();
		if (previous_MPL.equals("")) {
			previous_MPL = "0";
		} else {
			double previous_MPL1 = Double.parseDouble(previous_MPL);
			previous_MPL1 = Math.round(previous_MPL1);
			int MPL1 = (int) previous_MPL1;
			previous_MPL = "" + MPL1;
		}
		count++;
		
		if(eaval[0].equals(current_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values matched with DB for article: " +ranArticle+";"+eaval[0]+";"+current_MPL+";Pass");
			//Report_AddStep("testcase","Current MPL values matched with DB for article: " +ranArticle, eaval[0], current_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values conflicts with DB for article: " +ranArticle+";"+eaval[0]+";"+current_MPL+";Fail");
			//Report_AddStep("testcase","Current MPL values conflicts with DB for article: " +ranArticle, eaval[0], current_MPL, "Fail");
		}
		if(eaval[1].equals(current_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values matched with DB for article: " +ranArticle+";"+eaval[1]+";"+current_SC+";Pass");
			//Report_AddStep("testcase","Current SC values matched with DB for article: " +ranArticle, eaval[1], current_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values conflicts with DB for article: " +ranArticle+";"+eaval[1]+";"+current_SC+";Fail");
			//Report_AddStep("testcase","Current SC values conflicts with DB for article: " +ranArticle, eaval[1], current_SC, "Fail");
		}
		if(eaval[2].equals(previous_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values matched with DB for article: " +ranArticle+";"+eaval[2]+";"+previous_MPL+";Pass");
			//Report_AddStep("testcase","Previous MPL values matched with DB for article: " +ranArticle, eaval[2], previous_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values conflicts with DB for article: " +ranArticle+";"+eaval[2]+";"+previous_MPL+";Fail");
			//Report_AddStep("testcase","Previous MPL values conflicts with DB for article: " +ranArticle, eaval[2], previous_MPL, "Fail");
		}
		if(eaval[3].equals(previous_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values matched with DB for article: " +ranArticle+";"+eaval[3]+";"+previous_SC+";Pass");
			//Report_AddStep("testcase","Previous SC values matched with DB for article: " +ranArticle, eaval[3], previous_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values conflicts with DB for article: " +ranArticle+";"+eaval[3]+";"+previous_SC+";Fail");
			//Report_AddStep("testcase","Previous SC values conflicts with DB for article: " +ranArticle, eaval[3], previous_SC, "Fail");
		}
		return count;
	}

	public int sendMPLSCca1value(int count, String ranArticle,
			List<List<Object>> results1, String[] ca1val,WebDriver driver) throws IOException {
		String current_SC = results1.get(count).get(3).toString();
		double current_SC1 = Double.parseDouble(current_SC);
		current_SC1 = Math.round(current_SC1);
		int SC = (int) current_SC1;
		current_SC = "" + SC;
		String previous_SC = results1.get(count).get(4).toString();
		if (previous_SC.equals("")) {
			previous_SC = "0";
		} else {
			double previous_SC1 = Double.parseDouble(previous_SC);
			previous_SC1 = Math.round(previous_SC1);
			int SC1 = (int) previous_SC1;
			previous_SC = "" + SC1;
		}
		count++;
		String current_MPL = results1.get(count).get(3).toString();
		double current_MPL1 = Double.parseDouble(current_MPL);
		current_MPL1 = Math.round(current_MPL1);
		int MPL = (int) current_MPL1;
		current_MPL = "" + MPL;
		String previous_MPL = results1.get(count).get(4).toString();
		if (previous_MPL.equals("")) {
			previous_MPL = "0";
		} else {
			double previous_MPL1 = Double.parseDouble(previous_MPL);
			previous_MPL1 = Math.round(previous_MPL1);
			int MPL1 = (int) previous_MPL1;
			previous_MPL = "" + MPL1;
		}
		count++;
		if(ca1val[0].equals(current_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values matched with DB for article: " +ranArticle+";"+ca1val[0]+";"+current_MPL+";Pass");
			//Report_AddStep("testcase","Current MPL values matched with DB for article: " +ranArticle, ca1val[0], current_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values conflicts with DB for article: " +ranArticle+";"+ca1val[0]+";"+current_MPL+";Fail");
			//Report_AddStep("testcase","Current MPL values conflicts with DB for article: " +ranArticle, ca1val[0], current_MPL, "Fail");
		}
		if(ca1val[1].equals(current_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values matched with DB for article: " +ranArticle+";"+ca1val[1]+";"+current_SC+";Pass");
			//Report_AddStep("testcase","Current SC values matched with DB for article: " +ranArticle, ca1val[1], current_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values conflicts with DB for article: " +ranArticle+";"+ca1val[1]+";"+current_SC+";Fail");
			//Report_AddStep("testcase","Current SC values conflicts with DB for article: " +ranArticle, ca1val[1], current_SC, "Fail");
		}
		if(ca1val[2].equals(previous_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values matched with DB for article: " +ranArticle+";"+ca1val[2]+";"+previous_MPL+";Pass");
			//Report_AddStep("testcase","Previous MPL values matched with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values conflicts with DB for article: " +ranArticle+";"+ca1val[2]+";"+previous_MPL+";Fail");
			//Report_AddStep("testcase","Previous MPL values conflicts with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Fail");
		}
		if(ca1val[3].equals(previous_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values matched with DB for article: " +ranArticle+";"+ca1val[3]+";"+previous_SC+";Pass");
			//Report_AddStep("testcase","Previous SC values matched with DB for article: " +ranArticle, ca1val[3], previous_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values conflicts with DB for article: " +ranArticle+";"+ca1val[3]+";"+previous_SC+";Fail");
			//Report_AddStep("testcase","Previous SC values conflicts with DB for article: " +ranArticle, ca1val[3], previous_SC, "Fail");
		}
		return count;
	}

	public int sendMPLSCca2value(int count, String ranArticle,
			List<List<Object>> results1, String[] ca2val,WebDriver driver) throws IOException {
		String current_SC = results1.get(count).get(3).toString();
		double current_SC1 = Double.parseDouble(current_SC);
		current_SC1 = Math.round(current_SC1);
		int SC = (int) current_SC1;
		current_SC = "" + SC;
		String previous_SC = results1.get(count).get(4).toString();
		if (previous_SC.equals("")) {
			previous_SC = "0";
		} else {
			double previous_SC1 = Double.parseDouble(previous_SC);
			previous_SC1 = Math.round(previous_SC1);
			int SC1 = (int) previous_SC1;
			previous_SC = "" + SC1;
		}
		count++;
		String current_MPL = results1.get(count).get(3).toString();
		double current_MPL1 = Double.parseDouble(current_MPL);
		current_MPL1 = Math.round(current_MPL1);
		int MPL = (int) current_MPL1;
		current_MPL = "" + MPL;
		String previous_MPL = results1.get(count).get(4).toString();
		if (previous_MPL.equals("")) {
			previous_MPL = "0";
		} else {
			double previous_MPL1 = Double.parseDouble(previous_MPL);
			previous_MPL1 = Math.round(previous_MPL1);
			int MPL1 = (int) previous_MPL1;
			previous_MPL = "" + MPL1;
		}
		count++;
		if(ca2val[0].equals(current_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values matched with DB for article: " +ranArticle+";"+ca2val[0]+";"+current_MPL+";Pass");
			//Report_AddStep("testcase","Current MPL values matched with DB for article: " +ranArticle, ca1val[0], current_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values conflicts with DB for article: " +ranArticle+";"+ca2val[0]+";"+current_MPL+";Fail");
			//Report_AddStep("testcase","Current MPL values conflicts with DB for article: " +ranArticle, ca1val[0], current_MPL, "Fail");
		}
		if(ca2val[1].equals(current_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values matched with DB for article: " +ranArticle+";"+ca2val[1]+";"+current_SC+";Pass");
			//Report_AddStep("testcase","Current SC values matched with DB for article: " +ranArticle, ca1val[1], current_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values conflicts with DB for article: " +ranArticle+";"+ca2val[1]+";"+current_SC+";Fail");
			//Report_AddStep("testcase","Current SC values conflicts with DB for article: " +ranArticle, ca1val[1], current_SC, "Fail");
		}
		if(ca2val[2].equals(previous_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values matched with DB for article: " +ranArticle+";"+ca2val[2]+";"+previous_MPL+";Pass");
			//Report_AddStep("testcase","Previous MPL values matched with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values conflicts with DB for article: " +ranArticle+";"+ca2val[2]+";"+previous_MPL+";Fail");
			//Report_AddStep("testcase","Previous MPL values conflicts with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Fail");
		}
		if(ca2val[3].equals(previous_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values matched with DB for article: " +ranArticle+";"+ca2val[3]+";"+previous_SC+";Pass");
			//Report_AddStep("testcase","Previous SC values matched with DB for article: " +ranArticle, ca1val[3], previous_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values conflicts with DB for article: " +ranArticle+";"+ca2val[3]+";"+previous_SC+";Fail");
			//Report_AddStep("testcase","Previous SC values conflicts with DB for article: " +ranArticle, ca1val[3], previous_SC, "Fail");
		}
		return count;
	}

	public int sendMPLSCcarvalue(int count, String ranArticle,
			List<List<Object>> results1, String[] carval,WebDriver driver) throws IOException {
		String current_SC = results1.get(count).get(3).toString();
		double current_SC1 = Double.parseDouble(current_SC);
		current_SC1 = Math.round(current_SC1);
		int SC = (int) current_SC1;
		current_SC = "" + SC;
		String previous_SC = results1.get(count).get(4).toString();
		if (previous_SC.equals("")) {
			previous_SC = "0";
		} else {
			double previous_SC1 = Double.parseDouble(previous_SC);
			previous_SC1 = Math.round(previous_SC1);
			int SC1 = (int) previous_SC1;
			previous_SC = "" + SC1;
		}
		count++;
		String current_MPL = results1.get(count).get(3).toString();
		double current_MPL1 = Double.parseDouble(current_MPL);
		current_MPL1 = Math.round(current_MPL1);
		int MPL = (int) current_MPL1;
		current_MPL = "" + MPL;
		String previous_MPL = results1.get(count).get(4).toString();
		if (previous_MPL.equals("")) {
			previous_MPL = "0";
		} else {
			double previous_MPL1 = Double.parseDouble(previous_MPL);
			previous_MPL1 = Math.round(previous_MPL1);
			int MPL1 = (int) previous_MPL1;
			previous_MPL = "" + MPL1;
		}
		count++;
		if(carval[0].equals(current_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values matched with DB for article: " +ranArticle+";"+carval[0]+";"+current_MPL+";Pass");
			//Report_AddStep("testcase","Current MPL values matched with DB for article: " +ranArticle, ca1val[0], current_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values conflicts with DB for article: " +ranArticle+";"+carval[0]+";"+current_MPL+";Fail");
			//Report_AddStep("testcase","Current MPL values conflicts with DB for article: " +ranArticle, ca1val[0], current_MPL, "Fail");
		}
		if(carval[1].equals(current_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values matched with DB for article: " +ranArticle+";"+carval[1]+";"+current_SC+";Pass");
			//Report_AddStep("testcase","Current SC values matched with DB for article: " +ranArticle, ca1val[1], current_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values conflicts with DB for article: " +ranArticle+";"+carval[1]+";"+current_SC+";Fail");
			//Report_AddStep("testcase","Current SC values conflicts with DB for article: " +ranArticle, ca1val[1], current_SC, "Fail");
		}
		if(carval[2].equals(previous_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values matched with DB for article: " +ranArticle+";"+carval[2]+";"+previous_MPL+";Pass");
			//Report_AddStep("testcase","Previous MPL values matched with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values conflicts with DB for article: " +ranArticle+";"+carval[2]+";"+previous_MPL+";Fail");
			//Report_AddStep("testcase","Previous MPL values conflicts with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Fail");
		}
		if(carval[3].equals(previous_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values matched with DB for article: " +ranArticle+";"+carval[3]+";"+previous_SC+";Pass");
			//Report_AddStep("testcase","Previous SC values matched with DB for article: " +ranArticle, ca1val[3], previous_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values conflicts with DB for article: " +ranArticle+";"+carval[3]+";"+previous_SC+";Fail");
			//Report_AddStep("testcase","Previous SC values conflicts with DB for article: " +ranArticle, ca1val[3], previous_SC, "Fail");
		}
		return count;
	}

	public int sendMPLSCmpkvalue(int count, String ranArticle,
			List<List<Object>> results1, String[] mpkval,WebDriver driver) throws IOException {
		String current_SC = results1.get(count).get(3).toString();
		double current_SC1 = Double.parseDouble(current_SC);
		current_SC1 = Math.round(current_SC1);
		int SC = (int) current_SC1;
		current_SC = "" + SC;
		String previous_SC = results1.get(count).get(4).toString();
		if (previous_SC.equals("")) {
			previous_SC = "0";
		} else {
			double previous_SC1 = Double.parseDouble(previous_SC);
			previous_SC1 = Math.round(previous_SC1);
			int SC1 = (int) previous_SC1;
			previous_SC = "" + SC1;
		}
		count++;
		String current_MPL = results1.get(count).get(3).toString();
		double current_MPL1 = Double.parseDouble(current_MPL);
		current_MPL1 = Math.round(current_MPL1);
		int MPL = (int) current_MPL1;
		current_MPL = "" + MPL;
		String previous_MPL = results1.get(count).get(4).toString();
		if (previous_MPL.equals("")) {
			previous_MPL = "0";
		} else {
			double previous_MPL1 = Double.parseDouble(previous_MPL);
			previous_MPL1 = Math.round(previous_MPL1);
			int MPL1 = (int) previous_MPL1;
			previous_MPL = "" + MPL1;
		}
		count++;
		if(mpkval[0].equals(current_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values matched with DB for article: " +ranArticle+";"+mpkval[0]+";"+current_MPL+";Pass");
			//Report_AddStep("testcase","Current MPL values matched with DB for article: " +ranArticle, ca1val[0], current_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current MPL values conflicts with DB for article: " +ranArticle+";"+mpkval[0]+";"+current_MPL+";Fail");
			//Report_AddStep("testcase","Current MPL values conflicts with DB for article: " +ranArticle, ca1val[0], current_MPL, "Fail");
		}
		if(mpkval[1].equals(current_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values matched with DB for article: " +ranArticle+";"+mpkval[1]+";"+current_SC+";Pass");
			//Report_AddStep("testcase","Current SC values matched with DB for article: " +ranArticle, ca1val[1], current_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Current SC values conflicts with DB for article: " +ranArticle+";"+mpkval[1]+";"+current_SC+";Fail");
			//Report_AddStep("testcase","Current SC values conflicts with DB for article: " +ranArticle, ca1val[1], current_SC, "Fail");
		}
		if(mpkval[2].equals(previous_MPL))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values matched with DB for article: " +ranArticle+";"+mpkval[2]+";"+previous_MPL+";Pass");
			//Report_AddStep("testcase","Previous MPL values matched with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous MPL values conflicts with DB for article: " +ranArticle+";"+mpkval[2]+";"+previous_MPL+";Fail");
			//Report_AddStep("testcase","Previous MPL values conflicts with DB for article: " +ranArticle, ca1val[2], previous_MPL, "Fail");
		}
		if(mpkval[3].equals(previous_SC))
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values matched with DB for article: " +ranArticle+";"+mpkval[3]+";"+previous_SC+";Pass");
			//Report_AddStep("testcase","Previous SC values matched with DB for article: " +ranArticle, ca1val[3], previous_SC, "Pass");
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"Previous SC values conflicts with DB for article: " +ranArticle+";"+mpkval[3]+";"+previous_SC+";Fail");
			//Report_AddStep("testcase","Previous SC values conflicts with DB for article: " +ranArticle, ca1val[3], previous_SC, "Fail");
		}
		return count;
	}

	public void compareMPLSCwithDB(int count, String ranArticle,
			List<List<Object>> results,
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int UOMsize,WebDriver driver)
					throws IOException, SQLException {
		for (int i = 1; i <= UOMsize; i++) {
			WebElement elements = ivalue(objEnhancedArticleLookup, i,driver);
			String UOMname = elements.getText();
			if ((i == 2) || (i == 3)) {
				elements.click();
				waitFor(2);
			}
			if (UOMname.equals("EA")) {
				eaval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
				if (results.size() != 0) {
					for (int k = 0; k < results.size(); k++) {
						String UOM = results.get(k).get(2).toString();
						if (UOM.equals("EA")) {
							count = sendMPLSCeavalue(count, ranArticle,
									results, eaval,driver);
							break;
						}
					}
				}
			} else if (UOMname.equals("CA1")) {
				ca1val = getvalMPLSC(objEnhancedArticleLookup, i,driver);
				if (results.size() != 0) {
					for (int k = 0; k < results.size(); k++) {
						String UOM = results.get(k).get(2).toString();
						if (UOM.equals("CA1")) {
							count = sendMPLSCca1value(count, ranArticle,
									results, ca1val,driver);
							break;
						}
					}
				}
			} else if (UOMname.equals("CA2")) {
				ca2val = getvalMPLSC(objEnhancedArticleLookup, i,driver);
				if (results.size() != 0) {
					for (int k = 0; k < results.size(); k++) {
						String UOM = results.get(k).get(2).toString();
						if (UOM.equals("CA2")) {
							count = sendMPLSCca2value(count, ranArticle,
									results, ca2val,driver);
							break;
						}
					}
				}
			} else if (UOMname.equals("CAR")) {
				carval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
				if (results.size() != 0) {
					for (int k = 0; k < results.size(); k++) {
						String UOM = results.get(k).get(2).toString();
						if (UOM.equals("CAR")) {
							count = sendMPLSCcarvalue(count, ranArticle,
									results, carval,driver);
							break;
						}
					}
				}
			} else {
				mpkval = getvalMPLSC(objEnhancedArticleLookup, i,driver);
				if (results.size() != 0) {
					for (int k = 0; k < results.size(); k++) {
						String UOM = results.get(k).get(2).toString();
						if (UOM.equals("MPK")) {
							count = sendMPLSCmpkvalue(count, ranArticle,
									results, mpkval,driver);
							break;
						}
					}
				}
			}
		}
	}

	/*
	 * public int clickUOM(EnhancedArticleLookUpObjects
	 * objEnhancedArticleLookup,int UOMsize,List<List<Object>> results1,int nv)
	 * throws IOException { int UOMtoPrint; if(UOMsize==1) { WebElement ele =
	 * prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.print,
	 * 4); //click(objEnhancedArticleLookup.firstprintCB);
	 * nv1=checkPrint(objEnhancedArticleLookup,ele); UOMtoPrint=1;
	 * printSENDstatus(results1,nv,UOMtoPrint,nv1,ArrayList<String> ISISvalue);
	 * } else if(UOMsize==2) { WebElement ele =
	 * prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.print,
	 * 4); //click(objEnhancedArticleLookup.firstprintCB);
	 * click(objEnhancedArticleLookup.secondprintCB);
	 * nv1=checkPrint(objEnhancedArticleLookup,ele); UOMtoPrint=2;
	 * printSENDstatus(results1,nv,UOMtoPrint,nv1); } else { WebElement ele =
	 * prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.print,
	 * 4); //click(objEnhancedArticleLookup.firstprintCB);
	 * click(objEnhancedArticleLookup.secondprintCB);
	 * click(objEnhancedArticleLookup.thirdprintCB);
	 * nv1=checkPrint(objEnhancedArticleLookup,ele); UOMtoPrint=3;
	 * printSENDstatus(results1,nv,UOMtoPrint,nv1); } return UOMtoPrint; }
	 */

	/*
	 * public int clickUOMAllticket(EnhancedArticleLookUpObjects
	 * objEnhancedArticleLookup,int UOMsize,int nv) throws IOException,
	 * AWTException, NumberFormatException, ParseException { int UOMtoPrint;
	 * if(UOMsize==1) { chooseprint(objEnhancedArticleLookup); UOMtoPrint=2;
	 * 
	 * } else if(UOMsize==2) { click(objEnhancedArticleLookup.secondprintallCB);
	 * chooseprint(objEnhancedArticleLookup); UOMtoPrint=4; } else {
	 * click(objEnhancedArticleLookup.secondprintallCB);
	 * click(objEnhancedArticleLookup.thirdprintallCB);
	 * chooseprint(objEnhancedArticleLookup); UOMtoPrint=6; } return UOMtoPrint;
	 * }
	 */

	public void checkPrintAllticket(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,
			WebElement clickprintbtn,WebDriver driver) throws IOException {
		clickprintbtn.click();
		waitFor(2);
		String msg = objEnhancedArticleLookup.successmsg.getText();
		if (msg.equals("TICKETS ADDED SUCCESSFULLY")) {
			htmlToExtent(cName,mName,extLogger,driver,"Tickets added successfully;;;Pass");
			//Report_AddStep("testcase", "Tickets added successfully", "", "",					"Pass");
		} else {
			htmlToExtent(cName,mName,extLogger,driver,"Tickets not added;;;Fail");
			//Report_AddStep("testcase", "Tickets not added", "", "", "Fail");
		}
		objEnhancedArticleLookup.successmsgclose.click();
		waitFor(1);
	}

	public List<List<Object>> alltickets(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebDriver driver)
					throws AWTException, IOException, NumberFormatException,
					ParseException {
		List<List<Object>> allticket = getValuesFromTable(objEnhancedArticleLookup.listalticket);
		return allticket;

	}

	public void chooseprint(
			EnhancedArticleLookUpObjects objEnhancedArticleLookup, int pt_btn,WebDriver driver)
					throws IOException, AWTException, NumberFormatException,
					ParseException {
		for(int y=1;y<=2;y++){
		int listsize = objEnhancedArticleLookup.expandlist.size();
		int n = random_no(listsize-2)+1;
		WebElement ticketexpands = prepareWebElementWithDynamicXpathWithInt(objEnhancedArticleLookup.expandlisttickets, n,driver);
		verticalinternalscroll(ticketexpands,driver);
		ticketexpands.click();
		waitFor(1);
		WebElement ticketexpand = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.expandlistticket, n,1,driver);
		verticalinternalscroll(ticketexpand,driver);
		ticketexpand.click();
		waitFor(1);
		int p = random_no(40)+2;
		ticketexpand = prepareWebElementWithDynamicXpathWithIntInt(objEnhancedArticleLookup.expandlistticket, n,3,driver);
		verticalinternalscroll(ticketexpand,driver);
		ticketexpand.click();
		ticketexpand.sendKeys(""+p);
		waitFor(1);
		verticalinternalscroll(objEnhancedArticleLookup.collapselist,driver);
		waitFor(1);
		objEnhancedArticleLookup.collapselist.click();}
		waitFor(1);
		verticalinternalscroll(objEnhancedArticleLookup.printAll,driver);
		waitFor(1);
		/*objEnhancedArticleLookup.printAll.click();
		waitForJSandJQueryToLoad(driver);;
		waitFor(2);*/
		
		
		
		
		
		
		
		
		
		
		/*// List<List<Object>> allticket=alltickets(objEnhancedArticleLookup);
		// //starting from 1
		int allticket = objEnhancedArticleLookup.listalticket.size();
		Random rand = new Random();
		int num = rand.nextInt(allticket) + 1;
		// int num = common.RandomFromDB(allticket);
		if (num >= 20) {
			num = num - 17;
		} else if ((num >= 14) && (num < 20)) {
			num = num - 12;
		} else if ((num >= 8) && (num < 14)) {
			num = num - 6;
		}
		// List<List<Object>> chooseticket =
		// StringToListCreation("1:12:17:35:44:49:54:65:73:78:82:92:98:105");
		List<List<Object>> chooseticket = StringToListCreation("1:19:29:38:49:60:68:73:77:81:87:92:99:104");
		int val = num;
		int check = val;
		String val1 = chooseticket.get(0).get(val).toString();
		int value = Integer.parseInt(val1);
		WebElement ticketexpand = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.selectAllticket, value);
		WebElement clickprintbtn = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.print, pt_btn);

		for (int loop = 0; loop < 2; loop++) {
			if (val < 8) {
				if (loop == 1) {
					ticketexpand = prepareWebElementWithDynamicXpathWithInt(
							objEnhancedArticleLookup.selectAllticket, value);
				}
				ticketexpand.click();
				value = value + 1;
				WebElement ticketlowerCB = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.selectAllticket, value);
				ticketlowerCB.click();
				value = value - val - 1;
				WebElement printvalue = prepareWebElementWithDynamicXpathWithInt(
						objEnhancedArticleLookup.enterPtalue, value);
				printvalue.click();
				// Random rand = new Random();
				int n = rand.nextInt(25) + 1;
				String printcopy = "" + n;
				printvalue.sendKeys(printcopy);
				ticketexpand.click();
			}
			num = rand.nextInt(allticket) + 1;
			// num = common.RandomFromDB(allticket);
			if (num >= 20) {
				num = num - 17;
			} else if ((num >= 14) && (num < 20)) {
				num = num - 12;
			} else if ((num >= 8) && (num < 14)) {
				num = num - 6;
			}
			while (num == check) {
				num = rand.nextInt(allticket) + 1;
				// num = common.RandomFromDB(allticket);
				if (num >= 20) {
					num = num - 17;
				} else if ((num >= 14) && (num < 20)) {
					num = num - 12;
				} else if ((num >= 8) && (num < 14)) {
					num = num - 6;
				}
			}
			val = num;
			// chooseticket =
			// StringToListCreation("1:12:17:35:44:49:54:65:73:78:82:92:98:105");
			chooseticket = StringToListCreation("1:19:29:38:49:60:68:73:77:81:87:92:99:104");
			val1 = chooseticket.get(0).get(val).toString();
			value = Integer.parseInt(val1);
		}*/
		WebElement clickprintbtn = prepareWebElementWithDynamicXpathWithInt(
				objEnhancedArticleLookup.print, pt_btn,driver);
		//verticalScroll(driver);
		checkPrintAllticket(objEnhancedArticleLookup, clickprintbtn,driver);

	}

	public void printSENDstatus(List<List<Object>> results1, int nv,
			int UOMtoPrint, int nv1, ArrayList<String> ISISvalue,WebDriver driver)
					throws IOException {
		ArrayList<String> Pstatus = new ArrayList<String>();
		if (nv1 > nv) {
			htmlToExtent(cName,mName,extLogger,driver,"Print needs to be send;;;Pass");
			if (results1.size() != 0 && results1.size()>=UOMtoPrint ) {
				for (int n = 0; n < UOMtoPrint; n++) {
					String UOM = results1.get(n).get(4).toString();
					if (UOM.equals("EA")) {
						String ISISvalue_DB = results1.get(n).get(2).toString();
						if (ISISvalue.contains(ISISvalue_DB)) {
							String Ptstatus = results1.get(n).get(1).toString();
							Pstatus.add(Ptstatus);
							// Pstatus[n]=Ptstatus;
						}
					} else if (UOM.equals("CA1")) {
						String ISISvalue_DB = results1.get(n).get(2).toString();
						if (ISISvalue.contains(ISISvalue_DB)) {
							String Ptstatus = results1.get(n).get(1).toString();
							Pstatus.add(Ptstatus);
							// Pstatus[n]=Ptstatus;
						}
					} else if (UOM.equals("CA2")) {
						String ISISvalue_DB = results1.get(n).get(2).toString();
						if (ISISvalue.contains(ISISvalue_DB)) {
							String Ptstatus = results1.get(n).get(1).toString();
							Pstatus.add(Ptstatus);
							// Pstatus[n]=Ptstatus;
						}
					} else if (UOM.equals("CAR")) {
						String ISISvalue_DB = results1.get(n).get(2).toString();
						if (ISISvalue.contains(ISISvalue_DB)) {
							String Ptstatus = results1.get(n).get(1).toString();
							Pstatus.add(Ptstatus);
							// Pstatus[n]=Ptstatus;
						}
					} else {
						String ISISvalue_DB = results1.get(n).get(2).toString();
						if (ISISvalue.contains(ISISvalue_DB)) {
							String Ptstatus = results1.get(n).get(1).toString();
							Pstatus.add(Ptstatus);
							// Pstatus[n]=Ptstatus;
						}
					}
				}
			//}
			htmlToExtent(cName,mName,extLogger,driver,"*********Comparing with DB *********;;;Pass");
			//Report_AddStep("testcase", "*********Comparing with DB *********",					"", "", "");
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMtoPrint+ " UOM prints has been send;;;Pass");
					//Report_AddStep("testcase", "" + UOMtoPrint+ " UOM prints has been send", "", "", "");
			int sendstatus = 0;
			for (int l = 0; l < UOMtoPrint; l++) {
				if (Pstatus.get(l).equals("D")) {
					sendstatus++;
				}
			}
			//System.out.println(sendstatus);
			if (sendstatus == UOMtoPrint) {
				htmlToExtent(cName,mName,extLogger,driver,"Status updated in Database as send for " + UOMtoPrint+ " UOM;;;Pass");
				//Report_AddStep("testcase","Status updated in Database as send for " + UOMtoPrint+ " UOM", "", "", "Pass");
			}
		} else {
				htmlToExtent(cName,mName,extLogger,driver,"Not Updated prints for all UOM in DB \n "+results1+";;;Fail");
		}
	}else{
		htmlToExtent(cName,mName,extLogger,driver,"No Print is available to be send;;;Fail");}
	}

	public void printSENTstatus(List<List<Object>> results1, int nv,int UOMtoPrint, int nv1,WebDriver driver) throws IOException 
	{
		ArrayList<String> Pstatus = new ArrayList<String>();//System.out.println("check 1" +nv1); //System.out.println("check 2" +nv);
		if (nv1 <= nv) 
		{
			htmlToExtent(cName,mName,extLogger,driver,"Print has sent now;;;Pass");
			if (results1.size() != 0 && results1.size()>=UOMtoPrint) 
			{
				for (int n = 0; n < UOMtoPrint; n++) 
				{
					String Ptstatus = results1.get(n).get(1).toString();
					Pstatus.add(Ptstatus);
					// Pstatus[n]=Ptstatus;
				}
			int sentstatus = 0;
			htmlToExtent(cName,mName,extLogger,driver,"********* Comparing with DB *********;;;Pass");
			//Report_AddStep("testcase", "********* Comparing with DB *********",					"", "", "");
					htmlToExtent(cName,mName,extLogger,driver,"" + UOMtoPrint+ " UOM prints has been sent;;;Pass");
					//Report_AddStep("testcase", "" + UOMtoPrint+ " UOM prints has been sent", "", "", "");
			for (int l = 0; l < UOMtoPrint; l++) 
			{
				if (Pstatus.get(l).equals("X")) 
				{
					sentstatus++;
				}
			}
			//System.out.println(sentstatus);
			if (sentstatus == UOMtoPrint) 
			{
				htmlToExtent(cName,mName,extLogger,driver,"Status updated in Database as sent for " + UOMtoPrint+ " UOM;;;Pass");
				//Report_AddStep("testcase","Status updated in Database as sent for " + UOMtoPrint+ " UOM", "", "", "Pass");
			}
			}else {
				htmlToExtent(cName,mName,extLogger,driver,"Not Updated prints for all UOM in DB \n "+results1+";;;Fail");
		}
		} 
		else 
		{
			htmlToExtent(cName,mName,extLogger,driver,"print failed to sent;;;Fail");
			//Report_AddStep("testcase", "print failed to sent", "", "", "Fail");
		}
	}
	
	public void flagCheck(List<List<Object>> results,EnhancedArticleLookUpObjects objEnhancedArticleLookup,WebElement a,String flag,String value,WebDriver driver) throws IOException, AWTException
	{
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String article = results.get(num).get(0).toString();
			clickOnArticleReportReport(objEnhancedArticleLookup,driver);
			enterArt(objEnhancedArticleLookup, article,driver);
			try{
			if((a.getAttribute("class").equals("positiveFlag"))&&(getText(a)).equals(value))
			{
				htmlToExtent(cName,mName,extLogger,driver,""+flag+" Flag validation succesfull for article - "+article+";;;Pass");
				//Report_AddStep("testcase",""+flag+" Flag validation succesfull for article - "+article+"" , "", "", "Pass");
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,""+flag+" Flag validation unsuccesfull for article - "+article+";;;Fail");
				//Report_AddStep("testcase",""+flag+" Flag validation unsuccesfull for article - "+article+"" , "", "", "Fail");
			}}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+flag+" Flag cannot be validated for article - "+article+", sicne flag is not available in application;;;Fail");
			}
		}
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No "+flag+" articles in backend to check UnitInfo details;;;Fail");
			//Report_AddStep("testcase","No "+flag+" articles in backend to check UnitInfo details" , "", "", "Fail");
		}
	}
	

	


}
