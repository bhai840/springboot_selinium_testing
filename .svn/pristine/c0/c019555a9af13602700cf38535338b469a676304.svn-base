package au.wow.ngbomain.tests;

import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.OrderingObjects;
import au.wow.ngbomain.objects.OrderUpdationObject;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.OrderingPage;
import au.wow.ngbomain.pages.OrderUpdationPage;
import au.wow.ngbomain.pages.WoWLoginPage;

public class OrderingTests extends TestBase{

	private Logger log = LogManager.getLogger(OrderingTests.class);
	List<List<Object>> results;
	List<List<Object>> results1;
	List<List<Object>> results2;
	List<List<Object>> results3;
	List<List<Object>> ItemResults;
	List<List<Object>> resultsdummy;
	List<List<Object>> results_ord;
	List<List<Object>> BaseUOMList ;
	TestStatus status;
	SQLWrapper sql = new SQLWrapper(log);
	WoWLoginPage loginPage;
	OrderingPage objOrderCreatePage;
	OrderingObjects objOrderCreateObject;
	BasePage BaseObj;
	CommonFunctions common;
	StoreProperties storeprop;			
	List<List<Object>> result;
	List<List<Object>> result_comp;
	List<List<Object>> result_temp;
	public static WebDriver driver;
	public static XMLDataReader data;
	
	
	public static String mName="";
	public static String cName ="";
	public static ArrayList<String> methodList = new ArrayList<String>();
	public static ExtentTest extLogger;
	public static ExtentReports extReport;	
	public static boolean isExceptionCaptured=false;
	public static boolean isFirstTest=true;
	
	int count=0;		
	int MCcount=0;
		
	public OrderingTests(){
		super.log=log;
	}
	
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Emergeny PREQ Creation for Vendor Supplied articles")
	public void emergencyPREQ_VendorArticle()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierFROMdb = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierFROMdb);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(0).toString();
			
			String supplier = data.getText("suppliers");
			
			String rosterCheck = data.getText("rosterdate").replace("supplier", supplier);
			result = sql.executeQuery(getContext(), rosterCheck);
			
			if(result.size()>0){
				htmlToExtent(cName,mName,extLogger,driver, "Roster is available for the given supplier "+supplier+";;;Fail");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "No Roster date is available for the given supplier "+supplier+";;;Pass");
			}
			
			result.clear();
			
//			String articlenum = data.getText("article").replace("isPBD", "N").replace("supplier", supplier);
//			result = sql.executeQuery(getContext(), articlenum);
//			
//			if(result.size()>0){
//				int rand = randGenerator(result.size());
//				articleNumber.add(result.get(rand).get(0).toString());
//				int rand1 = randGenerator(result.size());
//				articleNumber.add(result.get(rand1).get(0).toString());
//			}
//			
//			result.clear();
//			
	/*		String PBDarticlenum = data.getText("article").replace("isPBD", "Y").replace("supplier", supplier);
			result = sql.executeQuery(getContext(), PBDarticlenum);
			
			if(result.size()>0){
				int rand3 = randGenerator(result.size());
				articleNumber.add(result.get(rand3).get(0).toString());
			}
			result.clear();
			
			String randarticlenum = data.getText("randArticle").replace("supplier", supplier);
			result = sql.executeQuery(getContext(), randarticlenum);
			
			if(result.size()>0){
				int rand4 = randGenerator(result.size());
				articleNumber.add(result.get(rand4).get(0).toString());
			}
		*/	
			
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				System.out.println("::::"+s);
			}
			
			
			List<List<Object>> artQuantity = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
				
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			try{
				objOrderCreateObject.rosterpopup.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessage.getText()+";;;Pass");
				//htmlToExtent(cName,mName,extLogger,driver, "Selecting emergency from the No Roster PopUp Message;;;Pass");
				//objOrderCreateObject.emergencyRadio.click();
				if(objOrderCreateObject.emergencyCheckBox.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Emergency check box is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Emergency check box is not selected by default;;;Fail");
				}
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), deliverydate, "current",driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}
				
				
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				String ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d]", "");
				objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				objOrderCreateObject.orderNoSend.sendKeys(ordNum);
				objOrderCreateObject.goBtn.click();
				waitForJSandJQueryToLoad(driver);
				if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
					htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
				}
				
			}
			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
				

			}
			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}
			
	
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Manual PREQ Creation for Vendor Supplied articles With Roster")
	public void manualPREQVendorArticle_WithRoster()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");

	
			//Article from DB
//			String articlenum = data.getText("article").replace("supplier",supplier);
//			result = sql.executeQuery(getContext(), articlenum);
			List<List<Object>> artResult = new ArrayList<List<Object>>();
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				artResult.addAll(StringToListCreation(s));
				System.out.println("::::"+s);
			}
//			
			
			
//			for(int i=0;i<5;i++){
//				int rand = randGenerator(result.size());
//				articleNumber.add(result.get(rand).get(0).toString());
//			}
			
			List<List<Object>> artQuantity = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
				
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier, driver);
			
			try{
				objOrderCreateObject.rosterMessageManualPreq.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreq.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				if(objOrderCreateObject.availableRadio.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available radio button is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Available radio button is not selected by default,Selecting the option;;;Pass");
					objOrderCreateObject.availableRadio.click();
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
				
				objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
				
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}

			}
			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}
			
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				String ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
	
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Manual PREQ Creation for DC Supplied articles With Roster")
	public void manualPREQDCArticle_WithRoster()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+12;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");

	
			//Article from DB
//			String articlenum = data.getText("article").replace("supplier",supplier);
//			result = sql.executeQuery(getContext(), articlenum);
			List<List<Object>> artResult = new ArrayList<List<Object>>();
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				artResult.addAll(StringToListCreation(s));
				System.out.println("::::"+s);
			}
//			
			
			
//			for(int i=0;i<5;i++){
//				int rand = randGenerator(result.size());
//				articleNumber.add(result.get(rand).get(0).toString());
//			}
			
			int totalQty=0;
			
			List<List<Object>> artQuantity = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
				
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier, driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is not selected by default,Selecting the option;;;Pass");
					objOrderCreateObject.selectRoster.click();
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
				
				objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
				
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}

			}
			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}

			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
			
			/*htmlToExtent(cName,mName,extLogger,driver, "*****Checking order details between Application and DB(Expected) values;;;Pass");
			List<List<Object>> orderdetail = getValuesFromTable(objOrderCreateObject.openOrderDetail);
			
			String temp = ordNum+":"+availableRosterDate+":"+"SUBMITTED"+":"+"Melbourne NDC (3911)"+":"+"WAREHOUSE"+":"+"STORE"+":"+totalQty+":"+"0"+":"+"";
			List<List<Object>> orderdetailExp = new ArrayList<List<Object>>();
			orderdetailExp.addAll(StringToListCreation(temp));
			
			ElementContains1(cName,mName,extLogger,driver,orderdetail,orderdetailExp);*/
			

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Error Message when Emergency PREQ for DC Supplied articles is created")
	public void manualPREQDCErrorMessage_noRoster()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+9;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");
			
			String rosterCheck = data.getText("rosterdate").replace("supplier", supplier);
			result = sql.executeQuery(getContext(), rosterCheck);
			
			if(result.size()>0){
				htmlToExtent(cName,mName,extLogger,driver, "Roster is available for the given supplier "+supplier+";;;Fail");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "No Roster date is available for the given supplier "+supplier+";;;Pass");
			}
			
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				System.out.println("::::"+s);
			}
			
		/*	String supplierfromDB = data.getText("supplier");
			result = sql.executeQuery(getContext(), supplierfromDB);
			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(0).toString();
			
			result.clear();
			String article = data.getText("article").replace("supplier",supplier);
			result = sql.executeQuery(getContext(), article);

			int rand = ThreadLocalRandom.current().nextInt(0,result.size())+1;
			articleNumber.add(result.get(rand).get(0).toString());
			for(int i=0;i<4;i++){
				int rand1 = ThreadLocalRandom.current().nextInt(0,result.size())+1;
				if(rand!=rand1){
					articleNumber.add(result.get(rand1).get(0).toString());
					break;
				}
				else{
					continue;
				}
			}
		 */
			List<List<Object>> artQuantity = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
				
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					//waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			if(objOrderCreateObject.errorArticleList.size()!=0){
				for(int i=1;i<=objOrderCreateObject.errorArticleList.size();i++){
					WebElement errorArtNumber = prepareWebElementWithDynamicXpathWithInt(objOrderCreateObject.errorArticle, i, driver);
					if(errorArtNumber.getText().contains("No roster")){
						htmlToExtent(cName,mName,extLogger,driver, errorArtNumber.getText()+";;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, errorArtNumber.getText()+";;;Fail");
					}
				}
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver, "No error Message is displayed when warehouse article with no roster is added;;;Fail");
			}
									

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Manual PREQ Creation for Warehouse Supplied Produce articles")
	public void manualPREQWarehouse_ProduceArticle()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");

			List<List<Object>>artResult = new ArrayList<List<Object>>();
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				artResult.addAll(StringToListCreation(s));
				System.out.println("::::"+s);
			}
			
			int totalQty=0;
			
			//-------------
			
	    /*	List<List<Object>> articleresult = new ArrayList<List<Object>>();
	    	String article = data.getText("getArticle");
	    	articleresult = sql.executeQuery(getContext(), article);
	    	
	    	objOrderCreatePage.addingArticles(objOrderCreateObject,5, articleresult, deliverydate,supplier, driver);
			*/
			List<List<Object>> artQuantity = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
				
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier,driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is not selected by default,Selecting the option;;;Pass");
					objOrderCreateObject.selectRoster.click();
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
				
				objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
				
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}

			}
			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}

			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
			
			/*htmlToExtent(cName,mName,extLogger,driver, "*****Checking order details between Application and DB(Expected) values;;;Pass");
			List<List<Object>> orderdetail = getValuesFromTable(objOrderCreateObject.openOrderDetail);
			
			String temp = ordNum+":"+availableRosterDate+":"+"SUBMITTED"+":"+"Melbourne NDC (3911)"+":"+"WAREHOUSE"+":"+"STORE"+":"+totalQty+":"+"0"+":"+"";
			List<List<Object>> orderdetailExp = new ArrayList<List<Object>>();
			orderdetailExp.addAll(StringToListCreation(temp));
			
			ElementContains1(cName,mName,extLogger,driver,orderdetail,orderdetailExp);*/
			

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Manual PREQ Creation for Vendor Supplied Produce articles")
	public void manualPREQVendor_ProduceArticle()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+12;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");
			List<List<Object>> artResult = new ArrayList<List<Object>>();
			
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				artResult.addAll(StringToListCreation(s));
				System.out.println("::::"+s);
			}
			
			int totalQty=0;
			
			//-------------
			
	    /*	List<List<Object>> articleresult = new ArrayList<List<Object>>();
	    	String article = data.getText("getArticle");
	    	articleresult = sql.executeQuery(getContext(), article);
	    	
	    	objOrderCreatePage.addingArticles(objOrderCreateObject,5, articleresult, deliverydate,supplier, driver);
			*/
			List<List<Object>> artQuantity  = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
												
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
				
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier,driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster date is selected by default;;;Fail");
				}
				else{
					objOrderCreateObject.selectRoster.click();
					htmlToExtent(cName,mName,extLogger,driver, "Available roster date is selected;;;Pass");
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
			}catch(Exception e){
				availableRosterDate = deliverydate;
			}
			
			objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
			
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}
			
			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
					

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Manual PREQ Creation for GN Vendor articlw with single VN Vendor")
	public void manualPREQGNVendor_withSingleVN()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+12;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");

	
			//Article from DB
			List<List<Object>> artResult = new ArrayList<List<Object>>();
			String articlenum = data.getText("article").replace("supplier",supplier);
			result = sql.executeQuery(getContext(), articlenum);
			
			int totalQty=0,loopTill;
			
			if(result.size() > 5){
				loopTill = 5;
			}
			else{
				loopTill = result.size();
			}
			
			
			List<List<Object>> artQuantity  = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<loopTill;i++){
				
				waitForJSandJQueryToLoad(driver);
				//Deliverydate Not valida message check
				try{
					objOrderCreateObject.deliverDateNotValidMessage.isDisplayed();
					objOrderCreateObject.deliverDateNotValidMessage.click();
				}catch(Exception e){
					System.out.println("Deliverydate Not valid message is displayed");
				}
				objOrderCreateObject.articleSend.sendKeys(result.get(i).get(0).toString());
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+result.get(i).get(0).toString()+" of quantity "+randQty+" is added to draft;;;Pass");
				articleNumber.add(result.get(i).get(0).toString());
				artResult.addAll(StringToListCreation(result.get(i).get(0).toString()));
				
				String temp = result.get(i).get(0).toString()+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
				
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier, driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is not selected by default,Selecting the option;;;Pass");
					objOrderCreateObject.selectRoster.click();
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
			}
			catch(Exception e){
				availableRosterDate = deliverydate;
				//htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}
			
			objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
			
				waitForJSandJQueryToLoad(driver);
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}

	
			

			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
			
			/*htmlToExtent(cName,mName,extLogger,driver, "*****Checking order details between Application and DB(Expected) values;;;Pass");
			List<List<Object>> orderdetail = getValuesFromTable(objOrderCreateObject.openOrderDetail);
			
			String temp = ordNum+":"+availableRosterDate+":"+"SUBMITTED"+":"+"Melbourne NDC (3911)"+":"+"WAREHOUSE"+":"+"STORE"+":"+totalQty+":"+"0"+":"+"";
			List<List<Object>> orderdetailExp = new ArrayList<List<Object>>();
			orderdetailExp.addAll(StringToListCreation(temp));
			
			ElementContains1(cName,mName,extLogger,driver,orderdetail,orderdetailExp);*/
			

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Manual PREQ Creation article with alternate vendor")
	public void manualPREQ_AlternateVendor()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+12;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");
			List<List<Object>> artResult = new ArrayList<List<Object>>();
			
			String articlenum = data.getText("articles");
			
			String art[] = articlenum.split(",");

			for(String s : art){

				articleNumber.add(s);
				artResult.addAll(StringToListCreation(s));
				System.out.println("::::"+s);
			}
			
			int totalQty=0;
			
			//-------------
			
	    /*	List<List<Object>> articleresult = new ArrayList<List<Object>>();
	    	String article = data.getText("getArticle");
	    	articleresult = sql.executeQuery(getContext(), article);
	    	
	    	objOrderCreatePage.addingArticles(objOrderCreateObject,5, articleresult, deliverydate,supplier, driver);
			*/
			List<List<Object>> artQuantity  = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
												
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
				
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			String deliverydate1 = objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,true, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier,driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is selected by default;;;Pass");
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
			}catch(Exception e){
				availableRosterDate = deliverydate;
			}
			
			String altDelDate = objOrderCreateObject.alternateVendeorExp.getText().replace("Delivery By: ", "").trim();
			
			objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, altDelDate,artQuantity,artResult, driver);
			
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate1.replace("/", ""), availableRosterDate,"available", driver);//del-23 ava-22
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}
			
			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
					

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify whether the user is able to create order for Unscheduled vendor")
	public void manualPREQ_UnscheduledVendor()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");

			List<List<Object>> artResult  = new ArrayList<List<Object>>();
			//Article from DB
			String articlenum = data.getText("article");//.replace("supplier",supplier);
			String art[] = articlenum.split(",");
			//result = sql.executeQuery(getContext(), articlenum);
			artResult.addAll(StringToListCreation(art[0]));
			artResult.addAll(StringToListCreation(art[1]));
			//String temp1 = art[0]+":"+art[1];
			//artResult.addAll(StringToListCreation(temp1));
			
			int totalQty=0,loopTill;
			
			if(artResult.size() > 5){
				loopTill = 5;
			}
			else{
				loopTill = artResult.size();
			}
			
			
			List<List<Object>> artQuantity  = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<loopTill;i++){
				
				waitForJSandJQueryToLoad(driver);
				//Deliverydate Not valida message check
				try{
					objOrderCreateObject.deliverDateNotValidMessage.isDisplayed();
					objOrderCreateObject.deliverDateNotValidMessage.click();
				}catch(Exception e){
					System.out.println("Deliverydate Not valid message is displayed");
				}
				objOrderCreateObject.articleSend.sendKeys(artResult.get(i).get(0).toString());
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+artResult.get(i).get(0).toString()+" of quantity "+randQty+" is added to draft;;;Pass");
				articleNumber.add(artResult.get(i).get(0).toString());
				
				String temp = artResult.get(i).get(0).toString()+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier, driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Available roster radio button is not selected by default,Selecting the option;;;Pass");
					objOrderCreateObject.selectRoster.click();
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
			}
			catch(Exception e){
				availableRosterDate = deliverydate;
				//htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}
			
			objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
			
				waitForJSandJQueryToLoad(driver);
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}

	
			

			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
			
			/*htmlToExtent(cName,mName,extLogger,driver, "*****Checking order details between Application and DB(Expected) values;;;Pass");
			List<List<Object>> orderdetail = getValuesFromTable(objOrderCreateObject.openOrderDetail);
			
			String temp = ordNum+":"+availableRosterDate+":"+"SUBMITTED"+":"+"Melbourne NDC (3911)"+":"+"WAREHOUSE"+":"+"STORE"+":"+totalQty+":"+"0"+":"+"";
			List<List<Object>> orderdetailExp = new ArrayList<List<Object>>();
			orderdetailExp.addAll(StringToListCreation(temp));
			
			ElementContains1(cName,mName,extLogger,driver,orderdetail,orderdetailExp);*/
			

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify whether user is able to create order for 1 GS Vendor having multiple VN Vendors")
	public void manualPREQ_1GSHavingMultipleVNVendor()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
//			String supplierfromDB = data.getText("supplier");
//			result = sql.executeQuery(getContext(), supplierfromDB);
//			String supplier = result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(4).toString();
			String supplier = data.getText("suppliers");
			htmlToExtent(cName,mName,extLogger,driver, "Supplier selected as "+supplier+";;;Pass");

			List<List<Object>> artResult  = new ArrayList<List<Object>>();
			//Article from DB
			String articlenum = data.getText("article");//.replace("supplier",supplier);
			String art[] = articlenum.split(",");
			//result = sql.executeQuery(getContext(), articlenum);
			artResult.addAll(StringToListCreation(art[0]));
			artResult.addAll(StringToListCreation(art[1]));
			//String temp1 = art[0]+":"+art[1];
			//artResult.addAll(StringToListCreation(temp1));
			
			int totalQty=0,loopTill;
			
			if(artResult.size() > 5){
				loopTill = 5;
			}
			else{
				loopTill = artResult.size();
			}
			
			
			List<List<Object>> artQuantity  = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<loopTill;i++){
				
				waitForJSandJQueryToLoad(driver);
				//Deliverydate Not valida message check
				try{
					objOrderCreateObject.deliverDateNotValidMessage.isDisplayed();
					objOrderCreateObject.deliverDateNotValidMessage.click();
				}catch(Exception e){
					System.out.println("Deliverydate Not valid message is displayed");
				}
				objOrderCreateObject.articleSend.sendKeys(artResult.get(i).get(0).toString());
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(1,7)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+artResult.get(i).get(0).toString()+" of quantity "+randQty+" is added to draft;;;Pass");
				articleNumber.add(artResult.get(i).get(0).toString());
				
				String temp = artResult.get(i).get(0).toString()+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
												
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			System.out.println(articleNumber);
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier, driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreq.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreq.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.availableRadio.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available radio button is selected by default;;;Pass");
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Available radio button is not selected by default,Selecting the option;;;Pass");
					objOrderCreateObject.availableRadio.click();
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
			}
			catch(Exception e){
				availableRosterDate = deliverydate;
				//htmlToExtent(cName,mName,extLogger,driver, "No popup has been displayed when no roster is available;;;Fail");
			}
			
			objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
			
				waitForJSandJQueryToLoad(driver);
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}

	
			

			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
			
			/*htmlToExtent(cName,mName,extLogger,driver, "*****Checking order details between Application and DB(Expected) values;;;Pass");
			List<List<Object>> orderdetail = getValuesFromTable(objOrderCreateObject.openOrderDetail);
			
			String temp = ordNum+":"+availableRosterDate+":"+"SUBMITTED"+":"+"Melbourne NDC (3911)"+":"+"WAREHOUSE"+":"+"STORE"+":"+totalQty+":"+"0"+":"+"";
			List<List<Object>> orderdetailExp = new ArrayList<List<Object>>();
			orderdetailExp.addAll(StringToListCreation(temp));
			
			ElementContains1(cName,mName,extLogger,driver,orderdetail,orderdetailExp);*/
			

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify whether user is able to create order for multiple GS Vendors having single VN Vendor")
	public void manualPREQVendor_multipleGSSingleVN()
	{
		
		ArrayList<String> articleNumber = new ArrayList<String>();
		//ArrayList<String> articlelist = new ArrayList<String>();
		
		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+12;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String deliverydate = dateFormat.format(date);
			System.out.println(dateFormat.format(date));
			
			
			objOrderCreateObject.createOrder.click();		
			objOrderCreateObject.addArticleBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Deleting articles from draft if any added to todays date*****;;;Info");
			objOrderCreatePage.delCreatedOrderOfSameDate(objOrderCreateObject, dateFormat.format(date), driver);
			
			//String supplierfromDB = data.getText("supplier");
			//result = sql.executeQuery(getContext(), supplierfromDB);
			String supplier =data.getText("suppliers"); //result.get(ThreadLocalRandom.current().nextInt(0,result.size())).get(0).toString();
			
			List<List<Object>> artResult = new ArrayList<List<Object>>();
			
			String articlenum = data.getText("article").replace("supplier", supplier);
			result = sql.executeQuery(getContext(), articlenum);
			
			for(int i=0;i<4;i++){
				int rand1 = randGenerator(result.size());
				articleNumber.add(result.get(rand1).get(0).toString());
				artResult.addAll(StringToListCreation(result.get(rand1).get(0).toString()));
				int rand2 = randGenerator(result.size());
				if(rand1 != rand2){
					articleNumber.add(result.get(rand2).get(0).toString());
					artResult.addAll(StringToListCreation(result.get(rand2).get(0).toString()));
					break;
				}
				else{
					continue;
				}
				
				
			}	
				
			int totalQty=0;
			
			//-------------
			
	    /*	List<List<Object>> articleresult = new ArrayList<List<Object>>();
	    	String article = data.getText("getArticle");
	    	articleresult = sql.executeQuery(getContext(), article);
	    	
	    	objOrderCreatePage.addingArticles(objOrderCreateObject,5, articleresult, deliverydate,supplier, driver);
			*/
			List<List<Object>> artQuantity  = new ArrayList<List<Object>>();
			htmlToExtent(cName,mName,extLogger,driver, "*****Adding articles to draft*****;;;Info");
			for(int i=0;i<articleNumber.size();i++){
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.articleSend.sendKeys(articleNumber.get(i));
				String randQty = Integer.toString(ThreadLocalRandom.current().nextInt(12,20)+1);
				totalQty = totalQty + Integer.parseInt(randQty);
				objOrderCreateObject.orderQty.sendKeys(randQty);
				
				htmlToExtent(cName,mName,extLogger,driver, "Article #"+articleNumber.get(i)+" of quantity "+randQty+" is added to draft;;;Pass");
												
				String temp = articleNumber.get(i)+":"+randQty;
				artQuantity.addAll(StringToListCreation(temp));
				
				objOrderCreateObject.delDate.sendKeys(dateFormat.format(date));
				objOrderCreateObject.createOrder.click();
				waitFor(1);
				objOrderCreateObject.searchBtn.click();
				objOrderCreatePage.pbdArticleSelection(objOrderCreateObject, driver);
				
				try{
					waitForElement(objOrderCreateObject.createOrderPopUp, driver);
					objOrderCreateObject.createOrderPopUp.isDisplayed();
					objOrderCreateObject.noBtn.click();
				}
				catch(Exception e){
					
				}
				
				objOrderCreateObject.articleSend.clear();
			}
			
			
			objOrderCreatePage.openingOrderDraft(objOrderCreateObject,  dateFormat.format(date),artQuantity,articleNumber,false, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Verifing the Draft Order*****;;;Info");
			
			objOrderCreatePage.errorArticleDelete(objOrderCreateObject, supplier,driver);
			String availableRosterDate="";
			
			try{
				objOrderCreateObject.rosterMessageManualPreqDC.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, ""+objOrderCreateObject.rosterMessageManualPreqDC.getText()+";;;Pass");
				waitForJSandJQueryToLoad(driver);
				availableRosterDate = objOrderCreateObject.availableRosterDate.getText();
				if(objOrderCreateObject.selectRoster.isSelected()){
					htmlToExtent(cName,mName,extLogger,driver, "Available roster date is selected by default;;;Fail");
				}
				else{
					objOrderCreateObject.selectRoster.click();
					htmlToExtent(cName,mName,extLogger,driver, "Available roster date is selected;;;Pass");
				}
				
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.proceedToCreateRoster.click();
				waitForJSandJQueryToLoad(driver);
			}catch(Exception e){
				availableRosterDate = deliverydate;
			}
			
			objOrderCreatePage.articleDetailsCheck(objOrderCreateObject, deliverydate,artQuantity,artResult, driver);
			
				if(objOrderCreateObject.status.getText().trim().equals("Verified")){
					htmlToExtent(cName,mName,extLogger,driver, "After verifing the draft status been updated as verified;;;Pass");
					
					htmlToExtent(cName,mName,extLogger,driver, "*****Checking delivery date for each article in draft*****;;;Info");
					objOrderCreatePage.checkDeliveryDate(objOrderCreateObject,deliverydate.replace("/", ""), availableRosterDate,"available", driver);
					
					objOrderCreatePage.createBtn(objOrderCreateObject, driver);
					waitForJSandJQueryToLoad(driver);
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver, "Status not been updated as verified;;;Fail");
				}
			
			String ordNum = "";
			try{
				waitForElement(objOrderCreateObject.successMsg, driver);
				objOrderCreateObject.successMsg.isDisplayed();
				htmlToExtent(cName,mName,extLogger,driver, objOrderCreateObject.successMsg.getText()+";;;Pass");
				ordNum =  objOrderCreateObject.successMsg.getText().replaceAll("[^\\d,]", "");
				objOrderCreateObject.successMsg.click();
				//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
				if(ordNum.contains(",")){
					//ArrayList<String> ordNumber = new ArrayList<String>();
					String[] orderNumber = ordNum.split(",");
					for(int i=0;i<orderNumber.length;i++){
						objOrderCreateObject.orderNoSend.clear();
						objOrderCreateObject.orderNoSend.sendKeys(orderNumber[i]);
						objOrderCreateObject.goBtn.click();
						waitForJSandJQueryToLoad(driver);
						if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" is in submitted status;;;Pass");
						}
						else{
							htmlToExtent(cName,mName,extLogger,driver, "Order #"+orderNumber[i]+" status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
						}
						//objOrderCreatePage.toOrderEnqPage(objOrderCreateObject, driver);
					}
				}
				else{
					objOrderCreateObject.orderNoSend.clear();
					objOrderCreateObject.orderNoSend.sendKeys(ordNum);
					objOrderCreateObject.goBtn.click();
					waitForJSandJQueryToLoad(driver);
					if(objOrderCreateObject.orderStatus.getText().trim().equals("SUBMITTED")){
						htmlToExtent(cName,mName,extLogger,driver, "Order is in submitted status;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver, "Order status "+objOrderCreateObject.orderStatus.getText()+";;;Fail");
					}
				}
			}

			catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver, "Order Created Success Message is not displayed;;;Fail");
			}
					

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
			
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	//------Order updation
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Order Updation of SUGO STO having order type ZUBW")
	public void OrderUpdationOfSugoSTO_ZUBW()
	{

		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderDetailsAppln1 = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsDB = new ArrayList<List<Object>>();
		List<List<Object>> orderArticleTable = new ArrayList<List<Object>>();
		List<List<Object>> resultDB = new ArrayList<List<Object>>();
		List<List<Object>> resultAppln = new ArrayList<List<Object>>();

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String orderNo = data.getText("orderNumber_7051");
			objOrderCreateObject.orderNoSend.sendKeys(orderNo);
			objOrderCreateObject.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objOrderCreateObject.filteredOrder.isDisplayed()){
					orderDetailsAppln = getValuesFromTable(objOrderCreateObject.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"*****ORDER DETAILS*****;;;Info");
					htmlToExtent(cName,mName,extLogger,driver,""+orderDetailsAppln+";;;Pass");
					objOrderCreateObject.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objOrderCreateObject.clearGroup.click();
				}
			}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+objOrderCreateObject.errorMessage.getText()+";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
				
			
			if(orderDetailsAppln.get(0).get(2).equals("OPEN") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE") && orderDetailsAppln.get(0).get(5).equals("SUGO")){
				htmlToExtent(cName,mName,extLogger,driver,"For Order #"+orderNo+" status is Open,type is Warehouse and Source is SUGO;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+",Type : "+orderDetailsAppln.get(0).get(3)+" and Source "+orderDetailsAppln.get(0).get(4)+";;;Fail");
			}

			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			
			result.clear();
			String orderdetails = data.getText("orderdetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), orderdetails);
						
			String temp=""+orderNo+":"+result.get(0).get(3)+":"+orderDetailsAppln.get(0).get(2)+":"+orderDetailsAppln.get(0).get(3)+":"+orderDetailsAppln.get(0).get(4)+":"+orderDetailsAppln.get(0).get(5)+":"+orderDetailsAppln.get(0).get(6)+":"+"0"+":"+orderDetailsAppln.get(0).get(1)+":"+orderDetailsAppln.get(0).get(8).toString().replaceAll("\\:", "."); //Add Cutofftime
			orderEnqDetailsAppln.addAll(StringToListCreation(temp));
			String statusDB;
			String supplierDB =  result.get(0).get(6).toString()+" ("+result.get(0).get(5).toString()+")";
			String totCartons = result.get(0).get(4).toString().substring(0,result.get(0).get(4).toString().indexOf("."));
			String dDateDB = dateFormat(result.get(0).get(2).toString().replaceAll("\\-","/"), "yyyy/MM/dd","date");
			
			String cutOffDB;
			String cutOffDateDB = result.get(0).get(9).toString();
			cutOffDateDB = dateFormat(cutOffDateDB.replaceAll("\\-","/"), "yyyy/MM/dd","date");
			String cutOffTimeDB = result.get(0).get(10).toString();
			String[] cutOffTime = cutOffTimeDB.split("(?<=\\G.{2})");
			cutOffTimeDB = cutOffTime[0]+":"+cutOffTime[1]+":"+cutOffTime[2];
			if(cutOffTimeDB.equals("00:00:00")){cutOffTimeDB = "12.00.00 AM";}else{cutOffTimeDB = dateFormat(cutOffTimeDB, "hh:mm:ss","time");}
			if(Integer.parseInt(cutOffTime[0]) > 12){
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" PM";
			}else{
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" AM";
			}
			if(result.get(0).get(8).toString().equals("O")){statusDB = "OPEN";}else{statusDB="NOT OPEN";}
			String tempDB = ""+result.get(0).get(0)+":"+result.get(0).get(3)+":"+statusDB+":"+supplierDB+":"+"WAREHOUSE"+":"+result.get(0).get(7)+":"+totCartons+":"+"0"+":"+dDateDB+":"+cutOffDB; //Add Cutofftime
			orderEnqDetailsDB.addAll(StringToListCreation(tempDB));
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Enquiry Page and DB *****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Page(After Opening Order) and DB*****;;;Info");
			String orderNumberAppln = objOrderCreateObject.orderNumberAppln.getText().substring(objOrderCreateObject.orderNumberAppln.getText().indexOf("#")+1).trim();
			String ordertypeAppln = objOrderCreateObject.orderNumberAppln.getText().substring(0,objOrderCreateObject.orderNumberAppln.getText().indexOf(" ")).toUpperCase();
			String oStatus = objOrderCreateObject.statusAppln.getText().toUpperCase();
			String totalArtAppln = objOrderCreateObject.totalArticleAppln.getText();
			String totalCartonOrderedAppln = objOrderCreateObject.totalCartonOrderedAppln.getText();
			
			String[] detailsOrder = objOrderCreateObject.orderDateSupplierDetails.getText().split("\\|");
			String supplierAppln = detailsOrder[0].substring(detailsOrder[0].indexOf(":")+1).trim();
			String deliveryDateAppln = detailsOrder[1].substring(detailsOrder[1].indexOf(":")+1).trim(); 
			String cutOffAppln = detailsOrder[2].replace("Cut-off Date before Authorisation", "").trim();
			String sourceAppln = detailsOrder[3].substring(detailsOrder[3].indexOf(":")+1).trim();
			
			orderEnqDetailsAppln.clear();
			String temp1 = ""+orderNumberAppln+":"+totalArtAppln+":"+oStatus+":"+supplierAppln+":"+ordertypeAppln+":"+sourceAppln+":"+totalCartonOrderedAppln+":"+"0"+":"+deliveryDateAppln+":"+cutOffAppln.toString().replaceAll("\\:", ".");
			orderEnqDetailsAppln.addAll(StringToListCreation(temp1));
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			orderArticleTable = getValuesFromTables(objOrderCreateObject.orderTable);
			removeIndex(orderArticleTable, Integer.toString(0));
			int k=1;
			for(int j=0;j<orderArticleTable.size();j++){
				String[] tempOM = orderArticleTable.get(j).get(5).toString().split("\\s");
				String om = String.format("%.03f", Float.parseFloat(tempOM[0].trim()))+" "+tempOM[1].trim();
				String[] tempTU = orderArticleTable.get(j).get(6).toString().split("\\s");;
				String tu = String.format("%.03f", Float.parseFloat(tempTU[0].trim()))+" "+tempTU[1].trim();
				String[] sitsoo = objOrderCreatePage.gettingSITSOOvalues(objOrderCreateObject, j,k, driver).split("\\&");
				//if(sitsoo[0]==null){sitsoo[0]="0.000";}else if(sitsoo[1]==null){sitsoo[1]="0.000";}
				String tempAppln = orderArticleTable.get(j).get(0)+":"+orderArticleTable.get(j).get(1)+":"+orderArticleTable.get(j).get(2)+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(3).toString()))+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(4).toString()))+":"+om+":"+tu+":"+sitsoo[0]+":"+sitsoo[1];
				resultAppln.addAll(StringToListCreation(tempAppln));
				System.out.println(resultAppln);
				k=k+2;
			}
			
			String articledetails = data.getText("articledetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articledetails);
			removeMoreThanSingleSpace(result,1);
			for(int i=0;i<result.size();i++){
				String desc = result.get(i).get(1).toString().replace("*TEST(UEC)*","").trim();
				String tempDB1 = ""+result.get(i).get(0)+":"+desc+":"+result.get(i).get(2)+":"+result.get(i).get(3)+":"+result.get(i).get(4)+":"+result.get(i).get(5)+" EA"+":"+String.format("%.03f",(Float.parseFloat(result.get(i).get(4).toString())*Float.parseFloat(result.get(i).get(5).toString())))+" EA"+":"+result.get(i).get(6)+":"+result.get(i).get(7);
				resultDB.addAll(StringToListCreation(tempDB1));
				System.out.println(resultDB);
				
			}
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Article Details (Number,Description,UOM,SOH,OM,Ordered Qty,Total Units,SOO,SIT) between Order Page and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,resultDB,resultAppln);
				
			List<List<Object>> articleList1 = articleFromDB();
			
			List<List<Object>>block = checkBlockText(orderNo, driver);
			objOrderCreatePage.blockingArticle(objOrderCreateObject, block,articleList1,"SUGO", driver);
			k=1;
			//objOrderCreatePage.updatingQuantity(objOrderCreateObject,k, driver);
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Checking Order Status after updating and saving the changes****;;;Info");
			objOrderCreatePage.checkingOrderAfterUpdate(objOrderCreateObject,orderDetailsAppln1, orderNo,driver);
			
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		    
		    
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Order Updation of SUGO PREQ having order type ZSW")
	public void OrderUpdationOfSugoPREQ_ZSW()
	{

		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderDetailsAppln1 = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsDB = new ArrayList<List<Object>>();
		List<List<Object>> orderArticleTable = new ArrayList<List<Object>>();
		List<List<Object>> resultDB = new ArrayList<List<Object>>();
		List<List<Object>> resultAppln = new ArrayList<List<Object>>();
		List<List<Object>> result12 = new ArrayList<List<Object>>();

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String orderNo = data.getText("orderNumber_7051");
			objOrderCreateObject.orderNoSend.sendKeys(orderNo);
			objOrderCreateObject.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objOrderCreateObject.filteredOrder.isDisplayed()){
					orderDetailsAppln = getValuesFromTable(objOrderCreateObject.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"*****ORDER DETAILS*****;;;Info");
					htmlToExtent(cName,mName,extLogger,driver,""+orderDetailsAppln+";;;Pass");
					objOrderCreateObject.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objOrderCreateObject.clearGroup.click();
				}
			}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+objOrderCreateObject.errorMessage.getText()+";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("OPEN") && orderDetailsAppln.get(0).get(4).equals("VENDOR") && orderDetailsAppln.get(0).get(5).equals("SUGO")){
				htmlToExtent(cName,mName,extLogger,driver,"For Order #"+orderNo+" status is Open,type is Vendor and Source is SUGO;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+",Type : "+orderDetailsAppln.get(0).get(3)+" and Source "+orderDetailsAppln.get(0).get(4)+";;;Fail");
			}
			
			String articlecount = data.getText("articlecount").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articlecount);
			String artCount = result.get(0).get(0).toString();

			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			
			result.clear();
			String orderdetails = data.getText("orderdetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), orderdetails);
						
			String temp=""+orderNo+":"+artCount+":"+orderDetailsAppln.get(0).get(2)+":"+orderDetailsAppln.get(0).get(3)+":"+orderDetailsAppln.get(0).get(4)+":"+orderDetailsAppln.get(0).get(5)+":"+orderDetailsAppln.get(0).get(6)+":"+"0"+":"+orderDetailsAppln.get(0).get(1)+":"+orderDetailsAppln.get(0).get(8).toString().replaceAll("\\:", "."); //Add Cutofftime
			orderEnqDetailsAppln.addAll(StringToListCreation(temp));
			String statusDB;
			String supplierDB =  result.get(0).get(6).toString()+" ("+result.get(0).get(5).toString()+")";
			String totCartons = result.get(0).get(4).toString().substring(0,result.get(0).get(4).toString().indexOf("."));
			String dDateDB = dateFormat(result.get(0).get(2).toString().replaceAll("\\-","/"), "yyyy/MM/dd","date");
			
			String cutOffDB;
			String cutOffDateDB = result.get(0).get(9).toString();
			cutOffDateDB = dateFormat(cutOffDateDB.replaceAll("\\-","/"), "yyyy/MM/dd","date");
			String cutOffTimeDB = result.get(0).get(10).toString();
			String[] cutOffTime = cutOffTimeDB.split("(?<=\\G.{2})");
			cutOffTimeDB = cutOffTime[0]+":"+cutOffTime[1]+":"+cutOffTime[2];
			if(cutOffTimeDB.equals("00:00:00")){cutOffTimeDB = "12.00.00 AM";}else{cutOffTimeDB = dateFormat(cutOffTimeDB, "hh:mm:ss","time");}
			if(Integer.parseInt(cutOffTime[0]) > 12){
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" PM";
			}else{
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" AM";
			}
			if(result.get(0).get(8).toString().equals("O")){statusDB = "OPEN";}else{statusDB="NOT OPEN";}
			String tempDB = ""+result.get(0).get(0)+":"+artCount+":"+statusDB+":"+supplierDB+":"+"VENDOR"+":"+result.get(0).get(7)+":"+totCartons+":"+"0"+":"+dDateDB+":"+cutOffDB; //Add Cutofftime
			orderEnqDetailsDB.addAll(StringToListCreation(tempDB));
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Enquiry Page and DB *****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Page(After Opening Order) and DB*****;;;Info");
			String orderNumberAppln = objOrderCreateObject.orderNumberAppln.getText().substring(objOrderCreateObject.orderNumberAppln.getText().indexOf("#")+1).trim();
			String ordertypeAppln = objOrderCreateObject.orderNumberAppln.getText().substring(0,objOrderCreateObject.orderNumberAppln.getText().indexOf(" ")).toUpperCase();
			String oStatus = objOrderCreateObject.statusAppln.getText().toUpperCase();
			String totalArtAppln = objOrderCreateObject.totalArticleAppln.getText();
			String totalCartonOrderedAppln = objOrderCreateObject.totalCartonOrderedAppln.getText();
			
			String[] detailsOrder = objOrderCreateObject.orderDateSupplierDetails.getText().split("\\|");
			String supplierAppln = detailsOrder[0].substring(detailsOrder[0].indexOf(":")+1).trim();
			String deliveryDateAppln = detailsOrder[1].substring(detailsOrder[1].indexOf(":")+1).trim(); 
			String cutOffAppln = detailsOrder[2].replace("Cut-off Date before Authorisation", "").trim();
			String sourceAppln = detailsOrder[3].substring(detailsOrder[3].indexOf(":")+1).trim();
			
			orderEnqDetailsAppln.clear();
			String temp1 = ""+orderNumberAppln+":"+totalArtAppln+":"+oStatus+":"+supplierAppln+":"+ordertypeAppln+":"+sourceAppln+":"+totalCartonOrderedAppln+":"+"0"+":"+deliveryDateAppln+":"+cutOffAppln.toString().replaceAll("\\:", ".");
			orderEnqDetailsAppln.addAll(StringToListCreation(temp1));
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			orderArticleTable = getValuesFromTables(objOrderCreateObject.orderTable);
			removeIndex(orderArticleTable, Integer.toString(0));
			int k=1;
			for(int j=0;j<orderArticleTable.size();j++){
				String[] tempOM = orderArticleTable.get(j).get(5).toString().split("\\s");
				String om = String.format("%.03f", Float.parseFloat(tempOM[0].trim()))+" "+tempOM[1].trim();
				String[] tempTU = orderArticleTable.get(j).get(6).toString().split("\\s");;
				String tu = String.format("%.03f", Float.parseFloat(tempTU[0].trim()))+" "+tempTU[1].trim();
				String[] sitsoo = objOrderCreatePage.gettingSITSOOvalues(objOrderCreateObject, j,k, driver).split("\\&");
				//if(sitsoo[0]==null){sitsoo[0]="0.000";}else if(sitsoo[1]==null){sitsoo[1]="0.000";}
				String tempAppln = orderArticleTable.get(j).get(0)+":"+orderArticleTable.get(j).get(1)+":"+orderArticleTable.get(j).get(2)+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(3).toString()))+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(4).toString()))+":"+om+":"+tu+":"+sitsoo[0]+":"+sitsoo[1];
				resultAppln.addAll(StringToListCreation(tempAppln));
				System.out.println(resultAppln);
				k=k+2;
			}
			
			String articledetails = data.getText("articledetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articledetails);
			removeMoreThanSingleSpace(result,1);
			for(int i=0;i<result.size();i++){
				String desc = result.get(i).get(1).toString().replace("*TEST(UEC)*","").trim();
				String tempDB1 = ""+result.get(i).get(0)+":"+desc+":"+result.get(i).get(2)+":"+result.get(i).get(3)+":"+result.get(i).get(4)+":"+result.get(i).get(5)+" "+result.get(i).get(8)+":"+String.format("%.03f",(Float.parseFloat(result.get(i).get(4).toString())*Float.parseFloat(result.get(i).get(5).toString())))+" "+result.get(i).get(8)+":"+result.get(i).get(6)+":"+result.get(i).get(7);
				resultDB.addAll(StringToListCreation(tempDB1));
				System.out.println(resultDB);
				
			}
			
						
			//htmlToExtent(cName,mName,extLogger,driver,"*****Checking block codes for the articles *****;;;Info");
	
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Article Details (Number,Description,UOM,SOH,OM,Ordered Qty,Total Units,SOO,SIT) between Order Page and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,resultDB,resultAppln);
				
			List<List<Object>> articleList1 = articleFromDB();
			
			List<List<Object>>block = checkBlockText(orderNo, driver);
			objOrderCreatePage.blockingArticle(objOrderCreateObject, block,articleList1,"SUGO", driver);
			k=1;
			//objOrderCreatePage.updatingQuantity(objOrderCreateObject,k, driver);
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Checking Order Status after updating and saving the changes****;;;Info");
			objOrderCreatePage.checkingOrderAfterUpdate(objOrderCreateObject,orderDetailsAppln1, orderNo,driver);
			
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		    
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Order Updation of SUGO PREQ having order type ZSP")
	public void OrderUpdationOfSugoPREQ_ZSP()
	{

		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderDetailsAppln1 = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsDB = new ArrayList<List<Object>>();
		List<List<Object>> orderArticleTable = new ArrayList<List<Object>>();
		List<List<Object>> resultDB = new ArrayList<List<Object>>();
		List<List<Object>> resultAppln = new ArrayList<List<Object>>();

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String orderNo = data.getText("orderNumber_7051");
			objOrderCreateObject.orderNoSend.sendKeys(orderNo);
			objOrderCreateObject.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objOrderCreateObject.filteredOrder.isDisplayed()){
					orderDetailsAppln = getValuesFromTable(objOrderCreateObject.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"*****ORDER DETAILS*****;;;Info");
					htmlToExtent(cName,mName,extLogger,driver,""+orderDetailsAppln+";;;Pass");
					objOrderCreateObject.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objOrderCreateObject.clearGroup.click();
				}
			}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+objOrderCreateObject.errorMessage.getText()+";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("OPEN") && orderDetailsAppln.get(0).get(4).equals("VENDOR") && orderDetailsAppln.get(0).get(5).equals("SUGO")){
				htmlToExtent(cName,mName,extLogger,driver,"For Order #"+orderNo+" status is Open,type is Vendor and Source is SUGO;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+",Type : "+orderDetailsAppln.get(0).get(3)+" and Source "+orderDetailsAppln.get(0).get(4)+";;;Fail");
			}
			
			String articlecount = data.getText("articlecount").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articlecount);
			String artCount = result.get(0).get(0).toString();

			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			
			result.clear();
			String orderdetails = data.getText("orderdetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), orderdetails);
						
			String temp=""+orderNo+":"+artCount+":"+orderDetailsAppln.get(0).get(2)+":"+orderDetailsAppln.get(0).get(3)+":"+orderDetailsAppln.get(0).get(4)+":"+orderDetailsAppln.get(0).get(5)+":"+orderDetailsAppln.get(0).get(6)+":"+"0"+":"+orderDetailsAppln.get(0).get(1)+":"+orderDetailsAppln.get(0).get(8).toString().replaceAll("\\:", "."); //Add Cutofftime
			orderEnqDetailsAppln.addAll(StringToListCreation(temp));
			String statusDB;
			String supplierDB =  result.get(0).get(6).toString()+" ("+result.get(0).get(5).toString()+")";
			String totCartons = result.get(0).get(4).toString().substring(0,result.get(0).get(4).toString().indexOf("."));
			String dDateDB = dateFormat(result.get(0).get(2).toString().replaceAll("\\-","/"), "yyyy/MM/dd","date");
			
			String cutOffDB;
			String cutOffDateDB = result.get(0).get(9).toString();
			cutOffDateDB = dateFormat(cutOffDateDB.replaceAll("\\-","/"), "yyyy/MM/dd","date");
			String cutOffTimeDB = result.get(0).get(10).toString();
			String[] cutOffTime = cutOffTimeDB.split("(?<=\\G.{2})");
			cutOffTimeDB = cutOffTime[0]+":"+cutOffTime[1]+":"+cutOffTime[2];
			if(cutOffTimeDB.equals("00:00:00")){cutOffTimeDB = "12.00.00 AM";}else{cutOffTimeDB = dateFormat(cutOffTimeDB, "hh:mm:ss","time");}
			if(Integer.parseInt(cutOffTime[0]) > 12){
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" PM";
			}else{
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" AM";
			}
			if(result.get(0).get(8).toString().equals("O")){statusDB = "OPEN";}else{statusDB="NOT OPEN";}
			String tempDB = ""+result.get(0).get(0)+":"+artCount+":"+statusDB+":"+supplierDB+":"+"VENDOR"+":"+result.get(0).get(7)+":"+totCartons+":"+"0"+":"+dDateDB+":"+cutOffDB; //Add Cutofftime
			orderEnqDetailsDB.addAll(StringToListCreation(tempDB));
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Enquiry Page and DB *****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Page(After Opening Order) and DB*****;;;Info");
			String orderNumberAppln = objOrderCreateObject.orderNumberAppln.getText().substring(objOrderCreateObject.orderNumberAppln.getText().indexOf("#")+1).trim();
			String ordertypeAppln = objOrderCreateObject.orderNumberAppln.getText().substring(0,objOrderCreateObject.orderNumberAppln.getText().indexOf(" ")).toUpperCase();
			String oStatus = objOrderCreateObject.statusAppln.getText().toUpperCase();
			String totalArtAppln = objOrderCreateObject.totalArticleAppln.getText();
			String totalCartonOrderedAppln = objOrderCreateObject.totalCartonOrderedAppln.getText();
			
			String[] detailsOrder = objOrderCreateObject.orderDateSupplierDetails.getText().split("\\|");
			String supplierAppln = detailsOrder[0].substring(detailsOrder[0].indexOf(":")+1).trim();
			String deliveryDateAppln = detailsOrder[1].substring(detailsOrder[1].indexOf(":")+1).trim(); 
			String cutOffAppln = detailsOrder[2].replace("Cut-off Date before Authorisation", "").trim();
			String sourceAppln = detailsOrder[3].substring(detailsOrder[3].indexOf(":")+1).trim();
			
			orderEnqDetailsAppln.clear();
			String temp1 = ""+orderNumberAppln+":"+totalArtAppln+":"+oStatus+":"+supplierAppln+":"+ordertypeAppln+":"+sourceAppln+":"+totalCartonOrderedAppln+":"+"0"+":"+deliveryDateAppln+":"+cutOffAppln.toString().replaceAll("\\:", ".");
			orderEnqDetailsAppln.addAll(StringToListCreation(temp1));
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			orderArticleTable = getValuesFromTables(objOrderCreateObject.orderTable);
			removeIndex(orderArticleTable, Integer.toString(0));
			int k=1;
			for(int j=0;j<orderArticleTable.size();j++){
				String[] tempOM = orderArticleTable.get(j).get(5).toString().split("\\s");
				String om = String.format("%.03f", Float.parseFloat(tempOM[0].trim()))+" "+tempOM[1].trim();
				String[] tempTU = orderArticleTable.get(j).get(6).toString().split("\\s");;
				String tu = String.format("%.03f", Float.parseFloat(tempTU[0].trim()))+" "+tempTU[1].trim();
				String[] sitsoo = objOrderCreatePage.gettingSITSOOvalues(objOrderCreateObject, j,k, driver).split("\\&");
				//if(sitsoo[0]==null){sitsoo[0]="0.000";}else if(sitsoo[1]==null){sitsoo[1]="0.000";}
				String tempAppln = orderArticleTable.get(j).get(0)+":"+orderArticleTable.get(j).get(1)+":"+orderArticleTable.get(j).get(2)+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(3).toString()))+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(4).toString()))+":"+om+":"+tu+":"+sitsoo[0]+":"+sitsoo[1];
				resultAppln.addAll(StringToListCreation(tempAppln));
				System.out.println(resultAppln);
				k=k+2;
			}
			
			String articledetails = data.getText("articledetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articledetails);
			removeMoreThanSingleSpace(result,1);
			for(int i=0;i<result.size();i++){
				String desc = result.get(i).get(1).toString().replace("*TEST(UEC)*","").trim();
				String tempDB1 = ""+result.get(i).get(0)+":"+desc+":"+result.get(i).get(2)+":"+result.get(i).get(3)+":"+result.get(i).get(4)+":"+result.get(i).get(5)+" "+result.get(i).get(8)+":"+String.format("%.03f",(Float.parseFloat(result.get(i).get(4).toString())*Float.parseFloat(result.get(i).get(5).toString())))+" "+result.get(i).get(8)+":"+result.get(i).get(6)+":"+result.get(i).get(7);
				resultDB.addAll(StringToListCreation(tempDB1));
				System.out.println(resultDB);
				
			}
			
			
			
			//htmlToExtent(cName,mName,extLogger,driver,"*****Checking block codes for the articles *****;;;Info");
	
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Article Details (Number,Description,UOM,SOH,OM,Ordered Qty,Total Units,SOO,SIT) between Order Page and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,resultDB,resultAppln);
		
			List<List<Object>> articleList1 = articleFromDB();
			
			List<List<Object>>block = checkBlockText(orderNo, driver);
			objOrderCreatePage.blockingArticle(objOrderCreateObject, block,articleList1,"SUGO", driver);
			k=1;
			//objOrderCreatePage.updatingQuantity(objOrderCreateObject,k, driver);
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Checking Order Status after updating and saving the changes****;;;Info");
			objOrderCreatePage.checkingOrderAfterUpdate(objOrderCreateObject,orderDetailsAppln1, orderNo,driver);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		    
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	//Manual PREQ and PO
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Order Updation of Manual PREQ of DC supplied articles having order type ZMW")
	public void OrderUpdationOfManualPO_ZMW()
	{

		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderDetailsAppln1 = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsDB = new ArrayList<List<Object>>();
		List<List<Object>> orderArticleTable = new ArrayList<List<Object>>();
		List<List<Object>> resultDB = new ArrayList<List<Object>>();
		List<List<Object>> resultAppln = new ArrayList<List<Object>>();

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String orderNo = data.getText("orderNumber_7051");
			objOrderCreateObject.orderNoSend.sendKeys(orderNo);
			objOrderCreateObject.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objOrderCreateObject.filteredOrder.isDisplayed()){
					orderDetailsAppln = getValuesFromTable(objOrderCreateObject.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"*****ORDER DETAILS*****;;;Info");
					htmlToExtent(cName,mName,extLogger,driver,""+orderDetailsAppln+";;;Pass");
					objOrderCreateObject.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objOrderCreateObject.clearGroup.click();
				}
			}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+objOrderCreateObject.errorMessage.getText()+";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
				
			
			if(orderDetailsAppln.get(0).get(2).equals("OPEN") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE") && orderDetailsAppln.get(0).get(5).equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver,"For Order #"+orderNo+" status is Open,type is Warehouse and Source is STORE;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+",Type : "+orderDetailsAppln.get(0).get(3)+" and Source "+orderDetailsAppln.get(0).get(4)+";;;Fail");
			}

			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			
			//result.clear();
			String orderdetails = data.getText("orderdetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), orderdetails);
						
			String temp=""+orderNo+":"+result.get(0).get(3)+":"+orderDetailsAppln.get(0).get(2)+":"+orderDetailsAppln.get(0).get(3)+":"+orderDetailsAppln.get(0).get(4)+":"+orderDetailsAppln.get(0).get(5)+":"+orderDetailsAppln.get(0).get(6)+":"+"0"+":"+orderDetailsAppln.get(0).get(1)+":"+orderDetailsAppln.get(0).get(8).toString().replaceAll("\\:", "."); //Add Cutofftime
			orderEnqDetailsAppln.addAll(StringToListCreation(temp));
			String statusDB;
			String supplierDB =  result.get(0).get(6).toString()+" ("+result.get(0).get(5).toString()+")";
			String totCartons = result.get(0).get(4).toString().substring(0,result.get(0).get(4).toString().indexOf("."));
			String dDateDB = dateFormat(result.get(0).get(2).toString().replaceAll("\\-","/"), "yyyy/MM/dd","date");
			
			String cutOffDB;
			String cutOffDateDB = result.get(0).get(9).toString();
			cutOffDateDB = dateFormat(cutOffDateDB.replaceAll("\\-","/"), "yyyy/MM/dd","date");
			String cutOffTimeDB = result.get(0).get(10).toString();
			String[] cutOffTime = cutOffTimeDB.split("(?<=\\G.{2})");
			cutOffTimeDB = cutOffTime[0]+":"+cutOffTime[1]+":"+cutOffTime[2];
			if(cutOffTimeDB.equals("00:00:00")){cutOffTimeDB = "12.00.00 AM";}else{cutOffTimeDB = dateFormat(cutOffTimeDB, "hh:mm:ss","time");}
		/*	if(Integer.parseInt(cutOffTime[0]) > 12){
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" PM";
			}else{
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" AM";
			}
		*/	cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".");
			if(result.get(0).get(8).toString().equals("O")){statusDB = "OPEN";}else{statusDB="NOT OPEN";}
			String tempDB = ""+result.get(0).get(0)+":"+result.get(0).get(3)+":"+statusDB+":"+supplierDB+":"+"WAREHOUSE"+":"+result.get(0).get(7)+":"+totCartons+":"+"0"+":"+dDateDB+":"+cutOffDB; //Add Cutofftime
			orderEnqDetailsDB.addAll(StringToListCreation(tempDB));
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Enquiry Page and DB *****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Page(After Opening Order) and DB*****;;;Info");
			String orderNumberAppln = objOrderCreateObject.orderNumberAppln.getText().substring(objOrderCreateObject.orderNumberAppln.getText().indexOf("#")+1).trim();
			String ordertypeAppln = objOrderCreateObject.orderNumberAppln.getText().substring(0,objOrderCreateObject.orderNumberAppln.getText().indexOf(" ")).toUpperCase();
			String oStatus = objOrderCreateObject.statusAppln.getText().toUpperCase();
			String totalArtAppln = objOrderCreateObject.totalArticleAppln.getText();
			String totalCartonOrderedAppln = objOrderCreateObject.totalCartonOrderedAppln.getText();
			
			String[] detailsOrder = objOrderCreateObject.orderDateSupplierDetails.getText().split("\\|");
			String supplierAppln = detailsOrder[0].substring(detailsOrder[0].indexOf(":")+1).trim();
			String deliveryDateAppln = detailsOrder[1].substring(detailsOrder[1].indexOf(":")+1).trim(); 
			String cutOffAppln = detailsOrder[2].replace("Cut-off Date before Authorisation", "").trim();
			String sourceAppln = detailsOrder[3].substring(detailsOrder[3].indexOf(":")+1).trim();
			
			orderEnqDetailsAppln.clear();
			String temp1 = ""+orderNumberAppln+":"+totalArtAppln+":"+oStatus+":"+supplierAppln+":"+ordertypeAppln+":"+sourceAppln+":"+totalCartonOrderedAppln+":"+"0"+":"+deliveryDateAppln+":"+cutOffAppln.toString().replaceAll("\\:", ".");
			orderEnqDetailsAppln.addAll(StringToListCreation(temp1));
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			orderArticleTable = getValuesFromTables(objOrderCreateObject.orderTable);
			removeIndex(orderArticleTable, Integer.toString(0));
			int k=1;
			for(int j=0;j<orderArticleTable.size();j++){
				String[] tempOM = orderArticleTable.get(j).get(5).toString().split("\\s");
				String om = String.format("%.03f", Float.parseFloat(tempOM[0].trim()))+" "+tempOM[1].trim();
				String[] tempTU = orderArticleTable.get(j).get(6).toString().split("\\s");;
				String tu = String.format("%.03f", Float.parseFloat(tempTU[0].trim()))+" "+tempTU[1].trim();
				String[] sitsoo = objOrderCreatePage.gettingSITSOOvalues(objOrderCreateObject, j,k, driver).split("\\&");
				//if(sitsoo[0]==null){sitsoo[0]="0.000";}else if(sitsoo[1]==null){sitsoo[1]="0.000";}
				String tempAppln = orderArticleTable.get(j).get(0)+":"+orderArticleTable.get(j).get(1)+":"+orderArticleTable.get(j).get(2)+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(3).toString()))+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(4).toString()))+":"+om+":"+tu+":"+sitsoo[0]+":"+sitsoo[1];
				resultAppln.addAll(StringToListCreation(tempAppln));
				System.out.println(resultAppln);
				k=k+2;
			}
			
			String articledetails = data.getText("articledetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articledetails);
			removeMoreThanSingleSpace(result,1);
			for(int i=0;i<result.size();i++){
				String desc = result.get(i).get(1).toString().replace("*TEST(UEC)*","").trim();
				String tempDB1 = ""+result.get(i).get(0)+":"+desc+":"+result.get(i).get(2)+":"+result.get(i).get(3)+":"+result.get(i).get(4)+":"+result.get(i).get(5)+" EA"+":"+String.format("%.03f",(Float.parseFloat(result.get(i).get(4).toString())*Float.parseFloat(result.get(i).get(5).toString())))+" EA"+":"+result.get(i).get(6)+":"+result.get(i).get(7);
				resultDB.addAll(StringToListCreation(tempDB1));
				System.out.println(resultDB);
				
			}
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Article Details (Number,Description,UOM,SOH,OM,Ordered Qty,Total Units,SOO,SIT) between Order Page and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,resultDB,resultAppln);
		
			List<List<Object>> articleList1 = articleFromDB();
			
			List<List<Object>>block = checkBlockText(orderNo, driver);
			objOrderCreatePage.blockingArticle(objOrderCreateObject, block,articleList1,"MANUAL", driver);
			k=1;
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Checking Order Status after updating and saving the changes****;;;Info");
			objOrderCreatePage.checkingOrderAfterUpdate(objOrderCreateObject,orderDetailsAppln1, orderNo,driver);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		    
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Order Updation of Manual PREQ of vendor supplied articles having order type ZMW")
	public void OrderUpdationOfManualPREQ_ZMW()
	{

		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderDetailsAppln1 = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsDB = new ArrayList<List<Object>>();
		List<List<Object>> orderArticleTable = new ArrayList<List<Object>>();
		List<List<Object>> resultDB = new ArrayList<List<Object>>();
		List<List<Object>> resultAppln = new ArrayList<List<Object>>();

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+10;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String orderNo = data.getText("orderNumber_7051");
			objOrderCreateObject.orderNoSend.sendKeys(orderNo);
			objOrderCreateObject.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objOrderCreateObject.filteredOrder.isDisplayed()){
					orderDetailsAppln = getValuesFromTable(objOrderCreateObject.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"*****ORDER DETAILS*****;;;Info");
					htmlToExtent(cName,mName,extLogger,driver,""+orderDetailsAppln+";;;Pass");
					objOrderCreateObject.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objOrderCreateObject.clearGroup.click();
				}
			}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+objOrderCreateObject.errorMessage.getText()+";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
				
			
			if(orderDetailsAppln.get(0).get(2).equals("OPEN") && orderDetailsAppln.get(0).get(4).equals("VENDOR") && orderDetailsAppln.get(0).get(5).equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver,"For Order #"+orderNo+" status is Open,type is VENDOR and Source is STORE;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+",Type : "+orderDetailsAppln.get(0).get(3)+" and Source "+orderDetailsAppln.get(0).get(4)+";;;Fail");
			}

			String articlecount = data.getText("articlecount").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articlecount);
			String artCount = result.get(0).get(0).toString();
			
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			
			//result.clear();
			String orderdetails = data.getText("orderdetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), orderdetails);
						
			String temp=""+orderNo+":"+artCount+":"+orderDetailsAppln.get(0).get(2)+":"+orderDetailsAppln.get(0).get(3)+":"+orderDetailsAppln.get(0).get(4)+":"+orderDetailsAppln.get(0).get(5)+":"+orderDetailsAppln.get(0).get(6)+":"+"0"+":"+orderDetailsAppln.get(0).get(1)+":"+orderDetailsAppln.get(0).get(8).toString().replaceAll("\\:", "."); //Add Cutofftime
			orderEnqDetailsAppln.addAll(StringToListCreation(temp));
			String statusDB;
			String supplierDB =  result.get(0).get(6).toString()+" ("+result.get(0).get(5).toString()+")";
			String totCartons = result.get(0).get(4).toString().substring(0,result.get(0).get(4).toString().indexOf("."));
			String dDateDB = dateFormat(result.get(0).get(2).toString().replaceAll("\\-","/"), "yyyy/MM/dd","date");
			
			String cutOffDB;
			String cutOffDateDB = result.get(0).get(9).toString();
			cutOffDateDB = dateFormat(cutOffDateDB.replaceAll("\\-","/"), "yyyy/MM/dd","date");
			String cutOffTimeDB = result.get(0).get(10).toString();
			String[] cutOffTime = cutOffTimeDB.split("(?<=\\G.{2})");
			cutOffTimeDB = cutOffTime[0]+":"+cutOffTime[1]+":"+cutOffTime[2];
			if(cutOffTimeDB.equals("00:00:00")){cutOffTimeDB = "12.00.00 AM";}else{cutOffTimeDB = dateFormat(cutOffTimeDB, "hh:mm:ss","time");}
			if(Integer.parseInt(cutOffTime[0]) > 12){
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" PM";
			}else{
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" AM";
			}
			if(result.get(0).get(8).toString().equals("O")){statusDB = "OPEN";}else{statusDB="NOT OPEN";}
			String tempDB = ""+result.get(0).get(0)+":"+result.get(0).get(3)+":"+statusDB+":"+supplierDB+":"+"VENDOR"+":"+result.get(0).get(7)+":"+totCartons+":"+"0"+":"+dDateDB+":"+cutOffDB; //Add Cutofftime
			orderEnqDetailsDB.addAll(StringToListCreation(tempDB));
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Enquiry Page and DB *****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Page(After Opening Order) and DB*****;;;Info");
			String orderNumberAppln = objOrderCreateObject.orderNumberAppln.getText().substring(objOrderCreateObject.orderNumberAppln.getText().indexOf("#")+1).trim();
			String ordertypeAppln = objOrderCreateObject.orderNumberAppln.getText().substring(0,objOrderCreateObject.orderNumberAppln.getText().indexOf(" ")).toUpperCase();
			String oStatus = objOrderCreateObject.statusAppln.getText().toUpperCase();
			String totalArtAppln = objOrderCreateObject.totalArticleAppln.getText();
			String totalCartonOrderedAppln = objOrderCreateObject.totalCartonOrderedAppln.getText();
			
			String[] detailsOrder = objOrderCreateObject.orderDateSupplierDetails.getText().split("\\|");
			String supplierAppln = detailsOrder[0].substring(detailsOrder[0].indexOf(":")+1).trim();
			String deliveryDateAppln = detailsOrder[1].substring(detailsOrder[1].indexOf(":")+1).trim(); 
			String cutOffAppln = detailsOrder[2].replace("Cut-off Date before Authorisation", "").trim();
			String sourceAppln = detailsOrder[3].substring(detailsOrder[3].indexOf(":")+1).trim();
			
			orderEnqDetailsAppln.clear();
			String temp1 = ""+orderNumberAppln+":"+totalArtAppln+":"+oStatus+":"+supplierAppln+":"+ordertypeAppln+":"+sourceAppln+":"+totalCartonOrderedAppln+":"+"0"+":"+deliveryDateAppln+":"+cutOffAppln.toString().replaceAll("\\:", ".");
			orderEnqDetailsAppln.addAll(StringToListCreation(temp1));
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			orderArticleTable = getValuesFromTables(objOrderCreateObject.orderTable);
			removeIndex(orderArticleTable, Integer.toString(0));
			int k=1;
			for(int j=0;j<orderArticleTable.size();j++){
				String[] tempOM = orderArticleTable.get(j).get(5).toString().split("\\s");
				String om = String.format("%.03f", Float.parseFloat(tempOM[0].trim()))+" "+tempOM[1].trim();
				String[] tempTU = orderArticleTable.get(j).get(6).toString().split("\\s");;
				String tu = String.format("%.03f", Float.parseFloat(tempTU[0].trim()))+" "+tempTU[1].trim();
				String[] sitsoo = objOrderCreatePage.gettingSITSOOvalues(objOrderCreateObject, j,k, driver).split("\\&");
				//if(sitsoo[0]==null){sitsoo[0]="0.000";}else if(sitsoo[1]==null){sitsoo[1]="0.000";}
				String tempAppln = orderArticleTable.get(j).get(0)+":"+orderArticleTable.get(j).get(1)+":"+orderArticleTable.get(j).get(2)+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(3).toString()))+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(4).toString()))+":"+om+":"+tu+":"+sitsoo[0]+":"+sitsoo[1];
				resultAppln.addAll(StringToListCreation(tempAppln));
				System.out.println(resultAppln);
				k=k+2;
			}
			
			String articledetails = data.getText("articledetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articledetails);
			removeMoreThanSingleSpace(result,1);
			for(int i=0;i<result.size();i++){
				String desc = result.get(i).get(1).toString().replace("*TEST(UEC)*","").trim();
				String tempDB1 = ""+result.get(i).get(0)+":"+desc+":"+result.get(i).get(2)+":"+result.get(i).get(3)+":"+result.get(i).get(4)+":"+result.get(i).get(5)+" EA"+":"+String.format("%.03f",(Float.parseFloat(result.get(i).get(4).toString())*Float.parseFloat(result.get(i).get(5).toString())))+" EA"+":"+result.get(i).get(6)+":"+result.get(i).get(7);
				resultDB.addAll(StringToListCreation(tempDB1));
				System.out.println(resultDB);
				
			}
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Article Details (Number,Description,UOM,SOH,OM,Ordered Qty,Total Units,SOO,SIT) between Order Page and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,resultDB,resultAppln);
		
			List<List<Object>> articleList1 = articleFromDB();
			
			List<List<Object>>block = checkBlockText(orderNo, driver);
			objOrderCreatePage.blockingArticle(objOrderCreateObject, block,articleList1,"MANUAL", driver);
			k=1;
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Checking Order Status after updating and saving the changes****;;;Info");
			objOrderCreatePage.checkingOrderAfterUpdate(objOrderCreateObject,orderDetailsAppln1, orderNo,driver);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		    
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify whether user is able to add article by entering article EAN during order Updation of PREQ")
	public void OrderUpdationByAddingArticleByEAN()
	{

		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderDetailsAppln1 = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> orderEnqDetailsDB = new ArrayList<List<Object>>();
		List<List<Object>> orderArticleTable = new ArrayList<List<Object>>();
		List<List<Object>> resultDB = new ArrayList<List<Object>>();
		List<List<Object>> resultAppln = new ArrayList<List<Object>>();

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+8;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String orderNo = data.getText("orderNumber_7051");
			objOrderCreateObject.orderNoSend.sendKeys(orderNo);
			objOrderCreateObject.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objOrderCreateObject.filteredOrder.isDisplayed()){
					orderDetailsAppln = getValuesFromTable(objOrderCreateObject.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"*****ORDER DETAILS*****;;;Info");
					htmlToExtent(cName,mName,extLogger,driver,""+orderDetailsAppln+";;;Pass");
					objOrderCreateObject.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objOrderCreateObject.clearGroup.click();
				}
			}catch(Exception e){
				htmlToExtent(cName,mName,extLogger,driver,""+objOrderCreateObject.errorMessage.getText()+";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
				
			
			if(orderDetailsAppln.get(0).get(2).equals("OPEN") && orderDetailsAppln.get(0).get(4).equals("VENDOR") && orderDetailsAppln.get(0).get(5).equals("STORE")){
				htmlToExtent(cName,mName,extLogger,driver,"For Order #"+orderNo+" status is Open,type is VENDOR and Source is STORE;;;Pass");
			}
			else{
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+",Type : "+orderDetailsAppln.get(0).get(3)+" and Source "+orderDetailsAppln.get(0).get(4)+";;;Fail");
			}

			String articlecount = data.getText("articlecount").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articlecount);
			String artCount = result.get(0).get(0).toString();
			
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			
			//result.clear();
			String orderdetails = data.getText("orderdetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), orderdetails);
						
			String temp=""+orderNo+":"+artCount+":"+orderDetailsAppln.get(0).get(2)+":"+orderDetailsAppln.get(0).get(3)+":"+orderDetailsAppln.get(0).get(4)+":"+orderDetailsAppln.get(0).get(5)+":"+orderDetailsAppln.get(0).get(6)+":"+"0"+":"+orderDetailsAppln.get(0).get(1)+":"+orderDetailsAppln.get(0).get(8).toString().replaceAll("\\:", "."); //Add Cutofftime
			orderEnqDetailsAppln.addAll(StringToListCreation(temp));
			String statusDB;
			String supplierDB =  result.get(0).get(6).toString()+" ("+result.get(0).get(5).toString()+")";
			String totCartons = result.get(0).get(4).toString().substring(0,result.get(0).get(4).toString().indexOf("."));
			String dDateDB = dateFormat(result.get(0).get(2).toString().replaceAll("\\-","/"), "yyyy/MM/dd","date");
			
			String cutOffDB;
			String cutOffDateDB = result.get(0).get(9).toString();
			cutOffDateDB = dateFormat(cutOffDateDB.replaceAll("\\-","/"), "yyyy/MM/dd","date");
			String cutOffTimeDB = result.get(0).get(10).toString();
			String[] cutOffTime = cutOffTimeDB.split("(?<=\\G.{2})");
			cutOffTimeDB = cutOffTime[0]+":"+cutOffTime[1]+":"+cutOffTime[2];
			if(cutOffTimeDB.equals("00:00:00")){cutOffTimeDB = "12.00.00 AM";}else{cutOffTimeDB = dateFormat(cutOffTimeDB, "hh:mm:ss","time");}
			if(Integer.parseInt(cutOffTime[0]) > 12){
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" PM";
			}else{
				cutOffDB = cutOffDateDB+" "+cutOffTimeDB.replaceAll("\\:", ".")+" AM";
			}
			if(result.get(0).get(8).toString().equals("O")){statusDB = "OPEN";}else{statusDB="NOT OPEN";}
			String tempDB = ""+result.get(0).get(0)+":"+artCount+":"+statusDB+":"+supplierDB+":"+"VENDOR"+":"+result.get(0).get(7)+":"+totCartons+":"+"0"+":"+dDateDB+":"+cutOffDB; //Add Cutofftime
			orderEnqDetailsDB.addAll(StringToListCreation(tempDB));
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Enquiry Page and DB *****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Order Details (Total Article,Status,Supplier,Type,Source,Total Cartons,Total Pallets,Delivery Date,Cutoff Date Time) between Order Page(After Opening Order) and DB*****;;;Info");
			String orderNumberAppln = objOrderCreateObject.orderNumberAppln.getText().substring(objOrderCreateObject.orderNumberAppln.getText().indexOf("#")+1).trim();
			String ordertypeAppln = objOrderCreateObject.orderNumberAppln.getText().substring(0,objOrderCreateObject.orderNumberAppln.getText().indexOf(" ")).toUpperCase();
			String oStatus = objOrderCreateObject.statusAppln.getText().toUpperCase();
			String totalArtAppln = objOrderCreateObject.totalArticleAppln.getText();
			String totalCartonOrderedAppln = objOrderCreateObject.totalCartonOrderedAppln.getText();
			
			String[] detailsOrder = objOrderCreateObject.orderDateSupplierDetails.getText().split("\\|");
			String supplierAppln = detailsOrder[0].substring(detailsOrder[0].indexOf(":")+1).trim();
			String deliveryDateAppln = detailsOrder[1].substring(detailsOrder[1].indexOf(":")+1).trim(); 
			String cutOffAppln = detailsOrder[2].replace("Cut-off Date before Authorisation", "").trim();
			String sourceAppln = detailsOrder[3].substring(detailsOrder[3].indexOf(":")+1).trim();
			
			orderEnqDetailsAppln.clear();
			String temp1 = ""+orderNumberAppln+":"+totalArtAppln+":"+oStatus+":"+supplierAppln+":"+ordertypeAppln+":"+sourceAppln+":"+totalCartonOrderedAppln+":"+"0"+":"+deliveryDateAppln+":"+cutOffAppln.toString().replaceAll("\\:", ".");
			orderEnqDetailsAppln.addAll(StringToListCreation(temp1));
			ElementContains1(cName,mName,extLogger,driver,orderEnqDetailsAppln,orderEnqDetailsDB);
			
			orderArticleTable = getValuesFromTables(objOrderCreateObject.orderTable);
			removeIndex(orderArticleTable, Integer.toString(0));
			int k=1;
			for(int j=0;j<orderArticleTable.size();j++){
				String[] tempOM = orderArticleTable.get(j).get(5).toString().split("\\s");
				String om = String.format("%.03f", Float.parseFloat(tempOM[0].trim()))+" "+tempOM[1].trim();
				String[] tempTU = orderArticleTable.get(j).get(6).toString().split("\\s");;
				String tu = String.format("%.03f", Float.parseFloat(tempTU[0].trim()))+" "+tempTU[1].trim();
				String[] sitsoo = objOrderCreatePage.gettingSITSOOvalues(objOrderCreateObject, j,k, driver).split("\\&");
				//if(sitsoo[0]==null){sitsoo[0]="0.000";}else if(sitsoo[1]==null){sitsoo[1]="0.000";}
				String tempAppln = orderArticleTable.get(j).get(0)+":"+orderArticleTable.get(j).get(1)+":"+orderArticleTable.get(j).get(2)+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(3).toString()))+":"+String.format("%.03f", Float.parseFloat(orderArticleTable.get(j).get(4).toString()))+":"+om+":"+tu+":"+sitsoo[0]+":"+sitsoo[1];
				resultAppln.addAll(StringToListCreation(tempAppln));
				System.out.println(resultAppln);
				k=k+2;
			}
			
			String articledetails = data.getText("articledetails").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), articledetails);
			removeMoreThanSingleSpace(result,1);
			for(int i=0;i<result.size();i++){
				String desc = result.get(i).get(1).toString().replace("*TEST(UEC)*","").trim();
				String tempDB1 = ""+result.get(i).get(0)+":"+desc+":"+result.get(i).get(2)+":"+result.get(i).get(3)+":"+result.get(i).get(4)+":"+result.get(i).get(5)+" EA"+":"+String.format("%.03f",(Float.parseFloat(result.get(i).get(4).toString())*Float.parseFloat(result.get(i).get(5).toString())))+" EA"+":"+result.get(i).get(6)+":"+result.get(i).get(7);
				resultDB.addAll(StringToListCreation(tempDB1));
				System.out.println(resultDB);
				
			}
			htmlToExtent(cName,mName,extLogger,driver,"*****Comparing the Article Details (Number,Description,UOM,SOH,OM,Ordered Qty,Total Units,SOO,SIT) between Order Page and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,resultDB,resultAppln);
		
			List<List<Object>> articleList1 = articleFromDB();
			
			List<List<Object>>block = checkBlockText(orderNo, driver);
			objOrderCreatePage.blockingArticle(objOrderCreateObject, block,articleList1,"MANUAL", driver);
			k=1;
			
			htmlToExtent(cName,mName,extLogger,driver,"*****Checking Order Status after updating and saving the changes****;;;Info");
			objOrderCreatePage.checkingOrderAfterUpdate(objOrderCreateObject,orderDetailsAppln1, orderNo,driver);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		    
		}catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify whether user is able to add article by entering article EAN during order Updation of PREQ")
	public void AdvanceSearchByArticleByEAN()
	{

		if(orderCreateArtpreCount2==-1)
		{
			MCcount =MCcount+2;
		}
		TestStatus status = getTestStatus();

		try{
			navToOrders(status);
			String currentDate = formatDate1(new Date());
			objOrderCreateObject.articleDetailsRadio.click();
			String ean = data.getText("EAN");
			objOrderCreateObject.orderNoSend.sendKeys(ean);
			
			try{
				objOrderCreateObject.errorMessage.click();
			}catch(Exception e){}
			
			objOrderCreateObject.advanceSearchButton.click();
			htmlToExtent(cName,mName,extLogger,driver,"Article #110102 with EAN #"+ean+" is searched via advance search;;;Pass");
			String fromDate = common.AddDate(common.ConvertdateFormatddmmyy(currentDate), 0);
			String toDate = common.AddDate(common.ConvertdateFormatddmmyy(currentDate), 5);
			Date fDate = parseDate(fromDate, "dd/MM/yyyy");
			Date tDate = parseDate(toDate, "dd/MM/yyyy");
			htmlToExtent(cName,mName,extLogger,driver,"Search filter between from date "+fromDate+" and to date "+toDate+" ;;;Pass");
			objOrderCreateObject.toDate.sendKeys(toDate);
			objOrderCreateObject.fromDate.sendKeys(fromDate);
			waitForJSandJQueryToLoad(driver);
			objOrderCreateObject.advanceSearchGoBtn.click();
			try{
				if(objOrderCreateObject.searchResult.isDisplayed()){
					htmlToExtent(cName,mName,extLogger,driver,"Order has been loaded for the requested search criteria;;;Pass");
					String deliveryDateFromUI = objOrderCreateObject.deliveryDateUI.getText();
					Date UIDate = parseDate(deliveryDateFromUI,"dd/MM/yyyy");
					if(UIDate.equals(tDate) || UIDate.equals(fDate)){//if(deliveryDateFromUI.compareTo(toDate) <=0 && deliveryDateFromUI.compareTo(fromDate) >= 0){
						htmlToExtent(cName,mName,extLogger,driver,"Delivery date for the order filtered is same as given date;;;Pass");
					}
					else if(UIDate.after(tDate) && UIDate.before(fDate)){
						htmlToExtent(cName,mName,extLogger,driver,"Delivery date for the order filtered is in the date range provided;;;Pass");
					}
					else{
						htmlToExtent(cName,mName,extLogger,driver,"Delivery date for the order filtered is  doesnot fall under the range;;;Fail");
					}
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver,"No Order available for search criteria;;;Fail");
				}
			}
			catch(Exception e){
				
				
			}
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderCreateArtScenarios,orderCreateArttestname,driver));
			status.assertAll();
		}
		catch(Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	
		public List<List<Object>> checkBlockText(String orderNo,WebDriver driver) throws SQLException{
		
		   List<List<Object>> blockResult = new ArrayList<List<Object>>();
		   String blockText = data.getText("blockText").replace("order_no", orderNo);
		   blockResult = sql.executeQuery(getContext(), blockText);
		   System.out.println(blockResult);
		   htmlToExtent(cName,mName,extLogger,driver,"*****Available Block Reason and corresponding articles****;;;Info");
		   htmlToExtent(cName,mName,extLogger,driver,""+blockResult+";;;Pass");
		   return blockResult;
		
	   }
	
	
		
		public String dateFormat(String dateToConvert,String dateFormat,String isDate){
			
			String dDate;
			Date d1 = new Date();
			d1 = parseDate(dateToConvert,dateFormat);
			if(isDate.equals("date")){
				dDate = formatDate1(d1);
			}else{
				dDate = formatDate(d1,dateFormat);
			}
			return dDate;
		}
		
		public List<List<Object>> articleFromDB () throws SQLException{
			
			List<List<Object>> result12 = new ArrayList<List<Object>>();
			
			String supplier = objOrderCreateObject.suppliernameandnumber.getText().substring(objOrderCreateObject.suppliernameandnumber.getText().indexOf("(")+1).replace(")", "");
			String artnumber = data.getText("article").replace("suppliername", supplier);
			result12 = sql.executeQuery(getContext(), artnumber);
			
			List<List<Object>>articleList= new ArrayList<List<Object>>();
			
			if(result12.size()!=0){
				int rand = ThreadLocalRandom.current().nextInt(1, result12.size());
				String hawaArticle = result12.get(rand).get(0).toString();
				articleList.addAll(StringToListCreation(hawaArticle));
			}
			
			result12.clear();
			String kgartnumber = data.getText("randKGarticle").replace("suppliername", supplier).replace("randFlag", "N");
			result12 = sql.executeQuery(getContext(), kgartnumber);
			
			if(result12.size()!=0){
				int rand1 = ThreadLocalRandom.current().nextInt(1, result12.size());
				String kgArticle = result12.get(rand1).get(0).toString();
				articleList.addAll(StringToListCreation(kgArticle));
			}
			

			result12.clear();
			String randartnumber = data.getText("randKGarticle").replace("suppliername", supplier).replace("randFlag", "Y");
			result12 = sql.executeQuery(getContext(), randartnumber);
			
			if(result12.size()!=0){
				int rand2 = ThreadLocalRandom.current().nextInt(1, result12.size());
				String randArticle = result12.get(rand2).get(0).toString();
				articleList.addAll(StringToListCreation(randArticle));
			}
			

			//String tempArticle = hawaArticle+":"+kgArticle+":"+randArticle;
			//articleList.addAll(StringToListCreation(tempArticle));
			
			return articleList;
		}
	
		
		//Sibi - Order Updation
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Update received order from Browser") 
		public void UpdatingReceivedVendorOrder()
		

		{
		
			if(orderCreateArtpreCount2==-1){
				MCcount =MCcount+8;}

			String username = getContext().getStringProperty("username");
			TestStatus status = getTestStatus();
	 try{
			List<List<Object>> orderEnqiryList = new ArrayList<List<Object>>();
			navToOrders(status);
			waitForJSandJQueryToLoad(driver);
			String Ordnumber = data.getText("Vendororder2");
			List OrdL = new ArrayList();
			String revert=data.getText("revertOrder").replace("ordno",Ordnumber);
			results2=sql.executeQuery(getContext(), revert);
			String Orderlist = data.getText("OrderDetails").replace("ord_no",Ordnumber);
			results = sql.executeQuery(getContext(),Orderlist);
			OrdL.add(results.get(0).get(0).toString());
			OrdL.add(results.get(0).get(1).toString());
			String vendorDetail=data.getText("vendorname").replace("ord_no",Ordnumber);
			results1=sql.executeQuery(getContext(), vendorDetail);
			OrdL.add("AUTHORISED");
		    OrdL.add(results1.get(0).get(0).toString());
		    OrdL.add("VENDOR");
		    OrdL.add(results1.get(0).get(1).toString());
		    results2.clear();
		    String TotalCartonQty=data.getText("TotCart").replace("ord_no",Ordnumber);
			results2=sql.executeQuery(getContext(), TotalCartonQty);
			OrdL.add(decimalFormat1(results2.get(0).get(0).toString()));
			OrdL.add("0");
			orderEnqiryList.add(OrdL);
			System.out.println(OrdL);
			List OrdHeaderL = new ArrayList();
			List<List<Object>> OrdHeaderList = new ArrayList<List<Object>>();
			OrdHeaderL.add(results1.get(0).get(0).toString());
			OrdHeaderL.add(results.get(0).get(1).toString());
			OrdHeaderL.add(results1.get(0).get(1).toString());
			OrdHeaderL.add(results.get(0).get(2).toString());
			OrdHeaderList.add(OrdHeaderL);
			System.out.println(OrdHeaderList);
			 		

			System.out.println(OrdHeaderL);
			List OrdHeaderL1 = new ArrayList();
			List<List<Object>> OrdHeaderList1DB = new ArrayList<List<Object>>();
			String NumberOfArticle=data.getText("TotArt").replace("ord_no",Ordnumber);
			results3=sql.executeQuery(getContext(), NumberOfArticle);
			OrdHeaderL1.add(results3.get(0).get(0).toString());
			String CartonOrdered=data.getText("TotCart").replace("ord_no",Ordnumber);
			results3.clear();
			results3=sql.executeQuery(getContext(), CartonOrdered);
			OrdHeaderL1.add(decimalFormat1(results3.get(0).get(0).toString()));
			OrdHeaderList1DB.add(OrdHeaderL1);
			
			List<List<Object>> ItemResults = new ArrayList<List<Object>>();
			String ItemDetails=data.getText("OrdDet").replace("ord_no",Ordnumber);
			ItemResults=sql.executeQuery(getContext(), ItemDetails);
			
			int articleCount=ItemResults.size();
			System.out.println(articleCount);
			List<List<Object>> OrderItemDetailsDBList = new ArrayList<List<Object>>();
			List AticleDetails = new ArrayList();
			System.out.println(ItemResults);
			List RWArticleList = new ArrayList();
			for(int i=0;articleCount>i;i++)
			{
				if(ItemResults.get(i).get(4).toString().equals("Y"))
				{
					System.out.println(i);
					
					RWArticleList.add(ItemResults.get(i).get(1).toString());
					String BaseUOM=data.getText("Base_UOM").replace("art_no",ItemResults.get(i).get(1).toString());
					BaseUOMList=sql.executeQuery(getContext(), BaseUOM);
						String temp = ItemResults.get(i).get(1).toString()
								+ ":"
								+ decimalFormat1(ItemResults.get(i).get(6).toString())
								+ " "
								+ BaseUOMList.get(0).get(0).toString()
								+ ":"
								+ decimalFormat1(ItemResults.get(i).get(5).toString())
								+ "("
								+ "EA"
								+ ")"
								+ ":"
								+ decimalFormat1(ItemResults.get(i).get(2).toString())
								+ " "
								+ ItemResults.get(i).get(3).toString()
								+ ":"
								
								+decimalFormat1(Float.toString( (Float.parseFloat(ItemResults.get(i).get(2)
										.toString())
										* Float.parseFloat(ItemResults.get(i)
												.get(6).toString()))))
								+ " "
								+ BaseUOMList.get(0).get(0).toString()
								+ " "
								+ "("
								+ decimalFormat1(Float.toString(Float.parseFloat(ItemResults.get(i).get(2).toString()) * Float.parseFloat(ItemResults.get(i).get(5).toString()))) 
								+ " " 
								+"EA"
								+ ")";
						//AticleDetails.add(
					OrderItemDetailsDBList.addAll(StringToListCreation(temp));
					System.out.println(OrderItemDetailsDBList);
				}
				else {
					
					String BaseUOM=data.getText("Base_UOM").replace("art_no",ItemResults.get(i).get(1).toString());
					BaseUOMList=sql.executeQuery(getContext(), BaseUOM);
					System.out.println(BaseUOMList);
						String temp=ItemResults.get(i).get(1).toString()
								+ ":"
								+ decimalFormat1(ItemResults.get(i).get(6).toString())
								+ " "
								+ BaseUOMList.get(0).get(0).toString()
								+":"
								+ decimalFormat1(ItemResults.get(i).get(2).toString())
								+ " "
								+ ItemResults.get(i).get(3).toString()
								+ ":"
								+ decimalFormat1(Float.toString((Float.parseFloat(ItemResults.get(i).get(2)
										.toString())
								* Float.parseFloat(ItemResults.get(i).get(6)
										.toString()) )))+ " "
								+ BaseUOMList.get(0).get(0).toString();  
						
						OrderItemDetailsDBList.addAll(StringToListCreation(temp));
					
				}
				
			}
			System.out.println(OrderItemDetailsDBList);
			
			List<List<Object>> ArticleTypeList = new ArrayList<List<Object>>();
			List<List<Object>> ArticleTypeList1 = new ArrayList<List<Object>>();
			String ArticleType=data.getText("Artilcetypes").replace("ord_no",Ordnumber);
			ArticleTypeList=sql.executeQuery(getContext(), ArticleType);
			ArticleTypeList1.addAll(ArticleTypeList);
			System.out.println(ArticleTypeList1);
			List<List<Object>> ArticleSOHList = new ArrayList<List<Object>>();
			List<List<Object>> ArticleSOHList1 = new ArrayList<List<Object>>();
			List<List<Object>> ArticleSOH = new ArrayList<List<Object>>();
			
			for(int i=0;ArticleTypeList1.size()>i;i++){
			String SOH=data.getText("SOH").replace("art_no",ArticleTypeList1.get(i).get(0).toString());
			ArticleSOH= sql.executeQuery(getContext(), SOH);
			ArticleSOHList.addAll(ArticleSOH);
			}
			System.out.println(ArticleSOHList);
			for(int i=0;ArticleTypeList.size()>i;i++)
			{
			if(ArticleTypeList.get(i).get(1)!="Y" && ArticleTypeList.get(i).get(2)!="1" && ArticleTypeList.get(i).get(3)!="Y" && ArticleTypeList.get(i).get(4)!="Y")
			{
				
				String list=ArticleTypeList.get(i).get(0).toString()+":"+ArticleSOHList.get(i).get(0).toString()+":"+"0";
				ArticleSOHList1.addAll(StringToListCreation(list));
			}
			else
			{
				if(ArticleTypeList.get(i).get(1)=="Y")
				{
					String list=ArticleTypeList.get(i).get(0).toString()+":"+ArticleSOHList.get(i).get(0).toString()+":"+ArticleSOHList.get(i).get(1).toString();
					ArticleSOHList1.addAll(StringToListCreation(list));
					
				}
				else
				{
					if(ArticleTypeList.get(i).get(2)!="1")
					{
						//ArticleSOHList1.addAll(StringToListCreation(list));
					}
					else
						if(ArticleTypeList.get(i).get(3)!="Y")
						{
							//ArticleSOHList1.addAll(StringToListCreation(list));
						}
						else
							
							if( ArticleTypeList.get(i).get(4)!="Y")
							{
								//ArticleSOHList1.addAll(StringToListCreation(list));
							}
						
				}
			}
			
			}//for end
			System.out.println(ArticleSOHList1);
			
			
			objOrderCreatePage.updatePoOrderFromBrowser(objOrderCreateObject,Ordnumber,orderEnqiryList,OrdHeaderList,OrdHeaderList1DB,OrderItemDetailsDBList,RWArticleList,ArticleSOHList1,ArticleTypeList);
			status.assertAll();
		}catch (Exception e) {
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);}
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");

		
			
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Open order and PO cancellation from Browser") 
		public void OrdersCancellationFromBrowser()
		{
			if(orderCreateArtpreCount2==-1){
				MCcount =MCcount+7;}

			String username = getContext().getStringProperty("username");
			TestStatus status = getTestStatus();
	 try{
			List<List<Object>> OpenOrderList = new ArrayList<List<Object>>();
			List<List<Object>> SourceList = new ArrayList<List<Object>>();
			navToOrders(status);
			waitForJSandJQueryToLoad(driver);
			List SourceOfSupply=new ArrayList(); 
			SourceOfSupply.add("PONO");
			SourceOfSupply.add("SOPO");
			SourceList.addAll(SourceOfSupply);
			
		    for(int i=0;i<SourceList.size();i++)
		    {
		    	String as=SourceOfSupply.get(i).toString();
		    	String OrderNo=data.getText("OpenPreq").replace("source1",as) ;
		    	OpenOrderList=sql.executeQuery(getContext(), OrderNo);
			//ArticleNoList.addAll(ArticleNoList);
			
			if(SourceOfSupply.get(i).toString().equals("SOPO"))
			{
				objOrderCreateObject.OrderEnquiry1.click();	
				waitFor(2);
				objOrderCreateObject.OrderEnquiry2.click();	
				
			}
			if(OpenOrderList.size()!= 0)
			{
			
				objOrderCreateObject.Ordernoentry.sendKeys(OpenOrderList.get(0).get(0).toString());
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.GObutton.click();
				if(objOrderCreateObject.OrderStatus.getText().equals("OPEN"))
				{
					try{
						objOrderCreateObject.OrderStatus.click();
						objOrderCreateObject.OrderCancelOptn.isDisplayed();
						objOrderCreateObject.OrderCancelOptn.click();
						objOrderCreateObject.YESOption.click();
						waitFor(2);
						waitForJSandJQueryToLoad(driver);
						try {
							 if(objOrderCreateObject.SuccessMsgWarpper.isDisplayed())
							 {
								 if(objOrderCreateObject.SuccessMsg.getText().equals(objOrderCreateObject.SuccessMsg.getText()))
								 {
									 htmlToExtent(cName,mName,extLogger,driver,"Preq cancelled successfully in Browser"+OpenOrderList.get(0).get(0).toString()+" ;;;Pass");
									 htmlToExtent(cName,mName,extLogger,driver,"Message after cancel the PREQ" + objOrderCreateObject.SuccessMsg.getText()+";;;Pass");
									 objOrderCreateObject.Close.click();
								 }
								 else
								 {
									 htmlToExtent(cName,mName,extLogger,driver,"Message after cancel the PREQ" + objOrderCreateObject.SuccessMsg.getText()+";;;Pass");
									 htmlToExtent(cName,mName,extLogger,driver,"Issue in cancelling the open PREQ ,So unable to cancel the open PREQ in Browser;;;Pass");
									 objOrderCreateObject.Close.click(); 
								 }
								  
							 }
						 }
						 catch (Exception e)
						 {
							 
					
								 htmlToExtent(cName,mName,extLogger,driver,"Issue in cancelling the open PREQ ;;;Pass");
							 
						 }
						
					}
					catch (Exception e)
					{
						htmlToExtent(cName,mName,extLogger,driver,"Cancel option not avalable in PREQ,So unable to cancel the PREQ  ;;;Pass");	
					}
					
				 
			 
				 }
				
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Preq status is not a open status,So unable to cancel the order  ;;;Pass");
				}
				
				
			}
			else
			{
				if(SourceOfSupply.get(i).toString().equals("PONO"))
				{
				
				htmlToExtent(cName,mName,extLogger,driver,"Open vendor(PONO) Preq not avaliable in store ;;;Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Open Warehouse(SONO) Preq not avaliable in store ;;;Pass");
					
				}
				}
		    }
		    status.assertAll();
	 }
	 

	 catch (Exception e) {
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);}
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");

		
			
		}

		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "PO Order and IBT cancellation from Browser") 
		public void OrderCancellationFromBrowser()
		{
			if(orderCreateArtpreCount2==-1){
				MCcount =MCcount+7;}

			
	 try{
		 String username = getContext().getStringProperty("username");
			TestStatus status = getTestStatus();
			List<List<Object>> PoOrderList = new ArrayList<List<Object>>();
			List<List<Object>> SourceList = new ArrayList<List<Object>>();
			navToOrders(status);
			waitForJSandJQueryToLoad(driver);
			List SourceOfSupply=new ArrayList(); 
			SourceOfSupply.add("PONO");
			SourceOfSupply.add("OADV");
			for(int i=0;i<SourceOfSupply.size();i++)
		    {
		    	String as=SourceOfSupply.get(i).toString();
		    	String OrderNo=data.getText("PONo").replace("source1",as) ;
		    	PoOrderList=sql.executeQuery(getContext(), OrderNo);
		    	PoOrderList.addAll(PoOrderList);
			
			if(SourceOfSupply.get(i).toString().equals("OADV"))
			{
				objOrderCreateObject.ErrorMesg.click();
				objOrderCreateObject.Back.click();
				objOrderCreateObject.Ordernoentry.clear();	
				
				
			}
			if(PoOrderList.size()!= 0)
			{
			
				objOrderCreateObject.Ordernoentry.sendKeys(PoOrderList.get(0).get(0).toString());
				waitForJSandJQueryToLoad(driver);
				objOrderCreateObject.GObutton.click();
				if(objOrderCreateObject.OrderStatus.getText().equals("AUTHORISED"))
				{
					try{
						objOrderCreateObject.OrderStatus.click();
						
						if(SourceOfSupply.get(i).toString().equals("OADV"))
						{
							objOrderCreateObject.POOrderCancel.isDisplayed();
							objOrderCreateObject.POOrderCancel.click();
						}
						else
						{	
							objOrderCreateObject.OrderCancelOptn.isDisplayed();
						objOrderCreateObject.OrderCancelOptn.click();
						
					}
						objOrderCreateObject.YESOption.click();
						waitFor(2);
						waitForJSandJQueryToLoad(driver);
						try {
							 if(objOrderCreateObject.SuccessMsgWarpper.isDisplayed() ||objOrderCreateObject.ErrorMesg.isDisplayed() )
							 {
								 String meg="Order updated Successfully.";
								 if(objOrderCreateObject.SuccessMsg.getText()==meg)
								 {
									 htmlToExtent(cName,mName,extLogger,driver,"Order cancelled successfully in Browser"+PoOrderList.get(0).get(0).toString()+" ;;;Pass");
									 htmlToExtent(cName,mName,extLogger,driver,"Message after cancel the Order" + objOrderCreateObject.SuccessMsg.getText()+";;;Pass");
									 objOrderCreateObject.Close.click();
								 }
								 else
								 {
									 htmlToExtent(cName,mName,extLogger,driver,"Issue in cancelling the Order ,So unable to cancel the Order in Browser"+PoOrderList.get(0).get(0).toString()+" ;;;Pass");
									 //htmlToExtent(cName,mName,extLogger,driver,"Message after cancel the Order" + objOrderCreateObject.SuccessMsg.getText()+";;;Pass");
									// htmlToExtent(cName,mName,extLogger,driver,"Issue in cancelling the Order ,So unable to cancel the Order in Browser;;;Pass");
									 objOrderCreateObject.Close.click(); 
								 }
								  
							 }
						 }
						 catch (Exception e)
						 {
							 
					
								 htmlToExtent(cName,mName,extLogger,driver,"Issue in cancelling the order"+PoOrderList.get(0).get(0).toString()+" ;;;Pass");
							 
						 }
						
					}
					catch (Exception e)
					{
						htmlToExtent(cName,mName,extLogger,driver,"Cancel option not avalable in order,So unable to cancel the order  ;;;Pass");	
					}
					
				 
			 
				 }
				
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Preq status is not a open status,So unable to cancel the order  ;;;Pass");
				}
				
				
			}
			else
			{
				if(SourceOfSupply.get(i).toString().equals("PONO"))
				{
				
				htmlToExtent(cName,mName,extLogger,driver,"PO Order not avaliable in store ;;;Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"IBT order(OADV) Preq not avaliable in store ;;;Pass");
					
				}
				}
		    }
		    status.assertAll();
	 
			
			
	 }
	 catch (Exception e) {
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);}
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");

		
			
		}
		
		

	public int randGenerator(int maxLimit){
		
		int rand = ThreadLocalRandom.current().nextInt(1,maxLimit);
		return rand;
		
	}
	
	
	
	//Login Function
	public void navToOrders(TestStatus status) throws IOException, AWTException {
		log.info("*****Login into Application*****");
		htmlToExtent(cName,mName,extLogger,driver, "*****Login into Application*****;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objOrderCreatePage = loginPage.navToOrderEnqForCreation(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store,driver);
			objOrderCreatePage = loginPage.navToOrderEnqForCreation(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "*****Navigate To Order Enquiry Page*****;;;Pass");
			objOrderCreatePage.toOrderEnqPage(objOrderCreateObject,driver);
			
	}

	

	@BeforeMethod(alwaysRun=true)
	public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
		
		 mName=m9.getName().toString().trim();			
 			if(!methodList.contains(m9.getName().toString().trim())){
 			methodList.add(m9.getName().toString().trim());
 			extLogger = extReport.startTest(m9.getName().toString().trim());
 			}
		initializeTestcontext();
		System.out.println("test1 - beforemethod");
		log.info("Loading Testdata for the test case: " + m9.getName().toString());
		data.getTCNameFromChildren(m9.getName().toString().trim());
		if(isFirstTest){
			driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
		}else{
			String title = driver.getCurrentUrl();
			if(title.contains("logginOut"))
			{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
			}else{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
				if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
				{
					if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
						WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
						scrolltoElement(home,driver);
						home.click();
						TimeUnit.SECONDS.sleep(5);
						loginPage.Logout(orderCreateArtScenarios, orderCreateArttestname, driver);
						driver.navigate().refresh();
						TimeUnit.SECONDS.sleep(5);}
				}
			}
		}
			isFirstTest=false;
			//driver=createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser")); 
			setDriver(driver);
		testcontext.setAttribute("WebDriver", driver);
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m9.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		orderCreateArttestname = m9.getName().toString().trim();
		orderCreateArttestdesc = m9.getAnnotation(Test.class).description();
		htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Docker run - "+getContext().getStringProperty("isDocketRun")+"</h4></i></b>;;;Info");
		objOrderCreateObject = PageFactory.initElements(this.driver, OrderingObjects.class);
		objOrderCreatePage = PageFactory.initElements(this.driver, OrderingPage.class);
		BaseObj = PageFactory.initElements(this.driver, BasePage.class);
		common = PageFactory.initElements(this.driver, CommonFunctions.class);
		storeprop = PageFactory.initElements(this.driver, StoreProperties.class);
	}
	
	@BeforeClass
	public void loadXMLFile(){				
		System.out.println("test1 - Beforeclass");
		data = new XMLDataReader(log);
		customreport=new CustomExtentReports();
		log.info("Loading data for the class: " );
		data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\ordering.xml");
		customreport.createExtentReport();
		cName=this.getClass().getSimpleName();
		reportPath = new File(TestContext.getStringProperty("reportPath"));			
		extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
		classList.add(this.getClass().getSimpleName());				
	}
	
	@AfterClass(alwaysRun=true)
	public void tearDown() throws IOException, ParseException{
		waitForJSandJQueryToLoad(driver);
		System.out.println("afterclass");
		sceCtMap.put(cName+"_totalCt", methodList.size());
		sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
		sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
		tcCt.put(this.getClass().getSimpleName().toString(),MCcount);
        extReport.endTest(extLogger);
		extReport.flush();				
		removeDriver();
		closeDriver(driver);
		moduleName.put("Modules", orderCreateArtModules);
		waitFor(1);
		int ArtMC=MCcount;
		orderCreateArtMC=""+MCcount;
	}

	@AfterMethod(alwaysRun=true)
	protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {				
		System.out.println("AffterMethod");
		
		extReport.endTest(extLogger);
		extReport.flush();
		try{
			if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
				htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;INFO");	
				result9.removeAttribute("isFail");
			}}catch(Exception e ){
				//System.out.println();
			
			}
		waitFor(1);
		customreport.getExtentReport().endTest(customreport.getExtentTest());
		customreport.getExtentReport().flush();
		waitFor(1);
		if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info"))
		{
			int cnt = orderCreateArtpreCount2+1;
			htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
			orderCreateArtpreCount2++;
		}
		if(orderCreateArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass"))
		{
			orderCreateArtpreCount2=-1;
		}
		waitFor(1);
}

	
	
	
}
