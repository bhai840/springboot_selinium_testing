package au.wow.ngbomain.tests;

import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.ReceivingSegmentObjects;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.ReceivingSegmentPage;
import au.wow.ngbomain.pages.WoWLoginPage;

public class ReceivingSegmentsTest extends TestBase {
	
	private Logger log = LogManager.getLogger(ReceivingSegmentsTest.class);
	List<List<Object>> results;
	List<List<Object>> results1;
	TestStatus status;
	SQLWrapper sql = new SQLWrapper(log);
	WoWLoginPage loginPage;
	ReceivingSegmentPage objRxSegmentPage;
	ReceivingSegmentObjects objRxSegmentObjects;
	BasePage BaseObj;
	CommonFunctions common;
	StoreProperties storeprop;			
	List<List<Object>> result;
	List<List<Object>> result_comp;
	List<List<Object>> result_temp;
	public static WebDriver driver;
	public static XMLDataReader data;
	public String returnedString;
	String isAllCancelled;
	
	
	
	public static String mName="";
	public static String cName ="";
	public static ArrayList<String> methodList = new ArrayList<String>();
	public static  ExtentTest extLogger;
	public static ExtentReports extReport;	
	public static boolean isExceptionCaptured=false;
    int count=0;		
	int MCcount=0;
	public static boolean isFirstTest=true;
		
	public ReceivingSegmentsTest(){
		super.log=log;
	}
	
	List<List<Object>> soh = new ArrayList<List<Object>>(); 
	List<List<Object>> soh1 = new ArrayList<List<Object>>(); 
	List<List<Object>> sohforCalc = new ArrayList<List<Object>>(); 
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having multiple Segments through Receive in Full option ")
	public void ReceivingWarehouseMultipleSegmentOrdeFullHigh()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+17;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		List<List<Object>> result_disp = new ArrayList<List<Object>>();
		

		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString();
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.equals(descDB)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB = baseomDB+" "+piomDB;

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				if(!omAppln.contains("(")){
					omAppln = omAppln+" "+"0 (EA)";
				}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String om = null;
					String piom = result.get(k).get(2).toString();
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					
					if(baseom.contains("KG")){String[] base = baseom.split("\\s");om = String.format("%.03f",Float.parseFloat(base[0]))+" "+base[1]+" "+piom;}		
					else{om = baseom+" "+piom;}	
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					//365545, 7.000 KG 8 (EA), 5 CAR, 35 KG (40 EA), 6 CAR, 45.345 KG (48 EA)
					applList.addAll(StringToListCreation(tempDB));
					//Display Article
					String isDispArticle = data.getText("dispArticle").replace("seg_no", segmentNumber.get(j)).replace("art_no", articleDB);
					result_disp = sql.executeQuery(getContext(), isDispArticle);
					if(result_disp.size() != 0){
						for(int m=0;m<result_disp.size();m++){
							String tempDisp = result_disp.get(m).get(0).toString()+":"+"1 EA 0 (EA)"+":"+result_disp.get(m).get(1).toString()+":"+result_disp.get(m).get(2).toString()+":"+result_disp.get(m).get(3).toString()+":"+result_disp.get(m).get(4).toString();
							applList.addAll(StringToListCreation(tempDisp));
						}
					}
					
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	
	    	gettingSOHfromDB("initial",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fullhightemp",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    		if(i == 3){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+" by giving high temperature*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"full",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);	
	    		}
	    		if(i==4){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exception",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);
	    		}
	    	}
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fullhightemp",i,false, driver);
				}
				if(i==3){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "full",i,false, driver);
				}
				if(i==4){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exception",i,false, driver);
				}
			}
			List<List<Object>> sohAppln = gettingSOHfromDB("after",false);
			
	
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"fullhightemp");
				}
				if(i==1){
					rxTypeCheck(segmentNumber,i,"full");
				}
				if(i==2){
					rxTypeCheck(segmentNumber,i,"exception");
				}
			}
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
		
		
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having multiple Segments through Receive in Full option ")
	public void ReceivingWarehouseMultipleSegmentOrderFull()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+17;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		

		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
						
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString();
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.equals(descDB)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB = baseomDB+" "+piomDB;

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				if(!omAppln.contains("(")){
					omAppln = omAppln+" "+"0 (EA)";
				}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String piom = result.get(k).get(2).toString();
					String om = null;
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					if(baseom.contains("KG")){String[] base = baseom.split("\\s");om = String.format("%.03f",Float.parseFloat(base[0]))+" "+base[1]+" "+piom;}		
					else{om = baseom+" "+piom;}	
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					applList.addAll(StringToListCreation(tempDB));
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	gettingSOHfromDB("initial",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"full",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    		if(i == 3){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+" by giving high temperature*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fullhightemp",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);	
	    		}
	    		if(i==4){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exception",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);
	    		}
	    	}
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
			objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			//boolean isCancelled = true;
			//for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "full",i,false, driver);
				}
				if(i==3){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fullhightemp",i,false, driver);
				}
				if(i==4){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exception",i,false, driver);
				}
			}
				
			//}
			
			List<List<Object>> sohAppln = gettingSOHfromDB("after",true);
			
		
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"full");
				}
				if(i==1){
					rxTypeCheck(segmentNumber,i,"fullhightemp");
				}
				if(i==2){
					rxTypeCheck(segmentNumber,i,"exception");
				}
			}
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
		
		
	}
	
	//Cancel
	
	
	
	
	//ByException
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having multiple Segments through Receive in Full option ")
	public void ReceivingWarehouseMultipleSegmentOrderWithCancel()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+17;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		

		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString();
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.equals(descDB)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB;
				if(baseomDB.contains("KG")){
					String[] base = baseomDB.split("\\s");
					omDB = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piomDB; //12.5 KG 0 (EA)
				}
				else{
					omDB = baseomDB+" "+piomDB; 
				}
				
				//String omDB = baseomDB+" "+piomDB;/

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				
				if(omAppln.contains("KG")){
					String[] base = omAppln.split("\\s");
					if(base.length>2){
						omAppln = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+base[2]+" "+base[3];
					}//12.5 KG 0 (EA)
					else {
					omAppln = omAppln+" "+"0 (EA)";
					}
				}
				else {
					omAppln = omAppln+" "+"0 (EA)";
				}
			//	
			//	if(!omAppln.contains("(")){ // 5.000 KG 9 (EA),
			//		if(omAppln.contains("KG")){
			//			omAppln = omAppln+" "+"0 (EA)";
			//	}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String piom = result.get(k).get(2).toString();
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					
					String om;
					if(baseom.contains("KG")){
						String[] base = baseom.split("\\s");
						om = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piom; //12.5 KG 0 (EA)
					}
					else{
						om = baseom+" "+piom; 
					}
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					applList.addAll(StringToListCreation(tempDB));
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	gettingSOHfromDB("initial",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"full",i,2,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    		if(i == 3){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+" by giving high temperature*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exception",i,2,segmentNumber,chillTemp,frozenTemp,orderNo,driver);	
	    		}
	    		if(i==4){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"cancel",i,2,segmentNumber,chillTemp,frozenTemp,orderNo,driver);
	    		}
	    	}
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
			objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			//boolean isCancelled = true;
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "full",i,true, driver);
				}
				if(i==3){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exception",i,true, driver);
				}
				if(i==4){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "cancel",i,true, driver);
				}
			}
			List<List<Object>> sohAppln = gettingSOHfromDB("after",true);
			
		
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"full");
				}
				if(i==1){
					rxTypeCheck(segmentNumber,i,"exception");
				}
				if(i==2){
					rxTypeCheck(segmentNumber,i,"cancel");
				}
			}
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
	}
	
	
	//ByException
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having multiple Segments through Receive in Full option ")
		public void ReceivingWarehouseMultipleSegmentOrderWithCancelInException()
		{
			if(rxSegmentArtpreCount2==-1)
			{
				MCcount =MCcount+20;
			}
			TestStatus status = getTestStatus();
			soh.clear(); sohforCalc.clear();
			List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
			List<List<Object>> result_seg = new ArrayList<List<Object>>();
			List<List<Object>> result_total = new ArrayList<List<Object>>();
			List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
			List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
			List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
			

			
			try{
				boolean returnedBool = navToOrders(status);
				
				if(!returnedBool){
					
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
				
				String storeNo = getContext().getStringProperty("store");
				String orderNo = data.getText("orderNumber");
				String chillTemp = data.getText("chilled");
				String frozenTemp = data.getText("hardFrozen");
				
				
				revertingOrder(orderNo);
				
				objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
				objRxSegmentObjects.goBtn.click();
				waitForJSandJQueryToLoad(driver);
				
				try {
					if(objRxSegmentObjects.filteredOrder.isDisplayed()){
						
						orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
						htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
						htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
						objRxSegmentObjects.filteredOrder.click();
						waitForJSandJQueryToLoad(driver);
						verticalScroll(driver);
						objRxSegmentObjects.clearGroup.click();
					}
				}catch(Exception e){
									
					htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
					
				}
				
				if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
					
					htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
				}
				else{
					
					htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
				}
				
				//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
				String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
				String totalCartons = orderDetailsAppln.get(0).get(6).toString();
				String totalPallets = orderDetailsAppln.get(0).get(7).toString();
				String source = orderDetailsAppln.get(0).get(5).toString();
				String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
				
				String del = data.getText("deliveryNumber").replace("order_no", orderNo);
				result_seg = sql.executeQuery(getContext(), del);

				List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
				
				String desc = data.getText("desc").replace("order_no", orderNo);
				result = sql.executeQuery(getContext(), desc);
				String createdByDB = result.get(0).get(1).toString().trim();
				String descDB = result.get(0).get(2).toString();
				
				String totArt = data.getText("TotArticle").replace("order_no", orderNo);
				result = sql.executeQuery(getContext(), totArt);
				String totalArticleDB = result.get(0).get(2).toString();
				String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
							
				if(totalArticleDB.equals(totalArticleAppln)){
					
					htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
				}
				else{
					
					htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
				}
				if(supplierBrowser.equals(descDB)){
					
					htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
				}
				else{
					
					htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
				}
				
				List<List<Object>> dbValue = new ArrayList<List<Object>>();
				for(int i=0;i<segmentNumber.size();i++){
					
					String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
					result = sql.executeQuery(getContext(), segDetails);
					
					String tempA = result.get(0).get(0).toString();
					String tempB = result.get(0).get(1).toString(); 
					String tempC = result.get(0).get(2).toString();
					
					String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
					result = sql.executeQuery(getContext(), dates);
					String onShowDateDB = result.get(0).get(2).toString();
					String onDeliveryDateDB = result.get(0).get(3).toString();
					
					String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
					
					dbValue.addAll(StringToListCreation(temp));
					
				}
				
				List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
				ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
				objRxSegmentObjects.overallTab.click();
				waitForJSandJQueryToLoad(driver);
				
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
				
				String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
				result = sql.executeQuery(getContext(), orderDetails);
				
				//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
				
				for(int i=0;i<result.size();i++){
					
					String articleDB = result.get(i).get(2).toString();
					String baseomDB = result.get(i).get(5).toString();
					String piomDB = result.get(i).get(12).toString();
					String orderedQtyDB = result.get(i).get(3).toString();
					String orderedUnitDB = result.get(i).get(11).toString();
					String randFlag = result.get(i).get(4).toString();
					
					if(randFlag.equals("N")){
						piomDB = "0 (EA)";
						orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
					}
					
					String omDB;
					if(baseomDB.contains("KG")){
						String[] base = baseomDB.split("\\s");
						omDB = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piomDB; //12.5 KG 0 (EA)
					}
					else{
						omDB = baseomDB+" "+piomDB; 
					}
					
					//String omDB = baseomDB+" "+piomDB;/

					String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
					result_orderedDB.addAll(StringToListCreation(addString));
					
				}
				
				result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
				
				for(int i=0;i<result_total.size();i++){
					
					String articleAppln = result_total.get(i).get(0).toString();
					String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
					String OrderedQtyAppln = result_total.get(i).get(4).toString();
					String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
					
					
					if(omAppln.contains("KG")){
						String[] base = omAppln.split("\\s");
						if(base.length>2){
							omAppln = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+base[2]+" "+base[3];
						}//12.5 KG 0 (EA)
						else {
						omAppln = omAppln+" "+"0 (EA)";
						}
					}
					else {
						omAppln = omAppln+" "+"0 (EA)";
					}
				//	
				//	if(!omAppln.contains("(")){ // 5.000 KG 9 (EA),
				//		if(omAppln.contains("KG")){
				//			omAppln = omAppln+" "+"0 (EA)";
				//	}
					
					if(!orderedUnitAppln.contains("(")){
						orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
					}
					
					String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
					result_orderedAppln.addAll(StringToListCreation(addStringAppln));
					
				}
			
				ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
		
				String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
		    	objRxSegmentObjects.totalDeliveryTab.click();
		    	waitForJSandJQueryToLoad(driver);
				
		    	int j=0;
		    	List<List<Object>> applList = new ArrayList<List<Object>>();
		    	List<List<Object>> result_date = new ArrayList<List<Object>>();
		    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
		    		applList.clear();
		    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
					result = sql.executeQuery(getContext(), segDetails);
					for(int k=0;k<result.size();k++){
						String articleDB = result.get(k).get(0).toString();
						String baseom = result.get(k).get(1).toString();
						String piom = result.get(k).get(2).toString();
						String orderedQty = result.get(k).get(3).toString();
						String orderedTotalQty = result.get(k).get(4).toString();
						String orderedTotalWght = result.get(k).get(5).toString();
						String dispatchQty = result.get(k).get(6).toString();
						String dispatchTotalWght  = result.get(k).get(7).toString();
						String dispatchTotalQty = result.get(k).get(14).toString();
			
						if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
							piom = "0 (EA)";
						}
						
						String om;
						if(baseom.contains("KG")){
							String[] base = baseom.split("\\s");
							om = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piom; //12.5 KG 0 (EA)
						}
						else{
							om = baseom+" "+piom; 
						}
						
						if(result.get(k).get(10).toString().equals("N")){
							orderedTotalWght = "(0 EA)";
							dispatchTotalQty = "(0 EA)";
						}
						
						String[] tempA = dispatchTotalWght.split("\\s");
						String decWght="";
						//if(dispatchTotalWght.contains(".")){
						if(tempA[1].contains("KG")){
							decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
						}else{
							decWght = tempA[0];
						}
						String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
						
						
						String totalUnits = orderedTotalQty+" "+orderedTotalWght;
						String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
						applList.addAll(StringToListCreation(tempDB));
					}
					htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
					objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
					j++;
					
				}
		    	
		    	gettingSOHfromDB("initial",false);
				
		    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
		    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
		    		if(i==2){
		    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
		    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exception",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
		    		}
		    		if(i == 3){
		    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+" by giving high temperature*****;;;Info");
		    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"full",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);	
		    		}
		    		if(i==4){
		    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
		    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"cancel",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);
		    		}
		    	}
				htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
				objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
				//boolean isCancelled = true;
				for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
					if(i==2){
						objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exception",i,true, driver);
					}
					if(i==3){
						objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "full",i,true, driver);
					}
					if(i==4){
						objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "cancel",i,true, driver);
					}
				}
				List<List<Object>> sohAppln = gettingSOHfromDB("after",true);
				
			
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
				ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
				htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
				for(int i=0;i<segmentNumber.size();i++){
					if(i==0){
						rxTypeCheck(segmentNumber,i,"exception");
					}
					if(i==1){
						rxTypeCheck(segmentNumber,i,"full");
					}
					if(i==2){
						rxTypeCheck(segmentNumber,i,"cancel");
					}
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
				revertingOrder(orderNo);
				
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
				status.assertAll();
			}
			catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			
		}
		
	
	
	
	//ByException
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having multiple Segments through Receive in Full option ")
		public void ReceivingWarehouseMultipleSegmentOrderException()
		{
			if(rxSegmentArtpreCount2==-1)
			{
				MCcount =MCcount+19;
			}
			TestStatus status = getTestStatus();
			soh.clear(); sohforCalc.clear();
			List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
			List<List<Object>> result_seg = new ArrayList<List<Object>>();
			List<List<Object>> result_total = new ArrayList<List<Object>>();
			List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
			List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
			List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
			

			
			try{
				boolean returnedBool = navToOrders(status);
				
				if(!returnedBool){
					
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
				
				String storeNo = getContext().getStringProperty("store");
				String orderNo = data.getText("orderNumber");
				String chillTemp = data.getText("chilled");
				String frozenTemp = data.getText("hardFrozen");
				
				
				revertingOrder(orderNo);
				
				objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
				objRxSegmentObjects.goBtn.click();
				waitForJSandJQueryToLoad(driver);
				
				try {
					if(objRxSegmentObjects.filteredOrder.isDisplayed()){
						
						orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
						htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
						htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
						objRxSegmentObjects.filteredOrder.click();
						waitForJSandJQueryToLoad(driver);
						verticalScroll(driver);
						objRxSegmentObjects.clearGroup.click();
					}
				}catch(Exception e){
									
					htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
					
				}
				
				if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
					
					htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
				}
				else{
					
					htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
				}
				
				//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
				String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
				String totalCartons = orderDetailsAppln.get(0).get(6).toString();
				String totalPallets = orderDetailsAppln.get(0).get(7).toString();
				String source = orderDetailsAppln.get(0).get(5).toString();
				String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
				
				String del = data.getText("deliveryNumber").replace("order_no", orderNo);
				result_seg = sql.executeQuery(getContext(), del);

				List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
				
				String desc = data.getText("desc").replace("order_no", orderNo);
				result = sql.executeQuery(getContext(), desc);
				String createdByDB = result.get(0).get(1).toString().trim();
				String descDB = result.get(0).get(2).toString();
				
				String totArt = data.getText("TotArticle").replace("order_no", orderNo);
				result = sql.executeQuery(getContext(), totArt);
				String totalArticleDB = result.get(0).get(2).toString();
				String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
							
				if(totalArticleDB.equals(totalArticleAppln)){
					
					htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
				}
				else{
					
					htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
				}
				if(supplierBrowser.equals(descDB)){
					
					htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
				}
				else{
					
					htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
				}
				
				List<List<Object>> dbValue = new ArrayList<List<Object>>();
				for(int i=0;i<segmentNumber.size();i++){
					
					String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
					result = sql.executeQuery(getContext(), segDetails);
					
					String tempA = result.get(0).get(0).toString();
					String tempB = result.get(0).get(1).toString(); 
					String tempC = result.get(0).get(2).toString();
					
					String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
					result = sql.executeQuery(getContext(), dates);
					String onShowDateDB = result.get(0).get(2).toString();
					String onDeliveryDateDB = result.get(0).get(3).toString();
					
					String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
					
					dbValue.addAll(StringToListCreation(temp));
					
				}
				
				List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
				ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
				objRxSegmentObjects.overallTab.click();
				waitForJSandJQueryToLoad(driver);
				
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
				
				String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
				result = sql.executeQuery(getContext(), orderDetails);
				
				//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
				
				for(int i=0;i<result.size();i++){
					
					String articleDB = result.get(i).get(2).toString();
					String baseomDB = result.get(i).get(5).toString();
					String piomDB = result.get(i).get(12).toString();
					String orderedQtyDB = result.get(i).get(3).toString();
					String orderedUnitDB = result.get(i).get(11).toString();
					String randFlag = result.get(i).get(4).toString();
					
					if(randFlag.equals("N")){
						piomDB = "0 (EA)";
						orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
					}
					
					String omDB;
					if(baseomDB.contains("KG")){
						String[] base = baseomDB.split("\\s");
						omDB = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piomDB; //12.5 KG 0 (EA)
					}
					else{
						omDB = baseomDB+" "+piomDB; 
					}
					
					//String omDB = baseomDB+" "+piomDB;/

					String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
					result_orderedDB.addAll(StringToListCreation(addString));
					
				}
				
				result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
				
				for(int i=0;i<result_total.size();i++){
					
					String articleAppln = result_total.get(i).get(0).toString();
					String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
					String OrderedQtyAppln = result_total.get(i).get(4).toString();
					String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
					
					
					if(omAppln.contains("KG")){
						String[] base = omAppln.split("\\s");
						if(base.length>2){
							omAppln = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+base[2]+" "+base[3];
						}//12.5 KG 0 (EA)
						else {
						omAppln = omAppln+" "+"0 (EA)";
						}
					}
					else {
						omAppln = omAppln+" "+"0 (EA)";
					}
				//	
				//	if(!omAppln.contains("(")){ // 5.000 KG 9 (EA),
				//		if(omAppln.contains("KG")){
				//			omAppln = omAppln+" "+"0 (EA)";
				//	}
					
					if(!orderedUnitAppln.contains("(")){
						orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
					}
					
					String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
					result_orderedAppln.addAll(StringToListCreation(addStringAppln));
					
				}
			
				ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
		
				String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
		    	objRxSegmentObjects.totalDeliveryTab.click();
		    	waitForJSandJQueryToLoad(driver);
				
		    	int j=0;
		    	List<List<Object>> applList = new ArrayList<List<Object>>();
		    	List<List<Object>> result_date = new ArrayList<List<Object>>();
		    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
		    		applList.clear();
		    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
					result = sql.executeQuery(getContext(), segDetails);
					
					String compDetails = data.getText("dispArticle").replace("seg_no", segmentNumber.get(j));
					result_comp = sql.executeQuery(getContext(), compDetails);	
					
					for(int k=0;k<result.size();k++){
						String articleDB = result.get(k).get(0).toString();
						String baseom = result.get(k).get(1).toString();
						String piom = result.get(k).get(2).toString();
						String orderedQty = result.get(k).get(3).toString();
						String orderedTotalQty = result.get(k).get(4).toString();
						String orderedTotalWght = result.get(k).get(5).toString();
						String dispatchQty = result.get(k).get(6).toString();
						String dispatchTotalWght  = result.get(k).get(7).toString();
						String dispatchTotalQty = result.get(k).get(14).toString();
			
						if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
							piom = "0 (EA)";
						}
						
						String om;
						if(baseom.contains("KG")){
							String[] base = baseom.split("\\s");
							om = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piom; //12.5 KG 0 (EA)
						}
						else{
							om = baseom+" "+piom; 
						}
						
						if(result.get(k).get(10).toString().equals("N")){
							orderedTotalWght = "(0 EA)";
							dispatchTotalQty = "(0 EA)";
						}
						
						String[] tempA = dispatchTotalWght.split("\\s");
						String decWght="";
						//if(dispatchTotalWght.contains(".")){
						if(tempA[1].contains("KG")){
							decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
						}else{
							decWght = tempA[0];
						}
						String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
						
						
						String totalUnits = orderedTotalQty+" "+orderedTotalWght;
						String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
						applList.addAll(StringToListCreation(tempDB));
					}
					
					for(int k=0;k<result_comp.size();k++){
						
						String childarticleDB = result_comp.get(k).get(0).toString();
						String childorderedQty = result_comp.get(k).get(1).toString();
						String childorderedTotalQty = result_comp.get(k).get(2).toString();
						String childdispatchQty = result_comp.get(k).get(3).toString();
						String childdispatchTotalQty = result_comp.get(k).get(4).toString();
						
						String om = "1 EA 0 (EA)";
						childorderedTotalQty = childorderedTotalQty+" "+"(0 EA)";
						childdispatchTotalQty = childdispatchTotalQty+" "+"(0 EA)";
						
						String tempDB = childarticleDB+":"+om+":"+childorderedQty+":"+childorderedTotalQty+":"+childdispatchQty+":"+childdispatchTotalQty;
						System.out.println(tempDB);
						applList.addAll(StringToListCreation(tempDB));
					}
					
					System.out.println(applList);
					htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
					objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
					j++;
					
				}
		    	
		    	gettingSOHfromDB("initial",false);
				
		    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
		    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
		    		if(i==2){
		    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
		    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exception",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
		    		}
		    		if(i == 3){
		    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+" by giving high temperature*****;;;Info");
		    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"full",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);	
		    		}
		    		if(i==4){
		    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
		    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fullhightemp",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);
		    		}
		    	}
				htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
				objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
				//boolean isCancelled = true;
				for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
					if(i==2){
						objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exception",i,false, driver);
					}
					if(i==3){
						objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "full",i,false, driver);
					}
					if(i==4){
						objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fullhightemp",i,false, driver);
					}
				}
				List<List<Object>> sohAppln = gettingSOHfromDB("after",true);
				
			
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
				ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
				htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
				for(int i=0;i<segmentNumber.size();i++){
					if(i==0){
						rxTypeCheck(segmentNumber,i,"exception");
					}
					if(i==1){
						rxTypeCheck(segmentNumber,i,"full");
					}
					if(i==2){
						rxTypeCheck(segmentNumber,i,"fullhightemp");
					}
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
				revertingOrder(orderNo);
				
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
				status.assertAll();
			}
			catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			
		}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having Single Segments through Receive in Full with High Temperature option ")
	public void ReceivingWarehouseSingleSegmentFullWithHighTemperature()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+17;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString().replaceAll("\\s+"," ");
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.equals(descDB)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB;
				if(baseomDB.contains("KG")){
					String[] base = baseomDB.split("\\s");
					omDB = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piomDB; //12.5 KG 0 (EA)
				}
				else{
					omDB = baseomDB+" "+piomDB; 
				}
				
				//String omDB = baseomDB+" "+piomDB;/

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				
				if(omAppln.contains("KG")){
					String[] base = omAppln.split("\\s");
					if(base.length>2){
						omAppln = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+base[2]+" "+base[3];
					}//12.5 KG 0 (EA)
					else {
					omAppln = omAppln+" "+"0 (EA)";
					}
				}
				else {
					omAppln = omAppln+" "+"0 (EA)";
				}
			//	
			//	if(!omAppln.contains("(")){ // 5.000 KG 9 (EA),
			//		if(omAppln.contains("KG")){
			//			omAppln = omAppln+" "+"0 (EA)";
			//	}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String piom = result.get(k).get(2).toString();
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					
					String om;
					if(baseom.contains("KG")){
						String[] base = baseom.split("\\s");
						om = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piom; //12.5 KG 0 (EA)
					}
					else{
						om = baseom+" "+piom; 
					}
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					applList.addAll(StringToListCreation(tempDB));
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	gettingSOHfromDB("initial",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fullhightemp",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    	}
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
			objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			//boolean isCancelled = true;
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fullhightemp",i,false, driver);
				}
			}
			List<List<Object>> sohAppln = gettingSOHfromDB("after",true);
			
		
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"fullhightemp");
				}
			}
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having single Segments through Receive in Exception option ")
	public void ReceivingWarehouseSingleSegmentException()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+21;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString().replaceAll("\\s+"," ").trim();
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.trim().equals(descDB.trim())){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB;
				if(baseomDB.contains("KG")){
					String[] base = baseomDB.split("\\s");
					omDB = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piomDB; //12.5 KG 0 (EA)
				}
				else{
					omDB = baseomDB+" "+piomDB; 
				}
				
				//String omDB = baseomDB+" "+piomDB;/

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				
				if(omAppln.contains("KG")){
					String[] base = omAppln.split("\\s");
					if(base.length>2){
						omAppln = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+base[2]+" "+base[3];
					}//12.5 KG 0 (EA)
					else {
					omAppln = omAppln+" "+"0 (EA)";
					}
				}
				else {
					omAppln = omAppln+" "+"0 (EA)";
				}
			//	
			//	if(!omAppln.contains("(")){ // 5.000 KG 9 (EA),
			//		if(omAppln.contains("KG")){
			//			omAppln = omAppln+" "+"0 (EA)";
			//	}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String piom = result.get(k).get(2).toString();
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					
					String om;
					if(baseom.contains("KG")){
						String[] base = baseom.split("\\s");
						om = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piom; //12.5 KG 0 (EA)
					}
					else{
						om = baseom+" "+piom; 
					}
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					applList.addAll(StringToListCreation(tempDB));
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	gettingSOHfromDB("initial",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exception",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    	}
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
			objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			//boolean isCancelled = true;
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exception",i,false, driver);
				}
			}
			List<List<Object>> sohAppln = gettingSOHfromDB("after",true);
			
		
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"exception");
				}
			}
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and Lookup Screen*****;;;Info");
			objRxSegmentPage.sohFromLookUp(objRxSegmentObjects,null, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having single Segment through Receive in Full option by using Post Later option")
	public void ReceivingWarehouseSingleSegmentFullUsingPostLater()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+17;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString().replaceAll("\\s+"," ").trim();
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.trim().equals(descDB.trim())){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB;
				if(baseomDB.contains("KG")){
					String[] base = baseomDB.split("\\s");
					omDB = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piomDB; //12.5 KG 0 (EA)
				}
				else{
					omDB = baseomDB+" "+piomDB; 
				}
				
				//String omDB = baseomDB+" "+piomDB;/

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				
				if(omAppln.contains("KG")){
					String[] base = omAppln.split("\\s");
					if(base.length>2){
						omAppln = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+base[2]+" "+base[3];
					}//12.5 KG 0 (EA)
					else {
					omAppln = omAppln+" "+"0 (EA)";
					}
				}
				else {
					omAppln = omAppln+" "+"0 (EA)";
				}
			//	
			//	if(!omAppln.contains("(")){ // 5.000 KG 9 (EA),
			//		if(omAppln.contains("KG")){
			//			omAppln = omAppln+" "+"0 (EA)";
			//	}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String piom = result.get(k).get(2).toString();
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					
					String om;
					if(baseom.contains("KG")){
						String[] base = baseom.split("\\s");
						om = String.format("%.03f", Float.parseFloat(base[0]))+" "+base[1]+" "+piom; //12.5 KG 0 (EA)
					}
					else{
						om = baseom+" "+piom; 
					}
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					applList.addAll(StringToListCreation(tempDB));
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	gettingSOHfromDB("initial",false);
	    	gettingSOHfromDB("initialLater",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fulllater",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    	}
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
			objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			//boolean isCancelled = true;
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fulllater",i,false, driver);
				}
			}
			List<List<Object>> sohAppln = gettingSOHfromDB("afterLater",true);
					
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"fulllater");
				}
			}
			
			
			for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		WebElement deliverydetails =  prepareWebElementWithDynamicXpathWithInt(objRxSegmentObjects.deliverydync, i,driver);
	    		String deliveryAppln = deliverydetails.getText().replace("Delivery ", "").substring(0,deliverydetails.getText().indexOf("S")-1).replace("Segment", "").trim();
	    		deliverydetails.click();
	    		htmlToExtent(cName,mName,extLogger,driver, "Post and Update SOH for Segment #"+deliveryAppln+";;;Pass");
	    		//try{waitForJSandJQueryToLoad(driver);}catch(Exception e){waitForPageToLoad(driver);}
	    		waitFor(3);
	    		WebElement postUpdate =  prepareWebElementWithDynamicXpathWithInt(objRxSegmentObjects.postUpdateSOH, i-1,driver);
	    		postUpdate.click();
	    		waitFor(5);
	    		if(objRxSegmentObjects.postLaterStatus.isDisplayed()){
	    			htmlToExtent(cName,mName,extLogger,driver, ""+objRxSegmentObjects.postLaterStatus.getText()+";;;Pass");
	    			objRxSegmentObjects.postLaterStatus.click();
	    		}else{
	    			htmlToExtent(cName,mName,extLogger,driver, "No Success Message after Post and Update SOH is given;;;Fail");
	    		}
			}
			
			soh.clear();
			List<List<Object>> sohApplnAfter = gettingSOHfromDB("after",true);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after Post and Update SOH between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohApplnAfter);
			
			
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after Post and Update SOH between Application(Calculated) and Lookup Screen*****;;;Info");
			objRxSegmentPage.sohFromLookUp(objRxSegmentObjects,sohAppln, driver);		
			
			
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
	}
	
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receive the Warehouse Order having multiple Segments through Receive in Full option by using Post Later option")
	public void ReceivingWarehouseMultipleSegmentOrderFullWithPostLater()
	{
		if(rxSegmentArtpreCount2==-1)
		{
			MCcount =MCcount+18;
		}
		TestStatus status = getTestStatus();
		soh.clear(); sohforCalc.clear();
		List<List<Object>> orderDetailsAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_seg = new ArrayList<List<Object>>();
		List<List<Object>> result_total = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedDB = new ArrayList<List<Object>>();
		List<List<Object>> result_orderedAppln = new ArrayList<List<Object>>();
		List<List<Object>> result_datesDB = new ArrayList<List<Object>>();
		

		
		try{
			boolean returnedBool = navToOrders(status);
			
			if(!returnedBool){
				
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
			
						
			String storeNo = getContext().getStringProperty("store");
			String orderNo = data.getText("orderNumber");
			String chillTemp = data.getText("chilled");
			String frozenTemp = data.getText("hardFrozen");
			
			revertingOrder(orderNo);
			
			objRxSegmentObjects.orderNoSend.sendKeys(orderNo);
			objRxSegmentObjects.goBtn.click();
			waitForJSandJQueryToLoad(driver);
			
			try {
				if(objRxSegmentObjects.filteredOrder.isDisplayed()){
					
					orderDetailsAppln = getValuesFromTable(objRxSegmentObjects.orderDetails);
					htmlToExtent(cName,mName,extLogger,driver,"Order enquiry page has been loaded;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Order Details as : "+orderDetailsAppln+";;;Pass");
					objRxSegmentObjects.filteredOrder.click();
					waitForJSandJQueryToLoad(driver);
					verticalScroll(driver);
					objRxSegmentObjects.clearGroup.click();
				}
			}catch(Exception e){
								
				htmlToExtent(cName,mName,extLogger,driver,""+objRxSegmentObjects.errorMessage.getText()+" \" Order Number : "+orderNo+" \";;;Fail");
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
				
			}
			
			if(orderDetailsAppln.get(0).get(2).equals("DISPATCHED") && orderDetailsAppln.get(0).get(4).equals("WAREHOUSE")){
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : DISPATCHED and Type : WAREHOUSE ;;;Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Status : "+orderDetailsAppln.get(0).get(2)+" and Type : "+orderDetailsAppln.get(0).get(3)+";;;Fail");
			}
			
			//String supplierBrowser = objRxSegmentObjects.supplierBrowser.getText().replace("Supplier: ","");
			String supplierBrowser = orderDetailsAppln.get(0).get(3).toString().trim();
			String totalCartons = orderDetailsAppln.get(0).get(6).toString();
			String totalPallets = orderDetailsAppln.get(0).get(7).toString();
			String source = orderDetailsAppln.get(0).get(5).toString();
			String totalDeliveries = objRxSegmentObjects.totalDelivery.getText();
			
			String del = data.getText("deliveryNumber").replace("order_no", orderNo);
			result_seg = sql.executeQuery(getContext(), del);

			List<String> segmentNumber = objRxSegmentPage.deliveryTabCheck(objRxSegmentObjects,orderNo,result_seg, driver);
			
			String desc = data.getText("desc").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), desc);
			String createdByDB = result.get(0).get(1).toString().trim();
			String descDB = result.get(0).get(2).toString();
			
			String totArt = data.getText("TotArticle").replace("order_no", orderNo);
			result = sql.executeQuery(getContext(), totArt);
			String totalArticleDB = result.get(0).get(2).toString();
			String totalArticleAppln = objRxSegmentObjects.totalArticles.getText().trim();
						
			if(totalArticleDB.equals(totalArticleAppln)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Total of "+totalArticleAppln+" article is available which DOES NOT matches with DB;"+totalArticleDB+";"+totalArticleAppln+";Fail");
			}
			if(supplierBrowser.equals(descDB)){
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB matches with that of in Application;"+descDB+";"+supplierBrowser+";Pass");
			}
			else{
				
				htmlToExtent(cName,mName,extLogger,driver,"Description from DB DOENS NOT matches with that of in Application;"+descDB+";"+supplierBrowser+";Fail");
			}
			
			List<List<Object>> dbValue = new ArrayList<List<Object>>();
			for(int i=0;i<segmentNumber.size();i++){
				
				String segDetails = data.getText("TotArticle").replace("order_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), segDetails);
				
				String tempA = result.get(0).get(0).toString();
				String tempB = result.get(0).get(1).toString(); 
				String tempC = result.get(0).get(2).toString();
				
				String dates = data.getText("orderDateDetails").replace("seg_no", segmentNumber.get(i));
				result = sql.executeQuery(getContext(), dates);
				String onShowDateDB = result.get(0).get(2).toString();
				String onDeliveryDateDB = result.get(0).get(3).toString();
				
				String temp = segmentNumber.get(i)+":"+tempA+":"+tempB+":"+tempC+":"+onDeliveryDateDB+":"+onShowDateDB;
				
				dbValue.addAll(StringToListCreation(temp));
				
			}
			
			List<List<Object>> appValue = objRxSegmentPage.segmentTotalValueDetails(objRxSegmentObjects, segmentNumber, driver);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL Article Count,Total Dispatched Quantity,Total Dispatched Weight,Delivery date and OnShow date of Segments between Application and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,dbValue,appValue);
			objRxSegmentObjects.overallTab.click();
			waitForJSandJQueryToLoad(driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the TOTAL OM,Ordered Quantity,Ordered Total Unit between Application and DB*****;;;Info");
			
			String orderDetails = data.getText("orderedDetails").replace("seg_no", segmentNumber.get(0).toString());
			result = sql.executeQuery(getContext(), orderDetails);
			
			//""+firstArticleDetails[0]+":"+firstArticleDetails[1].trim()+":"
			
			for(int i=0;i<result.size();i++){
				
				String articleDB = result.get(i).get(2).toString();
				String baseomDB = result.get(i).get(5).toString();
				String piomDB = result.get(i).get(12).toString();
				String orderedQtyDB = result.get(i).get(3).toString();
				String orderedUnitDB = result.get(i).get(11).toString();
				String randFlag = result.get(i).get(4).toString();
				
				if(randFlag.equals("N")){
					piomDB = "0 (EA)";
					orderedUnitDB = orderedUnitDB.substring(0,orderedUnitDB.indexOf("(")-1) + " " + "(0 EA)";
				}
				
				String omDB = baseomDB+" "+piomDB;

				String addString = ""+articleDB.trim()+":"+omDB.trim()+":"+orderedQtyDB.trim()+":"+orderedUnitDB.trim();
				result_orderedDB.addAll(StringToListCreation(addString));
				
			}
			
			result_total = getValuesFromTable(objRxSegmentObjects.totalArticleDetails);
			
			for(int i=0;i<result_total.size();i++){
				
				String articleAppln = result_total.get(i).get(0).toString();
				String omAppln = result_total.get(i).get(3).toString().replaceAll("\\s+"," ").trim();
				String OrderedQtyAppln = result_total.get(i).get(4).toString();
				String orderedUnitAppln = result_total.get(i).get(5).toString().replaceAll("\\s+"," ").trim();
				
				if(!omAppln.contains("(")){
					omAppln = omAppln+" "+"0 (EA)";
				}
				
				if(!orderedUnitAppln.contains("(")){
					orderedUnitAppln = orderedUnitAppln+" "+"(0 EA)";
				}
				
				String addStringAppln = ""+articleAppln.trim()+":"+omAppln.trim()+":"+OrderedQtyAppln.trim()+":"+orderedUnitAppln.trim();
				result_orderedAppln.addAll(StringToListCreation(addStringAppln));
				
			}
		
			ElementContains1(cName,mName,extLogger,driver,result_orderedDB,result_orderedAppln);
	
			String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
	    	objRxSegmentObjects.totalDeliveryTab.click();
	    	waitForJSandJQueryToLoad(driver);
			
	    	int j=0;
	    	List<List<Object>> applList = new ArrayList<List<Object>>();
	    	List<List<Object>> result_date = new ArrayList<List<Object>>();
	    	for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		applList.clear();
	    		String segDetails = data.getText("segmentDetails").replace("seg_no", segmentNumber.get(j));
				result = sql.executeQuery(getContext(), segDetails);
				for(int k=0;k<result.size();k++){
					String articleDB = result.get(k).get(0).toString();
					String baseom = result.get(k).get(1).toString();
					String piom = result.get(k).get(2).toString();
					String om = null;
					String orderedQty = result.get(k).get(3).toString();
					String orderedTotalQty = result.get(k).get(4).toString();
					String orderedTotalWght = result.get(k).get(5).toString();
					String dispatchQty = result.get(k).get(6).toString();
					String dispatchTotalWght  = result.get(k).get(7).toString();
					String dispatchTotalQty = result.get(k).get(14).toString();
		
					if(piom.equals("0 ( )") || result.get(k).get(10).toString().equals("N")){
						piom = "0 (EA)";
					}
					if(baseom.contains("KG")){String[] base = baseom.split("\\s");om = String.format("%.03f",Float.parseFloat(base[0]))+" "+base[1]+" "+piom;}		
					else{om = baseom+" "+piom;}	
					
					if(result.get(k).get(10).toString().equals("N")){
						orderedTotalWght = "(0 EA)";
						dispatchTotalQty = "(0 EA)";
					}
					
					String[] tempA = dispatchTotalWght.split("\\s");
					String decWght="";
					//if(dispatchTotalWght.contains(".")){
					if(tempA[1].contains("KG")){
						decWght = String.format("%.03f", Float.parseFloat(tempA[0].trim()));//df.format(Float.parseFloat(tempA));
					}else{
						decWght = tempA[0];
					}
					String totalUnitDispatch = decWght+" "+tempA[1]+" "+dispatchTotalQty;
					
					
					String totalUnits = orderedTotalQty+" "+orderedTotalWght;
					String tempDB = articleDB+":"+om+":"+orderedQty+":"+totalUnits+":"+dispatchQty+":"+totalUnitDispatch;
					applList.addAll(StringToListCreation(tempDB));
				}
				htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the Segment #"+segmentNumber.get(j)+" details between Application and DB*****;;;Info");
				objRxSegmentPage.segmentOrderedDetails(objRxSegmentObjects,applList, i, driver);
				j++;
				
			}
	    	
	    	gettingSOHfromDB("initial",false);
	    	gettingSOHfromDB("initialLater",false);
			
	    	htmlToExtent(cName,mName,extLogger,driver, "*****Receiving the Segments available for given order*****;;;Info");
	    	for(int i=2;i<=Integer.parseInt(totaldelivery)+1;i++){
	    		if(i==2){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fulllater",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);		
	    		}
	    		if(i == 3){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+" by giving high temperature*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"fullhightemplater",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);	
	    		}
	    		if(i==4){
	    			htmlToExtent(cName,mName,extLogger,driver, "*****Receiving Segment #"+segmentNumber.get(i-2)+"*****;;;Info");
	    			objRxSegmentPage.receivingSegments(objRxSegmentObjects,"exceptionlater",i,0,segmentNumber,chillTemp,frozenTemp,orderNo,driver);
	    		}
	    	}
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the status between order enquiry and overall tab after receiving segment*****;;;Info");
			objRxSegmentPage.oStatusCheck(objRxSegmentObjects, driver);
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing Received Value with Dispatched Value in Application and DB*****;;;Info");
			//boolean isCancelled = true;
			//for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
			for(int i =2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
				if(i==2){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fulllater",i,false, driver);
				}
				if(i==3){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "fullhightemplater",i,false, driver);
				}
				if(i==4){
					objRxSegmentPage.checkingRxAndDispValues(objRxSegmentObjects, "exceptionlater",i,false, driver);
				}
			}
				
			//}
			
			List<List<Object>> sohAppln = gettingSOHfromDB("afterLater",true);			
		
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after receive between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohAppln);
			htmlToExtent(cName,mName,extLogger,driver, "*****Checking the Receive method and SAP Receive method in DB*****;;;Info");
			for(int i=0;i<segmentNumber.size();i++){
				if(i==0){
					rxTypeCheck(segmentNumber,i,"fulllater");
				}
				if(i==1){
					rxTypeCheck(segmentNumber,i,"fullhightemplater");
				}
				if(i==2){
					rxTypeCheck(segmentNumber,i,"exceptionlater");
				}
			}
			
			
			for(int i=2;i<=objRxSegmentObjects.deliveryTabs.size();i++){
	    		WebElement deliverydetails =  prepareWebElementWithDynamicXpathWithInt(objRxSegmentObjects.deliverydync, i,driver);
	    		String deliveryAppln = deliverydetails.getText().replace("Delivery ", "").substring(0,deliverydetails.getText().indexOf("S")-1).replace("Segment", "").trim();
	    		deliverydetails.click();
	    		htmlToExtent(cName,mName,extLogger,driver, "Post and Update SOH for Segment #"+deliveryAppln+";;;Pass");
	    		//try{waitForJSandJQueryToLoad(driver);}catch(Exception e){waitForPageToLoad(driver);}
	    		waitFor(3);
	    		WebElement postUpdate =  prepareWebElementWithDynamicXpathWithInt(objRxSegmentObjects.postUpdateSOH, i-1,driver);
	    		postUpdate.click();
	    		waitFor(5);
	    		if(objRxSegmentObjects.postLaterStatus.isDisplayed()){
	    			htmlToExtent(cName,mName,extLogger,driver, ""+objRxSegmentObjects.postLaterStatus.getText()+";;;Pass");
	    			objRxSegmentObjects.postLaterStatus.click();
	    		}else{
	    			htmlToExtent(cName,mName,extLogger,driver, "No Success Message after Post and Update SOH is given;;;Fail");
	    		}
			}
			
			soh.clear();
			List<List<Object>> sohApplnAfter = gettingSOHfromDB("after",true);
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after Post and Update SOH between Application(Calculated) and DB*****;;;Info");
			ElementContains1(cName,mName,extLogger,driver,soh,sohApplnAfter);
			
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Comparing the SOH after Post and Update SOH between Application(Calculated) and Lookup Screen*****;;;Info");
			objRxSegmentPage.sohFromLookUp(objRxSegmentObjects,sohAppln, driver);
			
			
			htmlToExtent(cName,mName,extLogger,driver, "*****Reverting the received segments*****;;;Info");
			revertingOrder(orderNo);
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(rxSegmentArtScenarios,rxSegmentArttestname,driver));
			status.assertAll();
		}
		catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	//---------------------------------------------------------------------------------------------------------------------
	
	public List<List<Object>> gettingSOHfromDB(String calcType,boolean isCancel) throws AWTException, SQLException{
	
		String totaldelivery = objRxSegmentObjects.totalDelivery.getText();
		//for(int k=2;k<=Integer.parseInt(totaldelivery)+1;k++){
		List<List<Object>> sohCalculated = new ArrayList<List<Object>>();
		List<List<Object>> artAppln = objRxSegmentPage.gettingArticleFromSegment(objRxSegmentObjects,isCancel, driver);
			for(int i=0;i<artAppln.size();i++){
				String segSoH = data.getText("soh").replace("art_no", artAppln.get(i).get(0).toString());
				result = sql.executeQuery(getContext(), segSoH);
				String articleDB = result.get(0).get(0).toString();
				String sohDB1 = result.get(0).get(1).toString();
				String sohDB = result.get(0).get(1).toString();
				String randWghtQtyDB=null ;
				if(result.get(0).get(2) == null){
					randWghtQtyDB = "0";
				}
				else{
					randWghtQtyDB = result.get(0).get(2).toString();
				}
				
				
				String baseUom = result.get(0).get(4).toString();
				//String piValue="";
				String piUom="";
				String baseOm="";
				String piOm="";
				if(result.get(0).get(5).toString().equals("Y")){
					piUom = result.get(0).get(3).toString();
					sohDB = sohDB+" "+baseUom+" ("+randWghtQtyDB+" "+piUom+")";
					baseOm = result.get(0).get(6).toString();
					piOm = result.get(0).get(7).toString();
				}
				else{
					sohDB = sohDB+" "+baseUom+" "+"(0 EA)";	
					baseOm="1.000";
					piOm="1.000";
					piUom ="EA";
				}
				
				if(calcType.equals("initial")){
					String tempDB =  sohDB1+":"+baseOm+":"+randWghtQtyDB+":"+piOm+":"+baseUom+":"+piUom+":"+artAppln.get(i).get(0);
					sohforCalc.addAll(StringToListCreation(tempDB));
				}else if(calcType.equals("initialLater")){
					String tempDBSOH = articleDB+":"+sohDB;
					soh.addAll(StringToListCreation(tempDBSOH));					
				}else if(calcType.equals("afterLater")){
					String tempDBSOH = articleDB+":"+sohDB;
					soh1.addAll(StringToListCreation(tempDBSOH));					
				}
				else{
					String tempDBSOH = articleDB+":"+sohDB;
					soh.addAll(StringToListCreation(tempDBSOH));
				}
			}
			if(calcType.equals("initialLater")){
				return soh;
			}
			
			if(calcType.equals("afterLater")){
				return soh1;
			}
			
			
			if(!calcType.equals("initial")){
				sohCalculated = objRxSegmentPage.sohCalculation(objRxSegmentObjects,sohforCalc,isCancel, driver);
			}
			return sohCalculated;
		}
	
	public void rxTypeCheck(List<String> segmentNumber,int i,String recvType) throws AWTException,SQLException{
    	
    	//for(int i=0;i<segmentNumber.size();i++){
    		String segRxType = data.getText("rxtype").replace("seg_no", segmentNumber.get(i));
			result = sql.executeQuery(getContext(), segRxType);
			objRxSegmentObjects.overallTab.click();
			waitForPageToLoad(driver);
			//waitForJSandJQueryToLoad(driver);
			//String returnString = objRxSegmentPage.moveAlongSegments(objRxSegmentObjects, i+2, driver);
			if(recvType.equals("cancel")){
				htmlToExtent(cName,mName,extLogger,driver, "Segment #"+segmentNumber.get(i)+" is cancelled hence recv method and SAP recv methods are not available in DB;;;Pass");
				return;
			}
			String recv_methodDB = result.get(0).get(1).toString();
			String sap_recv_methodDB = result.get(0).get(2).toString();
			if(recvType.contains("full")){ //|| recvType.equals("fullhightemp") ||recvType.equals("fulllater") ){
				if(recv_methodDB.equals("RF") && sap_recv_methodDB.equals("F")){
					htmlToExtent(cName,mName,extLogger,driver, "When segment #"+segmentNumber.get(i)+" is received full then the receive method is "+recv_methodDB+" and SAP receive method is "+sap_recv_methodDB+" in DB;;;Pass");
				}
				if(!recv_methodDB.equals("RF")){
					htmlToExtent(cName,mName,extLogger,driver, "When segment #"+segmentNumber.get(i)+" is received full then the receive method is "+recv_methodDB+" in DB;;;Fail");
				}
				if(!sap_recv_methodDB.equals("F")){
					if(recv_methodDB.equals("RF") && sap_recv_methodDB.equals("R")){
						htmlToExtent(cName,mName,extLogger,driver, "Segment #"+segmentNumber.get(i)+" is received full with high temperature the receive method is "+recv_methodDB+" and SAP receive method is "+sap_recv_methodDB+" in DB;;;Pass");
					}
					else{
					htmlToExtent(cName,mName,extLogger,driver, "Segment #"+segmentNumber.get(i)+" is received full with high temperature then the SAP receive method is "+sap_recv_methodDB+" in DB;;;Fail");
					}
				}
				
			}
			if(recvType.contains("exception")){
				if(recv_methodDB.equals("RE") && sap_recv_methodDB.equals("E")){
					htmlToExtent(cName,mName,extLogger,driver, "When segment #"+segmentNumber.get(i)+" is received exception then the receive method is "+recv_methodDB+" and SAP receive method is "+sap_recv_methodDB+" in DB;;;Pass");
				}
				if(!recv_methodDB.equals("RE")){
					htmlToExtent(cName,mName,extLogger,driver, "When segment #"+segmentNumber.get(i)+" is received exception then the receive method is "+recv_methodDB+" in DB;;;Fail");
				}
				if(!sap_recv_methodDB.equals("E")){
					if(recv_methodDB.equals("RE") && sap_recv_methodDB.equals("R")){
						htmlToExtent(cName,mName,extLogger,driver, "Segment #"+segmentNumber.get(i)+" is received exception with high temperature the receive method is "+recv_methodDB+" and SAP receive method is "+sap_recv_methodDB+" in DB;;;Pass");
					}
					else{
					htmlToExtent(cName,mName,extLogger,driver, "Segment #"+segmentNumber.get(i)+" is received exception with high temperature then the SAP receive method is "+sap_recv_methodDB+" in DB;;;Fail");
					}
				}
				
			}
		
    	}
	    
   // }
	
	public void revertingOrder(String orderNo) throws AWTException,SQLException{
		
		//for(int i=0;i<segmentNumber.size();i++){
    		String reverting = data.getText("revert").replace("seg_no", orderNo);
			result = sql.executeQuery(getContext(), reverting);
			//htmlToExtent(cName,mName,extLogger,driver, "Reverting Order #"+orderNo+";;;Pass");
		}
	

	
	
	
	//--------------------------------------------------------------------------------------------------------
	//----------------------------------LOGIN FUNCTIONS--------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------
	
	
	public boolean navToOrders(TestStatus status) throws IOException, AWTException {
		log.info("*****Login into Application*****");
		htmlToExtent(cName,mName,extLogger,driver, "*****Login into Application*****;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objRxSegmentPage = loginPage.navToOrderEnq(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store,driver);
			objRxSegmentPage = loginPage.navToOrderEnq(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "*****Navigate To Order Enquiry Page*****;;;Pass");
			boolean bool = objRxSegmentPage.toOrderEnqPage(objRxSegmentObjects,driver);
			return bool;
	}
	
	
	//---------------------------------------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------------
	
	
	
	
	
	
	
	@BeforeMethod(alwaysRun=true)
	public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
		
		 mName=m9.getName().toString().trim();			
 			if(!methodList.contains(m9.getName().toString().trim())){
 			methodList.add(m9.getName().toString().trim());
 			extLogger = extReport.startTest(m9.getName().toString().trim());
 			}
		initializeTestcontext();
		System.out.println("test1 - beforemethod");
		log.info("Loading Testdata for the test case: " + m9.getName().toString());
		data.getTCNameFromChildren(m9.getName().toString().trim());
		if(isFirstTest){
			driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
		}else{
			String title = driver.getCurrentUrl();
			if(title.contains("logginOut"))
			{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
			}else{
				driver.navigate().refresh();
				TimeUnit.SECONDS.sleep(5);
				if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
				{
					if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
						WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
						scrolltoElement(home,driver);
						home.click();
						TimeUnit.SECONDS.sleep(5);
						loginPage.Logout(RoutinesArtScenarios, RoutinesArttestname, driver);
						driver.navigate().refresh();
						TimeUnit.SECONDS.sleep(5);}
				}
			}
		}
			isFirstTest=false;
			//driver=createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser")); 
			setDriver(driver);
		testcontext.setAttribute("WebDriver", driver);
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m9.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		rxSegmentArttestname = m9.getName().toString().trim();
		rxSegmentArttestdesc = m9.getAnnotation(Test.class).description();
		htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Docker run - "+getContext().getStringProperty("isDocketRun")+"</h4></i></b>;;;Info");
		objRxSegmentObjects = PageFactory.initElements(this.driver, ReceivingSegmentObjects.class);
		objRxSegmentPage = PageFactory.initElements(this.driver, ReceivingSegmentPage.class);
		BaseObj = PageFactory.initElements(this.driver, BasePage.class);
		common = PageFactory.initElements(this.driver, CommonFunctions.class);
		storeprop = PageFactory.initElements(this.driver, StoreProperties.class);
	}
	
	@BeforeClass
	public void loadXMLFile(){				
		System.out.println("test1 - Beforeclass");
		data = new XMLDataReader(log);
		customreport=new CustomExtentReports();
		log.info("Loading data for the class: " );
		data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\rxSegment.xml");
		customreport.createExtentReport();
		cName=this.getClass().getSimpleName();
		reportPath = new File(TestContext.getStringProperty("reportPath"));			
		extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
		classList.add(this.getClass().getSimpleName());				
	}
	
	@AfterClass(alwaysRun=true)
	public void tearDown() throws IOException, ParseException{
		waitForJSandJQueryToLoad(driver);
		System.out.println("afterclass");
		sceCtMap.put(cName+"_totalCt", methodList.size());
		sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
		sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
		tcCt.put(this.getClass().getSimpleName().toString(),MCcount);
        extReport.endTest(extLogger);
		extReport.flush();				
		removeDriver();
		closeDriver(driver);
		moduleName.put("Modules", rxSegmentArtModules);
		waitFor(1);
		int ArtMC=MCcount;
		rxSegmentArtMC=""+MCcount;
	}

	@AfterMethod(alwaysRun=true)
	protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {				
		System.out.println("AffterMethod");
		
		extReport.endTest(extLogger);
		extReport.flush();
		try{
			if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
				htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;INFO");	
				result9.removeAttribute("isFail");
			}}catch(Exception e ){
				//System.out.println();
			
			}
		waitFor(1);
		customreport.getExtentReport().endTest(customreport.getExtentTest());
		customreport.getExtentReport().flush();
		waitFor(1);
		if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info"))
		{
			int cnt = rxSegmentArtpreCount2+1;
			htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
			rxSegmentArtpreCount2++;
		}
		if(rxSegmentArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass"))
		{
			rxSegmentArtpreCount2=-1;
		}
		waitFor(1);
}
	

}
