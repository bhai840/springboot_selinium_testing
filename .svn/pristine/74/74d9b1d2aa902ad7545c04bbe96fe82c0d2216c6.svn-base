package au.wow.ngbomain.tests;

import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.LTOAddOrEditObjects;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.LTOAddOrEditPage;
import au.wow.ngbomain.pages.WoWLoginPage;

import com.google.common.base.Objects;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;

public class LTOAddOrEditTest extends TestBase {
	
	//Declare and initialize the logger, status, sql and page objects
		private Logger log = LogManager.getLogger(LTOAddOrEditTest.class);
		List<List<Object>> results;
		public static String mName="";
		public static String cName ="";
		public static ArrayList<String> methodList = new ArrayList<String>();
		public static  ExtentTest extLogger;
		public static ExtentReports extReport;	
		public static boolean isExceptionCaptured=false;
        int count=0;		
		int MCcount=0;
		public static WebDriver driver;
		public static XMLDataReader data;
		public static boolean isFirstTest=true;
		
		TestStatus status;
		SQLWrapper sql = new SQLWrapper(log);
		WoWLoginPage loginPage;
		LTOAddOrEditPage Page;
		Objects obj;		
		LTOAddOrEditPage objLTOAddOrEditPage;
		LTOAddOrEditObjects objLTOAddOrEdit;
		BasePage BaseObj;
		CommonFunctions common;
		StoreProperties storeprop;
		
		
		
		public LTOAddOrEditTest(){
			super.log=log;
		}
			
				
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Validate LTO Create Location in Super Market")
		public void LTOAddOrEditSM() 
		{
			
			
			methodName= new Object(){}.getClass().getEnclosingMethod().getName();
			if(LTOAddOrEditArtpreCount2==-1){
			MCcount =MCcount+11;}
			TestStatus status = getTestStatus();
			
			try {
				navToLTOAddOrEdit(status);

				//Verify the user can able to create the new lto location by clicking "Add LTO Location" button for SMKT
					
				objLTOAddOrEditPage.navigateToLTOAdd(driver);
				objLTOAddOrEditPage.createLTOSM(driver);
				objLTOAddOrEditPage.editLTOLoc(driver);
				objLTOAddOrEditPage.deleteLTOLoc(driver);
				objLTOAddOrEditPage.createNotInUseLoc(driver);
				//objLTOAddOrEditPage.validateLocCt(driver);
			
				objLTOAddOrEditPage.validatePrint(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Log out from the application;;;PASS");
				
			} catch (Exception e) {
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			}			
			
			status.assertAll();
		}
			
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Validate LTO Create Location in BigW")
		public void LTOAddOrEditBWS()
		{
			
			mName= new Object(){}.getClass().getEnclosingMethod().getName();
			if(LTOAddOrEditArtpreCount2==-1){
			MCcount =MCcount+2;}
			TestStatus status = getTestStatus();
			
			
			
			try {
				navToLTOAddOrEditBWS(status);
				//Verify the user can able to create the new lto location by clicking "Add LTO Location" button for BWS
				objLTOAddOrEditPage.navigateToLTOAdd(driver);
				objLTOAddOrEditPage.createLTOBWS(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Log out from the application;;;PASS");
			} catch (Exception e) {
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			}			
			
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Validate LTO Create Location in BWS")
		public void LTOAddOrEditBWStores()
		{	
			
			mName= new Object(){}.getClass().getEnclosingMethod().getName();
			if(LTOAddOrEditArtpreCount2==-1){
			MCcount =MCcount+2;}
			TestStatus status = getTestStatus();			
			
			try {
				navToLTOAddOrEditarticleBWSstore(status);
				//Verify the user can able to create the new lto location by clicking "Add LTO Location" button for BWS
				objLTOAddOrEditPage.navigateToLTOAdd(driver);
				objLTOAddOrEditPage.createLTOBWStores(driver);	
				htmlToExtent(cName,mName,extLogger,driver,"Log out from the application;;;PASS");
			} catch ( Exception e) {
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			}			
			
			//loginPage.logoutFromAppl(LTOAddOrEditArtScenarios, LTOAddOrEditArttestname);
			status.assertAll();
		}
		
		
				
		
		
		
		
		
		
			
	
				
		public void navToLTOAddOrEdit(TestStatus status) throws IOException, AWTException {			
		
			loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
			if(System.getProperty("store")==null){
				StoreNo = TestContext.getStringProperty("store");
				htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + TestContext.getStringProperty("store")+";;;Pass");
				log.info("---------------Launch the  Application--------------------");
				htmlToExtent(cName,mName,extLogger,driver, "---------------Launch the  Application--------------------;;;Pass");
				objLTOAddOrEditPage = loginPage.navToLTO(TestContext.getStringProperty("store"),driver);
			}else{
				storeprop.getStoreDetails(System.getProperty("store"));
				////System.out.println(store);
				StoreNo = store;
				Report_AddStep("testcase", "Login with the Store : " + store,"","", "Pass");
				//Page = loginPage.navToArticlLookUp(store,driver);
				objLTOAddOrEditPage = loginPage.navToLTO(store,driver);
			}
				
			log.info("-------------Navigate to LTO Page------------");
			htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate to LTO Page--------------------;;;Pass");
			
		}
		
	
		public void navToLTOAddOrEditBWS(TestStatus status) throws IOException, AWTException { //0858
			
			
			loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
			log.info("---------------Launch the  Application--------------------");
			htmlToExtent(cName,mName,extLogger,driver, "---------------Launch the  Application--------------------;;;Pass");
			storeprop.getStoreDetails(TestContext.getStringProperty("BWSSTORE"));
				////System.out.println("Eclipse:"+ store);
				StoreNo = store;
				htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + TestContext.getStringProperty("BWSSTORE")+";;;Pass");
				//Report_AddStep("testcase", "Login with the Store : " + TestContext.getStringProperty("BWSSTORE"),"","", "Pass");
				objLTOAddOrEditPage = loginPage.navToLTO(TestContext.getStringProperty("BWSSTORE"),driver);
			//}				
			
		}
		
		
		public void navToLTOAddOrEditarticleBWSstore(TestStatus status) throws IOException, AWTException { //5796
			
			
			loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
			log.info("---------------Launch the  Application--------------------");
			htmlToExtent(cName,mName,extLogger,driver, "---------------Launch the  Application--------------------;;;Pass");
			storeprop.getStoreDetails(TestContext.getStringProperty("BWSstore"));
				////System.out.println("Eclipse:"+ store);
				StoreNo = store;
				htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + TestContext.getStringProperty("BWSstore")+";;;Pass");
				//Report_AddStep("testcase", "Login with the Store : " + TestContext.getStringProperty("BWSstore"),"","", "Pass");
				objLTOAddOrEditPage = loginPage.navToLTO(TestContext.getStringProperty("BWSstore"),driver);
			//}
				
			
		}
		
		@BeforeMethod(alwaysRun=true)
		public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
			waitFor(2);
			initializeTestcontext();
			System.out.println("test1 - beforemethod");
			isExceptionCaptured=false;
			log.info("Loading Testdata for the test case: " + m9.getName().toString());
			data.getTCNameFromChildren(m9.getName().toString().trim());
			if(isFirstTest){
				driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
			}else{
				String title = driver.getCurrentUrl();
				if(title.contains("logginOut"))
				{
					driver.navigate().refresh();
					TimeUnit.SECONDS.sleep(5);
				}else{
					driver.navigate().refresh();
					TimeUnit.SECONDS.sleep(5);
					if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
					{
						if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
							WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
							scrolltoElement(home,driver);
							home.click();
							TimeUnit.SECONDS.sleep(5);
							loginPage.Logout(RoutinesArtScenarios, RoutinesArttestname, driver);
							driver.navigate().refresh();
							TimeUnit.SECONDS.sleep(5);}
					}
				}
			}
				isFirstTest=false;
				//driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver); 
				setDriver(driver);
			testcontext.setAttribute("WebDriver", driver);
			testcontext.setAttribute("Customreports", this.customreport);
			customreport.startTest(m9.getName().toString());
			initializeTestStatus();
			reportPath = new File(TestContext.getStringProperty("reportPath"));
			LTOAddOrEditArttestname = m9.getName().toString().trim();
			LTOAddOrEditArttestdesc = m9.getAnnotation(Test.class).description();

			//obj = PageFactory.initElements(this.driver, Objects.class);
			objLTOAddOrEdit = PageFactory.initElements(driver, LTOAddOrEditObjects.class);
			objLTOAddOrEditPage = PageFactory.initElements(driver, LTOAddOrEditPage.class);
				
			//objInStoreDisplayPromotionsObjects = PageFactory.initElements(this.driver, InStoreDisplayPromotionsObjects.class);
			BaseObj = PageFactory.initElements(driver, BasePage.class);
			common = PageFactory.initElements(driver, CommonFunctions.class);
			storeprop = PageFactory.initElements(driver, StoreProperties.class);
			
			Date ppStartdat1 = new Date();
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			String formattedDatepp = dateFormat.format(ppStartdat1);
			////System.out.println(formattedDatepp); // 12/01/2011 4:48:16 PM
			LTOAddOrEditArtStartdat = formattedDatepp;
			
			
                
                 mName=m9.getName().toString().trim();			
     			if(!methodList.contains(m9.getName().toString().trim())){
     			methodList.add(m9.getName().toString().trim());
     			extLogger = extReport.startTest(m9.getName().toString().trim());
     			}


		}
		
		@BeforeClass
		public void loadXMLFile(){	
			//initializeTestcontext();
			System.out.println("test1 - Beforeclass");
			data = new XMLDataReader(log);
			customreport=new CustomExtentReports();
			log.info("Loading data for the class: " );
			data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\LTOAddOrEdit.xml");
			customreport.createExtentReport();
			cName=this.getClass().getSimpleName();
			reportPath = new File(TestContext.getStringProperty("reportPath"));			
			extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
			classList.add(this.getClass().getSimpleName());


		}
		
		
		
		@AfterClass(alwaysRun=true)
		public void tearDown() throws IOException, ParseException{
			waitFor(1);
			System.out.println("afterclass");
			sceCtMap.put(cName+"_totalCt", methodList.size());
			sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
			sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
			tcCt.put(this.getClass().getSimpleName().toString(), MCcount);
			////System.out.println(extentList);
			////System.out.println(methodList);
            extReport.endTest(extLogger);
			extReport.flush();
			removeDriver();
			
			
			//LTOAddOrEditArtModules.put(Pp1className, LTOAddOrEditArtScenarios);
			waitFor(1);
			moduleName.put("Modules", LTOAddOrEditArtModules);
			waitFor(1);
			Date ppModEnd2 = new Date();
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			LTOAddOrEditArtenddateex = dateFormat.format(ppModEnd2);

			////System.out.println(LTOAddOrEditArtenddateex);
			waitFor(2);
			int LTOAddOrEditArtM=MCcount;
			LTOAddOrEditArtMC=""+LTOAddOrEditArtM;
			waitFor(2);
			////System.out.println("productlookup - " +LTOAddOrEditArtMC);
			waitFor(2);
				
		}

		@AfterMethod(alwaysRun=true)
		protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {
			System.out.println("AffterMethod");
			extReport.endTest(extLogger);
			extReport.flush();
			try{
				if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
					htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;INFO");	
					result9.removeAttribute("isFail");
				}}catch(Exception e ){
					////System.out.println();
				
				}
			waitFor(1);
			Date ppMEndDate1 = new Date();
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			LTOAddOrEditArtMEndDate = dateFormat.format(ppMEndDate1);
			////System.out.println(LTOAddOrEditArtMEndDate); // 12/01/2011 4:48:16 PM
			String lTOAddOrEditArtTime = LTOAddOrEditArttestdesc +";"+ LTOAddOrEditArtStartdat +";" + LTOAddOrEditArtMEndDate;

			LTOAddOrEditArtTime.put(LTOAddOrEditArttestname, lTOAddOrEditArtTime);
			//Report_AddStep("testcase", "Running Completed Status","","", getResultStatusName(result.getStatus()));
			waitFor(4);
			
			closeDriver(driver);
			customreport.getExtentReport().endTest(customreport.getExtentTest());
			customreport.getExtentReport().flush();
			waitFor(1);
			
			if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info")){
				int cnt = LTOAddOrEditArtpreCount2+1;
				htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
				LTOAddOrEditArtpreCount2++;
			}
			waitFor(1);
			if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail") && LTOAddOrEditArtpreCount2!=reCount){
				waitFor(1);
				LTOAddOrEditArtTime.removeAll(LTOAddOrEditArttestname);
				waitFor(1);
				LTOAddOrEditArtScenarios.removeAll(LTOAddOrEditArttestname);
			}
			waitFor(1);
			if(LTOAddOrEditArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass")){
				LTOAddOrEditArtpreCount2=-1;
			}
			waitFor(2);
			
		}
		
		
}


