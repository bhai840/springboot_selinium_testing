package au.wow.ngbomain.tests;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeClass;

import java.awt.AWTException;
import java.awt.Robot;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.SkipException;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import org.yaml.snakeyaml.emitter.ScalarAnalysis;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;

import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.ArticleDetailsObjects;
import au.wow.ngbomain.objects.ArticleLookUpObjects;
import au.wow.ngbomain.objects.EnhancedArticleLookUpObjects;
import au.wow.ngbomain.objects.InstoreOMAObject;
import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbomain.pages.EnhancedArticleLookUpPage;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.InstoreOMAPage;
import au.wow.ngbomain.pages.WoWLoginPage;

public class InstoreOMATest extends TestBase{

	//Declare and initialize the logger, status, sql and page objects
	private Logger log = LogManager.getLogger(InstoreOMATest.class);
	List<List<Object>> results;
	List<List<Object>> results1;
	TestStatus status;
	SQLWrapper sql = new SQLWrapper(log);
	WoWLoginPage loginPage;
	InstoreOMAPage objInstoreOMAPage;
	InstoreOMAObject objInstoreOMAObjects;
	BasePage BaseObj;
	CommonFunctions common;
	StoreProperties storeprop;			
	List<List<Object>> result;
	List<List<Object>> result_temp;
	public static XMLDataReader data;

	
	public static String mName="";
	public static String cName ="";
	public static ArrayList<String> methodList = new ArrayList<String>();
	public static  ExtentTest extLogger;
	public static ExtentReports extReport;	
	public static boolean isExceptionCaptured=false;
    int count=0;		
	int MCcount=0;
	public static WebDriver driver;
	public static boolean isFirstTest=true;
	
	public String returnedString;
	
	String freshfood = "('25','30','40','45','47','55')";
	String nonfreshfood = "('20','27','05','15','28','10','00')";
	
	
	public InstoreOMATest(){
		super.log=log;
	}
	
	public void deletePromotionTable() throws SQLException{
		
		List<List<Object>> deleteResult = new ArrayList<List<Object>>();
		String deletePromo = data.getText("deleteQuery");
		deleteResult = sql.executeQuery(getContext(), deletePromo);	
		
	}
		
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Create Instore Other Markdown Advertised promotion using article number for Non-fresh food")
	public void instoreOMANFF()//throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			deletePromotionTable();
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreOMAPage.createInstoreOMA(objInstoreOMAObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Create Instore Other Markdown Advertised promotion using description for Non-fresh food")
	public void instoreOMANFFdesc() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			do{
				String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), articles_sql);
				if(results.size()!=0)
				{
					int num = common.RandomFromDB(results);
					String  ranArticle = results.get(num).get(1).toString();
					objInstoreOMAObjects.article.clear();
					objInstoreOMAObjects.article.sendKeys(ranArticle);
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver, "***Fetching Non-fresh food Articles***;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver, "Article selected is:"+ ranArticle+";;;Pass");
					String currentDate=null;
					objInstoreOMAObjects.endDate.clear();
					currentDate = formatDate1(new Date());
					htmlToExtent(cName,mName,extLogger,driver, "Other Markdown Advertised Promotion Start Date is: "+currentDate+";;;Pass");
					String endDate=null;
					endDate = common.AddDate(common.ConvertdateFormatddmmyy(currentDate), 30);
					objInstoreOMAObjects.endDate.sendKeys(endDate);
					objInstoreOMAObjects.ClickOutside.click();
					htmlToExtent(cName,mName,extLogger,driver, "Other Markdown Advertised Promotion End Date is: "+endDate+";;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Max duration is: 31 days;;;Pass");
					waitForJSandJQueryToLoad(driver);
					objInstoreOMAObjects.Advertised.click();
					waitForJSandJQueryToLoad(driver);
					waitFor(1);
					objInstoreOMAObjects.searchAndAdd.click();
					htmlToExtent(cName,mName,extLogger,driver,"Search and Add button is clicked;;;Pass");
					waitForJSandJQueryToLoad(driver);
					
					try{
						if(driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).isDisplayed()){
							driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).click();
							objInstoreOMAObjects.addtolist.click();
							
						}
					}catch(Exception e){
						
					}


					if(isDisplayed(objInstoreOMAObjects.nodatafound))
					{
						htmlToExtent(cName,mName,extLogger,driver,"No data found: searching another article;;Fail;Pass");
					}
					else
					{
						//	if(isDisplayed(objInstoreOMAObjects.checkbox))
						//	{
						//		objInstoreOMAObjects.checkbox.click();
						//		objInstoreOMAObjects.addtolist.click();
						htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");
						//	}
						//	else
						//	{
						//	htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");
						//	}
					}	
				}
			}while(isDisplayed(objInstoreOMAObjects.nodatafound));
			returnedString = objInstoreOMAPage.createInstoreOMAdesc(objInstoreOMAObjects,driver);
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Create Instore Other Markdown Advertised promotion using article number for Fresh food")
	public void instoreOMAFF()// throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("freshfood", freshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreOMAPage.createInstoreOMA(objInstoreOMAObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Create Instore Other Markdown Advertised promotion using description for Fresh food")
	public void instoreOMAFFdesc() //throws IOException, AWTException, SQLException,  ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			do{
				String articles_sql = data.getText("articlesfresh").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), articles_sql);
				if(results.size()!=0)
				{
					int num = common.RandomFromDB(results);
					String  ranArticle = results.get(num).get(1).toString();
					objInstoreOMAObjects.article.clear();
					ranArticle = "Chicken Sandwich Schnitzel";
					objInstoreOMAObjects.article.sendKeys(ranArticle);
					waitForJSandJQueryToLoad(driver);
					htmlToExtent(cName,mName,extLogger,driver, "***Fetching Fresh food Articles***;;;Pass");
					htmlToExtent(cName,mName,extLogger,driver, "Article selected is:"+ ranArticle+";;;Pass");
					String currentDate=null;
					objInstoreOMAObjects.endDate.clear();
					currentDate = formatDate1(new Date());
					htmlToExtent(cName,mName,extLogger,driver, "Other Markdown Advertised Promotion Start Date is: "+currentDate+";;;Pass");
					String endDate=null;
					endDate = common.AddDate(common.ConvertdateFormatddmmyy(currentDate), 30);
					objInstoreOMAObjects.endDate.sendKeys(endDate);
					objInstoreOMAObjects.ClickOutside.click();
					htmlToExtent(cName,mName,extLogger,driver, "Other Markdown Advertised Promotion End Date is: "+endDate+";;;Pass");
					htmlToExtent(cName,mName,extLogger,driver,"Max duration is: 31 days;;;Pass");
					waitForJSandJQueryToLoad(driver);
					objInstoreOMAObjects.Advertised.click();
					waitForJSandJQueryToLoad(driver);
					waitFor(1);
					objInstoreOMAObjects.searchAndAdd.click();
					htmlToExtent(cName,mName,extLogger,driver,"Search and Add button is clicked;;;Pass");
					waitForJSandJQueryToLoad(driver);
					
					try{
						if(driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).isDisplayed()){
							driver.findElement(By.xpath("//*[@id='articleSearchTbody']/tr[2]/td[4]")).click();
							objInstoreOMAObjects.addtolist.click();
							
						}
					}catch(Exception e){
						
					}


					if(isDisplayed(objInstoreOMAObjects.nodatafound))
					{
						htmlToExtent(cName,mName,extLogger,driver,"No data found: searching another article;;Fail;Pass");
					}
					else
					{

						htmlToExtent(cName,mName,extLogger,driver,"Article added to draft;;;Pass");

					}	
				}
			}while(isDisplayed(objInstoreOMAObjects.nodatafound));
			objInstoreOMAPage.createInstoreOMAdesc(objInstoreOMAObjects,driver);	

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	public void navToInstoreOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "--------Login into Application as IT Admin-----------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreOMAPage = loginPage.navToInstoreOMAPromotiontester90(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreOMAPage = loginPage.navToInstoreOMAPromotiontester90(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "------------Navigate To Instore Other Markdown Promotion Page-----------;;;Pass");
			objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Create instore Other Markdown Advertised promotion using PBD Article")
	public void instorePBDOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstorePBDOMA(status); 
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				htmlToExtent(cName,mName,extLogger,driver, "Article selected is: " + ranArticle+";;;Pass");
				returnedString = objInstoreOMAPage.instorePBDOMA(objInstoreOMAObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	public void navToInstorePBDOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
		//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreOMAPage = loginPage.navToInstoreOMAPromotiontester90(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreOMAPage = loginPage.navToInstoreOMAPromotiontester90(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "-----------Navigate To Instore Other Markdown Promotion Page----------;;;Pass");
			objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}

	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Department Manager for Other Markdown Advertised Promotion")
	public void MaxPercentageDMOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreDMOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreOMAPage.MaxPercentageDMOMA(objInstoreOMAObjects,ranArticle,driver);		
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Team Member for Other Markdown Advertised Promotion")
	public void MaxPercentageTMOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreTMOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same function in Department Manager*/
				returnedString = objInstoreOMAPage.MaxPercentageDMOMA(objInstoreOMAObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Customer Assistance for Other Markdown Advertised Promotion")
	public void MaxPercentageCAOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreCAOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same function in Department Manager*/
				returnedString = objInstoreOMAPage.MaxPercentageDMOMA(objInstoreOMAObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Office Assistance for Other Markdown Advertised Promotion")
	public void MaxPercentageOAOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOAOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same function in Department Manager*/
				returnedString = objInstoreOMAPage.MaxPercentageDMOMA(objInstoreOMAObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Stock take manager for Other Markdown Advertised Promotion")
	public void MaxPercentageSTMOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreSTMOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same function in Tester90*/
				returnedString = objInstoreOMAPage.createInstoreOMA(objInstoreOMAObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Office Supervisor for Other Markdown Advertised Promotion")
	public void MaxPercentageOSOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOSOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				/*Using the same function in Department Manager*/
				returnedString = objInstoreOMAPage.MaxPercentageDMOMA(objInstoreOMAObjects,ranArticle,driver);	
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Store Manager for Other Markdown Advertised Promotion")
	public void MaxPercentageSMOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreSMOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("articlesfresh").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreOMAPage.MaxPercentageSMOMA(objInstoreOMAObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum % for Business Review for Other Markdown Advertised Promotion")
	public void MaxPercentageBROMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreBROMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			htmlToExtent(cName,mName,extLogger,driver,"Checking whether Advertised promotion is present or Not;;;Pass");
		/*	if(isDisplayed(objInstoreOMAObjects.Advertised))
			{
				htmlToExtent(cName,mName,extLogger,driver,"Local Marketing promotion Found;;;Pass");
				loginPage.Logout(inStoreOMAArtScenarios,inStoreOMAArttestname,driver);
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Login as IT Admin;;;Pass");
				loginPage.tester90Login(getContext().getStringProperty("store"),driver);
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Disabling Local Marketing promotion for Business Review role in application settings;;;Pass");
				objInstoreOMAPage.DisableBROMA(objInstoreOMAObjects,driver);
				htmlToExtent(cName,mName,extLogger,driver,"Local Marketing promotion for Business Review role is disabled;;;Pass");
				waitForJSandJQueryToLoad(driver);
				loginPage.Logout(inStoreOMAArtScenarios,inStoreOMAArttestname,driver);
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Login as Business Review;;;Pass");
				loginPage.BRLogin(getContext().getStringProperty("store"),driver);
				waitForJSandJQueryToLoad(driver);
				driver.navigate().to("http://ngbo-acpt.gss.woolworths.com.au/StoreCentral/1005/instore/otherMarkdownOnPageLoad.htm");
				waitForJSandJQueryToLoad(driver);;
*/
				if(isDisplayed(objInstoreOMAObjects.Advertised))
				{
					htmlToExtent(cName,mName,extLogger,driver,"Disabling Business Review role in application settings;;;Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"Business Review User has only View Access;;;Pass"); 
				}
			
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	public void navToInstoreDMOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------Login into Application as Dept Manager--------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreOMAPage = loginPage.navToInstorePromotionDMOMA(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------;;;Pass");
		objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreTMOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------Login into Application as Team Member-----------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreOMAPage = loginPage.navToInstorePromotionTMOMA(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------------;;;Pass");
		objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreCAOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "----------Login into Application as Customer Assistance----------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreOMAPage = loginPage.navToInstorePromotionCAOMA(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------------;;;Pass");
		objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreOAOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "--------Login into Application as Office Assistance---------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreOMAPage = loginPage.navToInstorePromotionOAOMA(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------------;;;Pass");
		objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreOSOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------Login into Application as Office Supervisor----------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreOMAPage = loginPage.navToInstorePromotionOSOMA(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------------;;;Pass");
		objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreSMOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "----------Login into Application as Store Manager--------;;;Pass");
		
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		objInstoreOMAPage = loginPage.navToInstorePromotionSMOMA(store,driver);
		
		htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------------;;;Pass");
		objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreSTMOMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "--------Login into Application as Stock Take manager---------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store: " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreOMAPage = loginPage.navToInstorePromotionSTMOMA(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store: " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreOMAPage = loginPage.navToInstorePromotionSTMOMA(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate To Instore Other Markdown Promotion Page--------------------;;;Pass");
			objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	public void navToInstoreBROMA(TestStatus status) throws IOException, AWTException {
		log.info("---------------Login into Application--------------------");
		htmlToExtent(cName,mName,extLogger,driver, "---------Login into Application as Business Review----------;;;Pass");
		loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
		
		if(System.getProperty("store")==null)
		{
			StoreNo = getContext().getStringProperty("store");
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
			objInstoreOMAPage = loginPage.navToInstorePromotionBROMA(getContext().getStringProperty("store"),driver);
		}
		else
		{
			storeprop.getStoreDetails(System.getProperty("store"));
			//System.out.println(store);
			StoreNo = store;
			htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
			//articleLookUpPage = loginPage.navToArticlLookUp(store);
			objInstoreOMAPage = loginPage.navToInstorePromotionBROMA(store,driver);
		}
			htmlToExtent(cName,mName,extLogger,driver, "-----------Navigate To Instore Other Markdown Promotion Page---------;;;Pass");
			objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects,driver);
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Enusre the error message when user provide greater than Maximum % in Other Markdown Advertised Promotion")
	public void MaxPercentErrorOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}
		
		TestStatus status = getTestStatus();
		try{
		for(int i=0;i<=7;i++){
			if(i ==0) 
			{
				navToInstoreOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for IT Admin verified successfully;;;Pass");				
			}
			else if (i ==1){
				navToInstoreDMOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Department Manager verified successfully;;;Pass");				
			}
			else if (i ==2){
				navToInstoreTMOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Team Member verified successfully;;;Pass");				
			}
			else if (i ==3){
				navToInstoreCAOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Customer Assistant verified successfully;;;Pass");				
			}
			else if (i ==4){
				navToInstoreOAOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Office Assistance verified successfully;;;Pass");				
			}
			else if (i ==5){
				navToInstoreOSOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Office Supervisor verified successfully;;;Pass");				
			}
			else if (i ==6){
				navToInstoreSMOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers1();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Store Manager verified successfully;;;Pass");				
			}
			else if (i ==7){
				navToInstoreSTMOMA(status);
				objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);
				navToUsers();
				htmlToExtent(cName,mName,extLogger,driver,"Error Message for Stock Take Manager verified successfully;;;Pass");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();}
	
	public void navToUsers() throws IOException, AWTException, SQLException,  ParseException{
		
	//	if(isDisplayed(objInstoreOMAObjects.Advertised))
	///	{
			objInstoreOMAObjects.Advertised.click();
	//	}
	//	else
	///	{
	//		objInstoreOMAPage.EnableOMA(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects, driver);
			//driver.navigate().to("http://ngbo-acpt.gss.woolworths.com.au/StoreCentral/1005/instore/otherMarkdownOnPageLoad.htm");
	//	}
		
		String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String  ranArticle = results.get(num).get(0).toString();
			returnedString = objInstoreOMAPage.createInstoreErrorOMA(objInstoreOMAObjects,ranArticle,driver);		
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
		}		
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
		}
	}
	public void navToUsers1() throws IOException, AWTException, SQLException,  ParseException{
		
	//	if(isDisplayed(objInstoreOMAObjects.Advertised))
	//	{
			objInstoreOMAObjects.Advertised.click();
	//	}
	//	else
	//	{
	///		objInstoreOMAPage.EnableOMA(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			objInstoreOMAPage.clickOnInstoreOMA(objInstoreOMAObjects, driver);
			//driver.navigate().to("http://ngbo-acpt.gss.woolworths.com.au/StoreCentral/1005/instore/otherMarkdownOnPageLoad.htm");
	//	}
		
		//String articles_sql = data.getText("articles");
		String articles_sql = data.getText("articles").replace("nonfreshfood", nonfreshfood);
			results = sql.executeQuery(getContext(), articles_sql);	
		if(results.size()!=0)
		{
			int num = common.RandomFromDB(results);
			String  ranArticle = results.get(num).get(0).toString();
			returnedString = objInstoreOMAPage.createInstoreError1OMA(objInstoreOMAObjects,ranArticle,driver);	
			if(returnedString.equals("nodata")){
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
				return;
			}
		}		
		else
		{
			htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
		}
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify de-activate in Active and Future Promotion in Other Markdown Advertised promotion")
	public void deactivateRecordOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.deactivateRecord(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify Create Other Markdown Advertised Promotion is Allowed for Deleted articles")
	public void createdeletedarticleOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			String articles_sql = data.getText("deletedarticles");
			results = sql.executeQuery(getContext(), articles_sql);	
			if(results.size()!=0)
			{
				int num = common.RandomFromDB(results);
				String  ranArticle = results.get(num).get(0).toString();
				returnedString = objInstoreOMAPage.createInstoreOMA(objInstoreOMAObjects,ranArticle,driver);
				if(returnedString.equals("nodata")){
					htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
					return;
				}
			}		
			else
			{
				htmlToExtent(cName,mName,extLogger,driver,"No data found;;;Fail");
			}

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=1,description = "Validate user can't access the Advertised Promotion type if the option is disabled in application settings")
	public void disabledAdvtPromotion() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);;
			if(isDisplayed(objInstoreOMAObjects.Advertised))
			{
				htmlToExtent(cName,mName,extLogger,driver,"***Trying to disable Advertised promotion in application settings***;;;Pass");
				objInstoreOMAPage.DisableOMA(objInstoreOMAObjects,driver);
				waitForJSandJQueryToLoad(driver);;
				objInstoreOMAObjects.Pricing.click();
				waitForJSandJQueryToLoad(driver);
				objInstoreOMAObjects.InstorePromotions.click();
				waitForJSandJQueryToLoad(driver);
				objInstoreOMAObjects.OtherMarkdownPromotions.click();
				//driver.navigate().to("http://ngbo-acpt.gss.woolworths.com.au/StoreCentral/1005/instore/otherMarkdownOnPageLoad.htm");
				if(isDisplayed(objInstoreOMAObjects.Advertised)){
					htmlToExtent(cName,mName,extLogger,driver,"Trying to disable Advertised promotion in application settings;;;Pass");
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver,"User is not able to access Advertised promotion because settings is disabled;;;Pass");
				}
			}

			objInstoreOMAPage.EnableOMA(objInstoreOMAObjects, driver);

			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify Filters in Active and Future Promotion in Other Markdown Advertised promotion")
	public void verifyactivepromotionfiltersOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+1;
		}

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.verifyarticleFilterActiveOMA(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);
			htmlToExtent(cName,mName,extLogger,driver, "Filters for Active and Future Promotion in Other Markdown Advertised promotion is verified successfully;;;Pass"); 
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
	
	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify Search and Filters in Past Promotion in Other Markdown Advertised promotion")
	public void SearchAndFilterPastOMA() //throws SQLException, IOException, AWTException, ParseException
	{
		if(inStoreOMAArtpreCount2==-1)
		{
			MCcount =MCcount+2;
		} 

		TestStatus status = getTestStatus();
		try{
			navToInstoreOMA(status);
			objInstoreOMAPage.SearchAndFilterPastOMA(objInstoreOMAObjects,driver);
			waitForJSandJQueryToLoad(driver);
			htmlToExtent(cName,mName,extLogger,driver, "Search and Filters in Past Promotions is Verified Successfully;;;Pass"); 
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
		}catch (Exception e){
			isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
		}
		status.assertAll();
	}
			
	//--------------------------------pradeep-----------------------------------
	//-------------------------------------NON FRESH FOODS ARTICLES-------------------------------------------

	/*	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Store Manager for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_SMNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Store Manager role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Department Manager for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_DMNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreDMOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Department Manager role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Team Member for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_TMNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreTMOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Team Member role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Office Assistant for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_OANF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreOAOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Office Assistant role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Office Supervisor for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_OSNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreOSOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Office Supervisor role is created;;;Pass");
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Customer Assistant for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_CANF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreCAOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Customer Assistant role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Stock Take Manager for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_STMNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSTMOMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Non Fresh food article under Stock Take Managerrole is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Business Review for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_BRNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreBROMA(status);
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Business Review users not able to add promotion to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify error message for maximum duration for NON FRESH FOOD article in OTHER MARKDOWN - ADVERTISEMENT")
		public void MaxDurationOMAdvt_ErrNF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}
			
			TestStatus status = getTestStatus();
		//	String users[] = new String[6];
			try{
			for(int i=0;i<=6;i++){
				if(i ==0) {
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STORE MANAGER-----------------;;;Pass");
				navToInstoreSMOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Store Manager;;;Pass");
			}else if (i ==1){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE ASSISTANT-----------------;;;Pass");
				navToInstoreOAOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Assistant;;;Pass");
			}
			else if (i ==2){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE SUPERVISOR-----------------;;;Pass");
				navToInstoreOSOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Supervisor;;;Pass");
			}else if (i ==3){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS TEAM MEMBER-----------------;;;Pass");
				navToInstoreTMOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Team Member;;;Pass");
			}else if (i ==4){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STOCKTAKE MANAGER-----------------;;;Pass");
				navToInstoreSTMOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for StockTake Manager;;;Pass");
			}else if (i ==5){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS CUSTOMER ASSISTANT-----------------;;;Pass");
				navToInstoreCAOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Customer Assistant;;;Pass");
			}else if (i ==6){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS DEPARTMENT MANAGER-----------------;;;Pass");
				navToInstoreDMOMA(status);
				navToUsers_DurationError();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Department Manager;;;Pass");
		}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));}
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();}
		
		
		//-------------------------------------------FRESH FOOD------------------------------------------------------------
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Store Manager for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_SMFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Store Manager role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Department Manager for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_DMFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreDMOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 6,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Department Manager role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Team Member for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_TMFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreTMOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString= objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Team Member role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Stock Take Manager for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_STMFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSTMOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Stock Take Manager role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Customer Assistant for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_CAFF() //throws IOException, AWTException, SQLException,  ParseException
		{	
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreCAOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Customer Assistant role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Office Assistant for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_OAFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreOAOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Office Assistant role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Office Supervisor for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_OSFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreOSOMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Fresh food article under Office Supervisor role is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify the maximum duration for Business Review for OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_BRFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreBROMA(status);
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString = objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article, 0,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}

				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}
				htmlToExtent(cName,mName,extLogger,driver,"Business Review users not able to add promotion to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify error message for maximum duration for NON FRESH FOOD article under OTHER MARKDOWN - ADVERTISEMENT Promotion")
		public void MaxDurationOMAdvt_ErrFF() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}
			
			TestStatus status = getTestStatus();
		//	String users[] = new String[6];
			try{
			for(int i=0;i<=6;i++){
				if(i ==0) {
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STORE MANAGER-----------------;;;Pass");
				navToInstoreSMOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Store Manager;;;Pass");
			}else if (i ==1){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE ASSISTANT-----------------;;;Pass");
				navToInstoreOAOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Assistant;;;Pass");				
			}
			else if (i ==2){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS OFFICE SUPERVISOR-----------------;;;Pass");
				navToInstoreOSOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Office Supervisor;;;Pass");
			}else if (i ==3){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS TEAM MEMBER-----------------;;;Pass");
				navToInstoreTMOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Team Member;;;Pass");				
			} else if (i ==4){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS STOCKTAKE MANAGER-----------------;;;Pass");
				navToInstoreSTMOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for StockTake Manager;;;Pass");				
			}else if (i ==5){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS CUSTOMER ASSISTANT-----------------;;;Pass");
				navToInstoreCAOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Customer Assistant;;;Pass");
			}else if (i ==6){
				htmlToExtent(cName,mName,extLogger,driver,"-----------------LOGIN AS DEPARTMENT MANAGER-----------------;;;Pass");
				navToInstoreDMOMA(status);
				navToUsers_DurationError2();
				waitForJSandJQueryToLoad(driver);
				htmlToExtent(cName,mName,extLogger,driver,"Error Message is Successfully displayed for Department Manager;;;Pass");
			}
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));}
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();}
		//---------------------------------------SPECIAL ARTICLE-----------------------------------------------------
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify OTHER MARKDOWN - ADVERTISEMENT promotion can be created for Blocked Procurement articles")
		public void BlockedProcurement() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					Article = "11251";
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					returnedString =objInstoreOMAPage.MaxDuration(objInstoreOMAObjects, Article,30,driver);
					if(returnedString.equals("nodata")){
						htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
						return;
					}
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Blocked Procurement article is created;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify OTHER MARKDOWN - ADVERTISEMENT Promotion is blocked if ALC status is End Of Stock")
		public void ESArticles() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					//objInstorePage.MaxDuration(objInstoreObjects, Article, 1);
					objInstoreOMAPage.BlockedArticle(objInstoreOMAObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for ALC Status = ES article is not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify OTHER MARKDOWN - ADVERTISEMENT Promotion is blocked if ALC status is End Of Stock Confirmation")
		public void ECArticles() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					objInstoreOMAPage.BlockedArticle(objInstoreOMAObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for ALC Status = EC articls is not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify OTHER MARKDOWN - ADVERTISEMENT Promotion is blocked if PS status is Product Recall")
		public void ProductRecallArticles() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					objInstoreOMAPage.BlockedArticle(objInstoreOMAObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Recalled article is not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},priority=0,description = "Verify OTHER MARKDOWN - ADVERTISEMENT Promotion is blocked if PS status is Ready for archiving")
		public void ReadyForArchiving() //throws IOException, AWTException, SQLException,  ParseException
		{
			if(inStoreOMAArtpreCount2==-1){
				MCcount =MCcount+1;}

			TestStatus status = getTestStatus();
			try{
				navToInstoreSMOMA(status);
				String Art = data.getText("article");
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					objInstoreOMAPage.BlockedArticle(objInstoreOMAObjects, Article,driver);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}	
				htmlToExtent(cName,mName,extLogger,driver,"Promotion for Ready for artchiving articles are not added to draft;;;Pass");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(inStoreOMAArtScenarios,inStoreOMAArttestname,driver));
			}catch (Exception e){
				isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				htmlToExtent(cName,mName,extLogger,driver,"Logout from application;;;Pass");
			}
			status.assertAll();
		}
		
		//---------------------------------------USER FUNCTIONS--------------------------------------------------------------	
			public void navToUsers_DurationError() throws IOException, AWTException, SQLException,  ParseException{
				String Art = data.getText("articles").replace("nonfreshfood", nonfreshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					objInstoreOMAPage.MaxDuratioError(objInstoreOMAObjects,Article,driver);
					//objInstorePage.MaxDuration(objInstoreObjects, Article, 32);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}}
			
			public void navToUsers_DurationError2() throws IOException, AWTException, SQLException,  ParseException{
				String Art = data.getText("articles").replace("freshfood", freshfood);
				results = sql.executeQuery(getContext(), Art);
				if(results.size()!=0){
					int num = common.RandomFromDB(results);
					String Article = results.get(num).get(0).toString();
					objInstoreOMAPage.DeletePreArticle(objInstoreOMAObjects,driver);
					objInstoreOMAPage.MaxDuratioError(objInstoreOMAObjects,Article,driver);
					//objInstorePage.MaxDuration(objInstoreObjects, Article, 32);
				}else{
					htmlToExtent(cName,mName,extLogger,driver,"NO DATA FOUND - Please check DB;;;Fail");
				}}*/
	//----------------------------------------------------------------------
	
	@BeforeMethod(alwaysRun=true)
	public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
	waitFor(1);
	System.out.println("test1 - beforemethod");
	
	mName=m9.getName().toString().trim();			
		if(!methodList.contains(m9.getName().toString().trim())){
		methodList.add(m9.getName().toString().trim());
		extLogger = extReport.startTest(m9.getName().toString().trim());
		}

		initializeTestcontext();
	log.info("Loading Testdata for the test case: " + m9.getName().toString());
	data.getTCNameFromChildren(m9.getName().toString().trim());
	if(isFirstTest){
		driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
	}else{
		String title = driver.getCurrentUrl();
		if(title.contains("logginOut"))
		{
			driver.navigate().refresh();
			TimeUnit.SECONDS.sleep(5);
		}else{
			driver.navigate().refresh();
			TimeUnit.SECONDS.sleep(5);
			if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
			{
				if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
					WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
					scrolltoElement(home,driver);
					home.click();
					TimeUnit.SECONDS.sleep(5);
					loginPage.Logout(RoutinesArtScenarios, RoutinesArttestname, driver);
					driver.navigate().refresh();
					TimeUnit.SECONDS.sleep(5);}
			}
		}
	}
		isFirstTest=false;
		//driver=createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser"));
		setDriver(driver);
	testcontext.setAttribute("WebDriver", driver);
	testcontext.setAttribute("Customreports", this.customreport);
	customreport.startTest(m9.getName().toString());
	initializeTestStatus();
	reportPath = new File(getContext().getStringProperty("reportPath"));
	inStoreOMAArttestname = m9.getName().toString().trim();
	inStoreOMAArttestdesc = m9.getAnnotation(Test.class).description();
	htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Docker run - "+getContext().getStringProperty("isDocketRun")+"</h4></i></b>;;;Info");
	objInstoreOMAObjects = PageFactory.initElements(this.driver, InstoreOMAObject.class);
	objInstoreOMAPage = PageFactory.initElements(this.driver, InstoreOMAPage.class);
	//objInStoreDisplayPromotionsObjects = PageFactory.initElements(this.driver, InStoreDisplayPromotionsObjects.class);
	BaseObj = PageFactory.initElements(this.driver, BasePage.class);
	common = PageFactory.initElements(this.driver, CommonFunctions.class);
	storeprop = PageFactory.initElements(this.driver, StoreProperties.class);
	}

	@BeforeClass
	public void loadXMLFile(){	
	//initializeTestcontext();
	System.out.println("test1 - Beforeclass");	
	data = new XMLDataReader(log);
	customreport=new CustomExtentReports();
	log.info("Loading data for the class: " );
	data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\InstoreOMA.xml");
	customreport.createExtentReport();
	cName=this.getClass().getSimpleName();
	reportPath = new File(TestContext.getStringProperty("reportPath"));			
	extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
	classList.add(this.getClass().getSimpleName());
}

	@AfterClass(alwaysRun=true)
	public void tearDown() throws IOException, ParseException{
	waitForJSandJQueryToLoad(driver);
	System.out.println("afterclass");
	
	sceCtMap.put(cName+"_totalCt", methodList.size());
	sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
	sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
	tcCt.put(this.getClass().getSimpleName().toString(), MCcount);
	//System.out.println(extentList);
	//System.out.println(methodList);
    extReport.endTest(extLogger);
	extReport.flush();
	removeDriver();
	closeDriver(driver);
	moduleName.put("Modules", inStoreOMAArtModules);
	waitFor(1);
	int OMAArtMC=MCcount;
	inStoreOMAArtMC=""+OMAArtMC;
}

	@AfterMethod(alwaysRun=true)
	protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {
	System.out.println("AffterMethod");
	
	extReport.endTest(extLogger);
	extReport.flush();
	try{
		if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
			htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;INFO");	
			result9.removeAttribute("isFail");
		}}catch(Exception e ){
			//System.out.println();
		
		}
	
	waitFor(1);
	/*Date ppMEndDate1 = new Date();
	DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	inStoreOMAArtMEndDate = dateFormat.format(ppMEndDate1);
	//System.out.println(inStoreOMAArtMEndDate); // 12/01/2011 4:48:16 PM
	String EnhancedArtTime = inStoreOMAArttestdesc +";"+ inStoreOMAArtStartdat +";" + inStoreOMAArtMEndDate;
	
	htmlToExtent(cName,mName,extLogger,driver, "Running Completed Status;;;Pass"); 
	inStoreOMAArtTime.put(inStoreOMAArttestname, EnhancedArtTime);
	waitFor(4);
	closeDriver(driver);*/
	customreport.getExtentReport().endTest(customreport.getExtentTest());
	customreport.getExtentReport().flush();
	waitFor(1);
	if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info"))
	{
		int cnt = inStoreOMAArtpreCount2+1;
		htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
		inStoreOMAArtpreCount2++;
	}
	/*waitForJSandJQueryToLoad(driver);
	if((getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info")) && inStoreOMAArtpreCount2!=reCount)
	{
		waitForJSandJQueryToLoad(driver);
		inStoreOMAArtTime.removeAll(inStoreOMAArttestname);
		waitForJSandJQueryToLoad(driver);
		inStoreOMAArtScenarios.removeAll(inStoreOMAArttestname);
	}
	waitForJSandJQueryToLoad(driver);*/
	if(inStoreOMAArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass"))
	{
		inStoreOMAArtpreCount2=-1;
	}
	waitFor(1);
   }
}