package au.wow.ngbomain.tests;

import java.awt.AWTException;
import java.awt.Robot;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.SkipException;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import org.yaml.snakeyaml.emitter.ScalarAnalysis;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import au.wow.ngbo.utils.Retry;
import au.wow.ngbo.utils.SQLWrapper;
import au.wow.ngbo.utils.TestBase;
import au.wow.ngbo.utils.TestContext;
import au.wow.ngbo.utils.TestStatus;
import au.wow.ngbo.utils.XMLDataReader;
import au.wow.ngbomain.objects.EnhancedArticleLookUpObjects;
import au.wow.ngbomain.objects.ReceivingOrderObjects;
import au.wow.ngbo.utils.BasePage;
import au.wow.ngbo.utils.CustomExtentReports;
import au.wow.ngbomain.pages.EnhancedArticleLookUpPage;
import au.wow.ngbomain.pages.ReceivingOrderPage;
import au.wow.ngbomain.pages.CommonFunctions;
import au.wow.ngbomain.pages.WoWLoginPage;

public class ReceivingOrderTests extends TestBase {
	
	
	public static String mName="";
	public static String cName ="";
	public static ArrayList<String> methodList = new ArrayList<String>();
	public static ExtentTest extLogger;
	public static ExtentReports extReport;	
	public static boolean isExceptionCaptured=false;
	public static WebDriver driver;
	public static XMLDataReader data;
	public static boolean isFirstTest=true;
	public static String StoreNo;
	
	//Declare and initialize the logger, status, sql and page objects
			private Logger log = LogManager.getLogger(ReceivingOrderTests.class);
			List<List<Object>> orderResult;
			List<List<Object>> results;
			List<List<Object>> results1;
			List<List<Object>> results_temp;
			List<List<Object>> results_temp1;
			List<List<Object>> results_SOH;
			List<List<Object>> results_SOH1;
			TestStatus status;
			SQLWrapper sql = new SQLWrapper(log);
			WoWLoginPage loginPage;
			ReceivingOrderPage objOrderEnquiryPage;
			ReceivingOrderObjects objOrderEnquiryObjects;
			EnhancedArticleLookUpObjects objEnhancedArticleLookup;
			EnhancedArticleLookUpPage objEnhancedarticleLookUpPage;
			BasePage BaseObj;
			CommonFunctions common;
			StoreProperties storeprop;			
			List<List<Object>> result;
			List<List<Object>> result_temp;
			int OEcount=0;
			public ReceivingOrderTests(){
				super.log=log;
			}
				
			/**
			 * AL_1
			 * Verifying Department Hierarchy and Paginations
			 * @throws IOException 
			 * @throws ParseException 
			 * */
			
			
			//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Deleting existing Orders", priority = 1)
			public void deletionOfOrders() throws SQLException, IOException, AWTException, ParseException
			{
				
				TestStatus status = getTestStatus();
				navToOrderEnquiry(status);
				objOrderEnquiryPage.waitFn(driver);
				objOrderEnquiryObjects.createOrder.click();
				waitFor(2);				
				objOrderEnquiryPage.delOrder(objOrderEnquiryObjects,driver);				
				waitFor(1);
				log.info("-----------------Logout from Application------------------");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				status.assertAll();
			}
			
			public void RevertOrder(String OrderNo) //throws SQLException, IOException
			{
				try {
					String orderCheck = data.getText("revertOrder").replace("ordno", OrderNo).trim();	
					sql.executeQuery_CUD(getContext(), orderCheck);	
					//System.out.println("Reverting Order Completed");
				} catch(Exception e)
				{
					isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				} 
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Vendor through Exception by adding new article")
			public void ReceiveVendorinLineByNewEAN() //throws SQLException, IOException, AWTException, ParseException
			{

				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+12;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";					
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();	
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List<Object> res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBLCB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 4, 5);
									}
								}
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								
								objOrderEnquiryObjects.addMissingArt.click();
								waitForJSandJQueryToLoad(driver);
								String art ="";String ean ="";
								if(StoreNo.equals("1108"))
								{art = data.getText("AddMisArtno");
								ean = data.getText("AddMisEANno").trim();}
								if(StoreNo.equals("1786"))
								{art = data.getText("AddMisArtnoSIT");}
								art=art.trim();
								objOrderEnquiryObjects.enterArticle.click();
								objOrderEnquiryObjects.enterArticle.sendKeys(ean);
								objOrderEnquiryObjects.enterQty.sendKeys("1");
								objOrderEnquiryObjects.enterQty.sendKeys(Keys.ENTER);
								waitForJSandJQueryToLoad(driver);waitFor(1);
								if(objOrderEnquiryObjects.addArtContinue.isDisplayed())
								{
									objOrderEnquiryObjects.addArtContinue.click();
								}
								List f = new ArrayList(); List<List<Object>> resultart = new ArrayList<List<Object>>();
								f.add(art);f.add("1 EA");f.add("0 EA");f.add("0 EA");f.add("NA");f.add("NA");
								resultart.add(f);
								List g = new ArrayList();List<List<Object>> resultart1 = new ArrayList<List<Object>>();
								g.add(art);g.add("NA");g.add("NA");g.add("NA");g.add("NA");g.add("1 EA");g.add("1 EA");
								resultart1.add(g);
								
								String SOHsql = data.getText("artbefore").replace("ordNo",art);
								List<List<Object>> artSOHb = sql.executeQuery(getContext(), SOHsql);
								String sohh = artSOHb.get(0).get(1).toString();
								if(sohh.contains(".")){sohh=sohh.replaceAll("\\.?0+$","");}
								String om = artSOHb.get(0).get(4).toString();
								if(om.contains(".")){om = om.replaceAll("\\.?0+$","");}
								int sohval = Integer.parseInt(sohh)+(1*Integer.parseInt(om));
								sohh = ""+sohval+" "+artSOHb.get(0).get(2).toString();
								
								tempArticles.clear();
								int artcount;
								if(tempArticles.size()==0)
								{
									artcount=1;
								}else{
								artcount = (articlcount-tempArticles.size())+1;
								if(artcount==articlcount){
									artcount = artcount--;
								}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","line", results,displayArt,
										OrderNo,articlcount,tempArticles,driver,art,resultart,"newArt","",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,art,"");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								articlcount=articlcount+1;
								int count = articlcount-displayArt.size();//for adding 1 new article
								sizee=sizee+1; //for adding 1 new article
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									//articlcount=articlcount+1;//for adding 1 new article
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									for(int i=0;i<editArtListApp1.size();i++)
									{
										if(art.equals(editArtListApp1.get(i).get(0).toString()))
										{
											editArtListApp1.remove(i);
											break;
										}
									}
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,
											driver,"newArt",resultart1,art,"");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);

								SOHsql = data.getText("art").replace("ordNo",art);
								List<List<Object>> artSOHa  = sql.executeQuery(getContext(), SOHsql);
								if(artSOHa.get(0).get(1).toString().equals(sohh))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Added Article SOH is equal;"+artSOHa.get(0).get(1).toString()+";"+sohh+";Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Added Article SOH is mismatched;"+artSOHa.get(0).get(1).toString()+";"+sohh+";Fail");
								}
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Vendor through Exception by adding new article")
			public void ReceiveVendorinExceptionByNewArt() //throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+19;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";					
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();	
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List<Object> res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 4, 5);
									}
								}
								/*int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/

								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								
								objOrderEnquiryObjects.addMissingArt.click();
								waitForJSandJQueryToLoad(driver);
								String art ="";
								if(StoreNo.equals("1108"))
								{art = data.getText("AddMisArtno");}
								if(StoreNo.equals("1786"))
								{art = data.getText("AddMisArtnoSIT");}
								art=art.trim();
								objOrderEnquiryObjects.enterArticle.sendKeys(art);
								objOrderEnquiryObjects.enterQty.sendKeys("1");
								objOrderEnquiryObjects.enterQty.sendKeys(Keys.ENTER);
								waitForJSandJQueryToLoad(driver);waitFor(1);
								if(objOrderEnquiryObjects.addArtContinue.isDisplayed())
								{
									objOrderEnquiryObjects.addArtContinue.click();
								}
								List f = new ArrayList(); List<List<Object>> resultart = new ArrayList<List<Object>>();
								f.add(art);f.add("1 EA");f.add("0 EA");f.add("0 EA");f.add("NA");f.add("NA");
								resultart.add(f);
								List g = new ArrayList();List<List<Object>> resultart1 = new ArrayList<List<Object>>();
								g.add(art);g.add("NA");g.add("NA");g.add("NA");g.add("NA");g.add("1 EA");g.add("1 EA");
								resultart1.add(g);
								
								String SOHsql = data.getText("artbefore").replace("ordNo",art);
								List<List<Object>> artSOHb = sql.executeQuery(getContext(), SOHsql);
								String sohh = artSOHb.get(0).get(1).toString();
								if(sohh.contains(".")){sohh=sohh.replaceAll("\\.?0+$","");}
								String om = artSOHb.get(0).get(4).toString();
								if(om.contains(".")){om = om.replaceAll("\\.?0+$","");}
								int sohval = Integer.parseInt(sohh)+(1*Integer.parseInt(om));
								sohh = ""+sohval+" "+artSOHb.get(0).get(2).toString();
								
								tempArticles.clear();
								int artcount;
								if(tempArticles.size()==0)
								{
									artcount=1;
								}else{
								artcount = (articlcount-tempArticles.size())+1;
								if(artcount==articlcount){
									artcount = artcount--;
								}}
								
								
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,art,resultart,"newArt","",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,art,"");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								articlcount=articlcount+1;
								int count = articlcount-displayArt.size();//for adding 1 new article
								sizee=sizee+1; //for adding 1 new article
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									//articlcount=articlcount+1;//for adding 1 new article
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									for(int i=0;i<editArtListApp1.size();i++)
									{
										if(art.equals(editArtListApp1.get(i).get(0).toString()))
										{
											editArtListApp1.remove(i);
											break;
										}
									}
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,
											driver,"newArt",resultart1,art,"");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);

								SOHsql = data.getText("art").replace("ordNo",art);
								List<List<Object>> artSOHa  = sql.executeQuery(getContext(), SOHsql);
								if(artSOHa.get(0).get(1).toString().equals(sohh))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Added Article SOH is equal;"+artSOHa.get(0).get(1).toString()+";"+sohh+";Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Added Article SOH is mismatched;"+artSOHa.get(0).get(1).toString()+";"+sohh+";Fail");
								}
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Vendor ASN in Full where multiple PO is converted into single ASN")
			public void ReceivingVendorASNinFullMulPOtoSingleASNOption() throws SQLException, IOException, AWTException, ParseException
			{

				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+15;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
			

				String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String Order1=results.get(0).get(0).toString();
				String OrderNo=results.get(0).get(0).toString();
				//String OrderNo1=results.get(1).get(0).toString();
				String ebeln=results.get(0).get(1).toString();
				String oi ="";String OrderNo3="";
				for(int i=0;i<results.size();i++)
				{
					OrderNo3=results.get(i).get(0).toString();
					if(results.size()>1){
						if(i==results.size()-1){
							oi = oi + OrderNo3;
						}else{
							oi = oi + OrderNo3+"','";}
					}
				}
				OrderNo = oi;
				RevertOrder(ONo);
				
				String ASNcheck = data.getText("mulPO").replace("ordno",ONo);
				List<List<Object>> ASNcheckresults = sql.executeQuery(getContext(), ASNcheck);
				for(int y=0;y<ASNcheckresults.size();y++)
				{
					objOrderEnquiryPage.enterOrder(objOrderEnquiryObjects, ASNcheckresults.get(y).get(0).toString(),driver,ONo);
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",Order1).replace("orderno",ebeln);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo).replace("OName",ONo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",OrderNo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								
								String disp = data.getText("dispWTt").replace("ordno",OrderNo);
								List<List<Object>> dispWeight = sql.executeQuery(getContext(), disp);
								double y=0;double y1=0;
								for(int o=0;o<dispWeight.size();o++)
								{
									if(dispWeight.get(o).get(3).toString().equals("Y"))
									{								
										double wt = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y=y+wt;
									}
									if(dispWeight.get(o).get(1).toString().equals("KG"))
									{								
										double wt1 = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y1=y1+wt1;
									}
								}
								
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBFCB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								
								String rw="0";
								rw=Double.toString(y1);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								String cr = "";
								String TR="";
								int sizee=0;
								int cr1=0;
								double tr1=0;
								ArtList = data.getText("fullArtList").replace("ordno",OrderNo);
								List<List<Object>> editArtListApp2 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(editArtListApp2);
								
								double rand=0.0;
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String x = editArtListApp2.get(u).get(19).toString();
									double c =  Double.parseDouble(x);
									rand=rand+c;
								}
								rw = Double.toString(rand);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String d = editArtListApp2.get(u).get(11).toString();
									String[] den = splitString(d, " ");
									if(den[1].equals("EA")||den[1].equals("KG")||den[1].equals("L"))
									{}else{									
										cr1=cr1+Integer.parseInt(den[0]);
									}
									tr1=tr1+Double.parseDouble(den[0]);
									if(editArtListApp2.get(u).get(5).toString().equals("Y"))
									{
										appendTwoColumns(editArtListApp2, u, 4, 16);
										appendTwoColumns(editArtListApp2, u, 12, 16);
										appendTwoColumns(editArtListApp2, u, 14, 15);
									}
									if(editArtListApp2.get(u).get(18).toString().equals("DA")||editArtListApp2.get(u).get(18).toString().equals("ES")){ct=1;}
									if((editArtListApp2.get(u).get(8).toString().equals("Y"))&&(editArtListApp2.get(u).get(6).toString()).equals("0"))
									{
										//displayArt.add(editArtListApp2.get(u).get(0).toString());
										String dispArtList = data.getText("dispArtfullList").replace("ordno",OrderNo).replace("artno", editArtListApp2.get(u).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
										editArtListApp2.remove(u);
										u--;
									}
								}
								TR=""+tr1;
								TR = TR.replaceAll("\\.?0+$","");
								cr=""+cr1;
								removeIndex(editArtListApp2, "19");removeIndex(editArtListApp2, "18");removeIndex(editArtListApp2, "17");removeIndex(editArtListApp2, "16");removeIndex(editArtListApp2, "15");
								removeIndex(editArtListApp2, "9"); removeIndex(editArtListApp2, "8"); removeIndex(editArtListApp2, "7"); removeIndex(editArtListApp2, "6");removeIndex(editArtListApp2, "5");
								String ps = "0";
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, OrderNo, displayArt,cpbdArticles,"","");
								int count = articlcount-displayArt.size();
								int ZQ = tempArticles.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,""+ZQ,driver);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE IN FULL",rw,driver,dispqty);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);									
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,displayArt,driver,"",results,"","full");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Vendor ASN in Full where multiple PO is converted into single ASN having duplicate ASN")
			public void ReceivingVendorASNinFullMulPOtoSingleASNhavingDL() throws SQLException, IOException, AWTException, ParseException
			{
				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+15;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
			

				String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String Order1=results.get(0).get(0).toString();
				String OrderNo=results.get(0).get(0).toString();
				//String OrderNo1=results.get(1).get(0).toString();
				String ebeln=results.get(0).get(1).toString();
				String oi ="";String OrderNo3="";
				for(int i=0;i<results.size();i++)
				{
					OrderNo3=results.get(i).get(0).toString();
					if(results.size()>1){
						if(i==results.size()-1){
							oi = oi + OrderNo3;
						}else{
							oi = oi + OrderNo3+"','";}
					}
				}
				OrderNo = oi;
				RevertOrder(ONo);
				
				String ASNcheck = data.getText("mulPO").replace("ordno",ONo);
				List<List<Object>> ASNcheckresults = sql.executeQuery(getContext(), ASNcheck);
				for(int y=0;y<ASNcheckresults.size();y++)
				{
					objOrderEnquiryPage.enterOrder(objOrderEnquiryObjects, ASNcheckresults.get(y).get(0).toString(),driver,ONo);
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",Order1).replace("orderno",ebeln);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",OrderNo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								
								String disp = data.getText("dispWTt").replace("ordno",OrderNo);
								List<List<Object>> dispWeight = sql.executeQuery(getContext(), disp);
								double y=0;double y1=0;
								for(int o=0;o<dispWeight.size();o++)
								{
									if(dispWeight.get(o).get(3).toString().equals("Y"))
									{								
										double wt = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y=y+wt;
									}
									if(dispWeight.get(o).get(1).toString().equals("KG"))
									{								
										double wt1 = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y1=y1+wt1;
									}
								}
								
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBFCB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								
								String rw="0";
								rw=Double.toString(y1);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								String cr = "";
								String TR="";
								int sizee=0;
								int cr1=0;
								double tr1=0;
								ArtList = data.getText("fullArtList").replace("ordno",OrderNo);
								List<List<Object>> editArtListApp2 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(editArtListApp2);
								
								double rand=0.0;
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String x = editArtListApp2.get(u).get(19).toString();
									double c =  Double.parseDouble(x);
									rand=rand+c;
								}
								rw = Double.toString(rand);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String d = editArtListApp2.get(u).get(11).toString();
									String[] den = splitString(d, " ");
									if(den[1].equals("EA")||den[1].equals("KG")||den[1].equals("L"))
									{}else{									
										cr1=cr1+Integer.parseInt(den[0]);
									}
									tr1=tr1+Double.parseDouble(den[0]);
									if(editArtListApp2.get(u).get(5).toString().equals("Y"))
									{
										appendTwoColumns(editArtListApp2, u, 4, 16);
										appendTwoColumns(editArtListApp2, u, 12, 16);
										appendTwoColumns(editArtListApp2, u, 14, 15);
									}
									if(editArtListApp2.get(u).get(18).toString().equals("DA")||editArtListApp2.get(u).get(18).toString().equals("ES")){ct=1;}
									if((editArtListApp2.get(u).get(8).toString().equals("Y"))&&(editArtListApp2.get(u).get(6).toString()).equals("0"))
									{
										//displayArt.add(editArtListApp2.get(u).get(0).toString());
										String dispArtList = data.getText("dispArtfullList").replace("ordno",OrderNo).replace("artno", editArtListApp2.get(u).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
										editArtListApp2.remove(u);
										u--;
									}
								}
								TR=""+tr1;
								TR = TR.replaceAll("\\.?0+$","");
								cr=""+cr1;
								removeIndex(editArtListApp2, "19");removeIndex(editArtListApp2, "18");removeIndex(editArtListApp2, "17");removeIndex(editArtListApp2, "16");removeIndex(editArtListApp2, "15");
								removeIndex(editArtListApp2, "9"); removeIndex(editArtListApp2, "8"); removeIndex(editArtListApp2, "7"); removeIndex(editArtListApp2, "6");removeIndex(editArtListApp2, "5");
								String ps = "0";
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, OrderNo, displayArt,cpbdArticles,"","");
								int count = articlcount-displayArt.size();
								int ZQ = tempArticles.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,""+ZQ,driver);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE IN FULL",rw,driver,dispqty);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);									
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,displayArt,driver,"",results,"","full");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receiving Vendor in Full By using PostLater option")
			public void ReceivingVendorinFullByPostLater() throws SQLException, IOException, AWTException, ParseException
			{

				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+16;}
					TestStatus status = getTestStatus();
					try{
			navToOrderEnquiry(status);
			String FT="";String FT1="";String CT="";String CT1="";		
			String OrderNo ="";
			if(StoreNo.equals("1108"))
			{
				OrderNo = data.getText("ONo");
			}
			if(StoreNo.equals("1786"))
			{
				OrderNo = data.getText("SITStore");
			}
				OrderNo=OrderNo.trim();			
			
			RevertOrder(OrderNo);
			
			String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

			if(ord.equals("tru")){

			//orderListTable comparision
			List OrdL = new ArrayList();
			List Vendor = new ArrayList();				
			List displayArt = new ArrayList();
			List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
			List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
			List<List<Object>> OrderTable = new ArrayList<List<Object>>();
			String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
			results = sql.executeQuery(getContext(), Orderlist);	
			if(results.size()!=0)
			{
				OrdL.add(results.get(0).get(0).toString());
				OrdL.add(results.get(0).get(1).toString());
				String del_date = results.get(0).get(1).toString();
				String onshow_date = results.get(0).get(2).toString();
				OrdL.add("AUTHORISED");
				Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
				results = sql.executeQuery(getContext(), Orderlist);			
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add("VENDOR");
					Vendor.add(results.get(0).get(0).toString());
					Vendor.add(del_date);
					Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
					results = sql.executeQuery(getContext(), Orderlist);	
					if(results.size()!=0)
					{
						String totalCartons = results.get(0).get(0).toString();
						if(totalCartons.contains("."))
						{
							totalCartons=totalCartons.replaceAll("\\.?0+$","");
						}
						OrdL.add(totalCartons);
						OrderListDB.add(OrdL);

						List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

						//Vendor Details comparision
						Vendor.add(finalCompare.get(0).toString());
						Vendor.add(onshow_date);
						Vendor.add("AUTHORISED");
						vendorDetails.add(Vendor);
						objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

						String temperature = "";
						if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
						{
							temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
						}
						else
						{
							temperature = "negativeStatus";
						}
						/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), tempFlag);
						if(results.size()!=0)
						{
							if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
									((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
							{
								htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
							}
						}*/
						
						String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), ArtList);
						replacenullToZero(results);
						if(results.size()!=0)
						{
							List orderT = new ArrayList();
							orderT.add(finalCompare.get(1).toString());
							int articlcount = results.size();
							orderT.add(""+articlcount);	OrderTable.add(orderT);
							orderT = new ArrayList();
							orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
							orderT = new ArrayList();
							orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
							objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
							objOrderEnquiryObjects.clearGroupBy.click();
							List res1 = new ArrayList();
							List<List<Object>> res = new ArrayList<List<Object>>();
							List dispArticles = new ArrayList();
							List cpbdArticles = new ArrayList();
							for(int i=0;i<results.size();i++)
							{
								if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
								{
									displayArt.add(results.get(i).get(0).toString());
									String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
									results1 = sql.executeQuery(getContext(), dispArtList);
									for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
									{												
										List<Object> elem = it.next(); 
										dispArticles.add(elem.get(0).toString());
										res1 = new ArrayList();
										for(int s =0;s<elem.size();s++) {
											res1.add(elem.get(s).toString());
										}
										res.add(res1);
									}
								}
								if((results.get(i).get(11).toString()).equals("1"))
								{
									cpbdArticles.add(results.get(i).get(0).toString());
								}
								if(results.get(i).get(10).toString().equals("Y"))
								{
									appendTwoColumns(results, i, 1, 2);
									appendTwoColumns(results, i, 4, 5);
								}
							}						
							removeIndex(results, "2");
							objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
							objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
							objOrderEnquiryObjects.receiveLBFCB.click();waitFor(1);
							if(objOrderEnquiryObjects.YesCheckList.size()>0)
							{
								if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
									objOrderEnquiryObjects.YesCheck.click();	
								}
							}
							String docket = "abc123";
							if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
							else{docket="NA";}
							if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
							{CT="NA"; CT1="";}
							else{CT=CT1="2.00";
							objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
							}
							if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
							{FT="NA";FT1="";}
							else{FT=FT1="-17.00";
							objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
							}
							//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
							objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}
								removeIndex(results, "2");
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								dispArticles = new ArrayList();
								res = new ArrayList<List<Object>>();
								String rw="0";
								String cr = "";
								String TR="";
								int sizee=0;
								int cr1=0;		
								double tr1=0;
								ArtList = data.getText("fullArtList").replace("ordno",OrderNo);
								List<List<Object>> editArtListApp2 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(editArtListApp2);
								double rand=0.0;
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String x = editArtListApp2.get(u).get(15).toString();
									double c =  Double.parseDouble(x);
									rand=rand+c;
								}
								rw = Double.toString(rand);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String d = editArtListApp2.get(u).get(13).toString();
									String[] den = splitString(d, " ");
									if(den[1].equals("EA")||den[1].equals("KG")||den[1].equals("L"))
									{}else{									
										cr1=cr1+Integer.parseInt(den[0]);
									}
									tr1=tr1+Double.parseDouble(den[0]);
									if((editArtListApp2.get(u).get(10).toString().equals("Y"))&&(editArtListApp2.get(u).get(8).toString()).equals("0"))
									{
										//displayArt.add(editArtListApp2.get(u).get(0).toString());
										String dispArtList = data.getText("dispArtfullList").replace("ordno",OrderNo).replace("artno", editArtListApp2.get(u).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
										editArtListApp2.remove(u);
										u--;
									}
								}
								TR=""+tr1;
								TR = TR.replaceAll("\\.?0+$","");
								cr=""+cr1;
								removeIndex(editArtListApp2, "15");removeIndex(editArtListApp2, "11");removeIndex(editArtListApp2, "10");removeIndex(editArtListApp2, "9"); removeIndex(editArtListApp2, "8"); removeIndex(editArtListApp2, "7"); 
								String ps = "0";
								
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, OrderNo, displayArt,cpbdArticles,"","");
								//String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,dispArticles,driver);
								
								int count = articlcount-displayArt.size();
								int ZQ1 = tempArticles.size();
								String ZQ = Integer.toString(ZQ1);
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
										articlcount,sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.postLater.click();	
								List sohPLbefore = SOH(OrderNo, displayArt, cpbdArticles);
								htmlToExtent(cName,mName,extLogger,driver, "SOH before clicking on post later for order "+OrderNo+" - "+sohPLbefore+";;;Info");
															
								
								objOrderEnquiryObjects.submit.click();
								//objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								
								List sohPLafter = SOH(OrderNo, displayArt, cpbdArticles);
								htmlToExtent(cName,mName,extLogger,driver, "SOH after clicking on post later for order "+OrderNo+" - "+sohPLafter+";;;Info");
								htmlToExtent(cName,mName,extLogger,driver, "Comparing SOH for order "+OrderNo+" before updating SOH;;;Info");
								ElementContains1(cName, mName,extLogger,driver, sohPLbefore, sohPLafter);
								
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}									
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									
									objOrderEnquiryObjects.updateSOHClick.click();
									objOrderEnquiryPage.waitFn(driver);
									if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
									{
										if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "SOH are Successfully Updated for order "+OrderNo+";;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "SOH are Successfully Updated for order "+OrderNo+";;;Fail");	
										}
										objOrderEnquiryObjects.sucClose.click();
									}
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE IN FULL",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,displayArt,driver,"",results,"","full1");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							//}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
				}
			}
			else
			{
				htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
			}
			}
			log.info("-----------------Logout from Application------------------");
			waitFor(1);
			htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
			status.assertAll();
			}catch(Exception e)
			{
				 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
			}
			status.assertAll();
		
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receiving WareHouse in Full By using PostLater option")
			public void ReceivingWareHouseinFullByPostLater() throws SQLException, IOException, AWTException, ParseException
			{				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+16;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
		
				RevertOrder(ONo);
				
				int rweight=0;
				String RWCheck = data.getText("OrderArtList").replace("ordno",ONo);
				results = sql.executeQuery(getContext(), RWCheck);
				replacenullToZero(results);
				for(int p=0;p<results.size();p++){
					if(results.get(p).get(10).toString().equals("Y"))
					{
						rweight++;
					}
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",ONo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("WAREHOUSE");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",ONo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",ONo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",ONo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								
								String disp = data.getText("dispWTt").replace("ordno",ONo);
								List<List<Object>> dispWeight = sql.executeQuery(getContext(), disp);
								double y=0;double y1=0;
								for(int o=0;o<dispWeight.size();o++)
								{
									if(dispWeight.get(o).get(3).toString().equals("Y"))
									{								
										double wt = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y=y+wt;
									}
									if(dispWeight.get(o).get(1).toString().equals("KG"))
									{								
										double wt1 = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y1=y1+wt1;
									}
								}
								
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",ONo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, ONo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBFCB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								
								String rw="0";
								rw=Double.toString(y1);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								String cr = "";
								String TR="";
								int sizee=0;
								int cr1=0;
								double tr1=0;
								ArtList = data.getText("fullArtList").replace("ordno",ONo);
								List<List<Object>> editArtListApp2 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(editArtListApp2);
								
								
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String d = editArtListApp2.get(u).get(11).toString();
									String[] den = splitString(d, " ");
									if(den[1].equals("EA")||den[1].equals("KG")||den[1].equals("L"))
									{}else{									
										cr1=cr1+Integer.parseInt(den[0]);
									}
									tr1=tr1+Double.parseDouble(den[0]);
									if(editArtListApp2.get(u).get(5).toString().equals("Y"))
									{
										appendTwoColumns(editArtListApp2, u, 4, 16);
										appendTwoColumns(editArtListApp2, u, 12, 16);
										appendTwoColumns(editArtListApp2, u, 14, 15);
									}
									//if(editArtListApp2.get(u).get(18).toString().equals("DA")||editArtListApp2.get(u).get(18).toString().equals("ES")){ct=1;}
									if((editArtListApp2.get(u).get(8).toString().equals("Y"))&&(editArtListApp2.get(u).get(6).toString()).equals("0"))
									{
										//displayArt.add(editArtListApp2.get(u).get(0).toString());
										String dispArtList = data.getText("dispArtfullList").replace("ordno",ONo).replace("artno", editArtListApp2.get(u).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
										editArtListApp2.remove(u);
										u--;
									}
								}
								TR=""+tr1;
								TR = TR.replaceAll("\\.?0+$","");
								cr=""+cr1;
								removeIndex(editArtListApp2, "17");removeIndex(editArtListApp2, "16");removeIndex(editArtListApp2, "15");
								removeIndex(editArtListApp2, "9"); removeIndex(editArtListApp2, "8"); removeIndex(editArtListApp2, "7"); removeIndex(editArtListApp2, "6");removeIndex(editArtListApp2, "5");
								String ps = "0";
								ArtList = data.getText("OrderArtListTemp").replace("ordno",ONo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, ONo, displayArt,cpbdArticles,"","");
								int count = articlcount-displayArt.size();
								int ZQ = tempArticles.size();
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,""+ZQ,driver);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, ONo,driver);	
								
								objOrderEnquiryObjects.postLater.click();	
								List sohPLbefore = SOH(ONo, displayArt, cpbdArticles);
								htmlToExtent(cName,mName,extLogger,driver, "SOH before clicking on post later for order "+ONo+" - "+sohPLbefore+";;;Info");
															
								
								objOrderEnquiryObjects.submit.click();
								//objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								
								List sohPLafter = SOH(ONo, displayArt, cpbdArticles);
								htmlToExtent(cName,mName,extLogger,driver, "SOH after clicking on post later for order "+ONo+" - "+sohPLafter+";;;Info");
								htmlToExtent(cName,mName,extLogger,driver, "Comparing SOH for order "+ONo+" before updating SOH;;;Info");
								ElementContains1(cName, mName,extLogger,driver, sohPLbefore, sohPLafter);
								
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+ONo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+ONo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									
									objOrderEnquiryObjects.updateSOHClick.click();
									objOrderEnquiryPage.waitFn(driver);
									if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
									{
										if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "SOH are Successfully Updated for order "+ONo+";;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "SOH are Successfully Updated for order "+ONo+";;;Fail");	
										}
										objOrderEnquiryObjects.sucClose.click();
									}
									
									
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE IN FULL",rw,driver,dispqty);
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, ONo,driver);									
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp2, ONo,displayArt,driver,"",results,"","full");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(ONo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+ONo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Receiving VendorASN in Full By using PostLater option")
			public void ReceivingVendorASNinFullByPostLater() throws SQLException, IOException, AWTException, ParseException
			{
				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+16;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
			

				String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String OrderNo=results.get(0).get(0).toString();
				String ebeln=results.get(0).get(1).toString();
				
				RevertOrder(ONo);
				
				int rweight=0;
				String RWCheck = data.getText("OrderArtList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), RWCheck);
				replacenullToZero(results);
				for(int p=0;p<results.size();p++){
					if(results.get(p).get(10).toString().equals("Y"))
					{
						rweight++;
					}
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo).replace("orderno",ebeln);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",OrderNo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								
								String disp = data.getText("dispWTt").replace("ordno",OrderNo);
								List<List<Object>> dispWeight = sql.executeQuery(getContext(), disp);
								double y=0;double y1=0;
								for(int o=0;o<dispWeight.size();o++)
								{
									if(dispWeight.get(o).get(3).toString().equals("Y"))
									{								
										double wt = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y=y+wt;
									}
									if(dispWeight.get(o).get(1).toString().equals("KG"))
									{								
										double wt1 = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y1=y1+wt1;
									}
								}
								
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBFCB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								
								String rw="0";
								rw=Double.toString(y1);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								String cr = "";
								String TR="";
								int sizee=0;
								int cr1=0;
								double tr1=0;
								ArtList = data.getText("fullArtList").replace("ordno",OrderNo);
								List<List<Object>> editArtListApp2 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(editArtListApp2);
								
								double rand=0.0;
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String x = editArtListApp2.get(u).get(18).toString();
									double c =  Double.parseDouble(x);
									rand=rand+c;
								}
								rw = Double.toString(rand);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String d = editArtListApp2.get(u).get(11).toString();
									String[] den = splitString(d, " ");
									if(den[1].equals("EA")||den[1].equals("KG")||den[1].equals("L"))
									{}else{									
										cr1=cr1+Integer.parseInt(den[0]);
									}
									tr1=tr1+Double.parseDouble(den[0]);
									if(editArtListApp2.get(u).get(5).toString().equals("Y"))
									{
										appendTwoColumns(editArtListApp2, u, 4, 16);
										appendTwoColumns(editArtListApp2, u, 12, 16);
										appendTwoColumns(editArtListApp2, u, 14, 15);
									}
									//if(editArtListApp2.get(u).get(18).toString().equals("DA")||editArtListApp2.get(u).get(18).toString().equals("ES")){ct=1;}
									if((editArtListApp2.get(u).get(8).toString().equals("Y"))&&(editArtListApp2.get(u).get(6).toString()).equals("0"))
									{
										//displayArt.add(editArtListApp2.get(u).get(0).toString());
										String dispArtList = data.getText("dispArtfullList").replace("ordno",OrderNo).replace("artno", editArtListApp2.get(u).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
										editArtListApp2.remove(u);
										u--;
									}
								}
								TR=""+tr1;
								TR = TR.replaceAll("\\.?0+$","");
								cr=""+cr1;
								removeIndex(editArtListApp2, "18");removeIndex(editArtListApp2, "17");removeIndex(editArtListApp2, "16");removeIndex(editArtListApp2, "15");
								removeIndex(editArtListApp2, "9"); removeIndex(editArtListApp2, "8"); removeIndex(editArtListApp2, "7"); removeIndex(editArtListApp2, "6");removeIndex(editArtListApp2, "5");
								String ps = "0";
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, OrderNo, displayArt,cpbdArticles,"","");
								int count = articlcount-displayArt.size();
								int ZQ = tempArticles.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,""+ZQ,driver);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);
								objOrderEnquiryObjects.postLater.click();	
								List sohPLbefore = SOH(OrderNo, displayArt, cpbdArticles);
								htmlToExtent(cName,mName,extLogger,driver, "SOH before clicking on post later for order "+OrderNo+" - "+sohPLbefore+";;;Info");
															
								
								objOrderEnquiryObjects.submit.click();
								//objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								
								List sohPLafter = SOH(OrderNo, displayArt, cpbdArticles);
								htmlToExtent(cName,mName,extLogger,driver, "SOH after clicking on post later for order "+OrderNo+" - "+sohPLafter+";;;Info");
								htmlToExtent(cName,mName,extLogger,driver, "Comparing SOH for order "+OrderNo+" before updating SOH;;;Info");
								ElementContains1(cName, mName,extLogger,driver, sohPLbefore, sohPLafter);
								
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									
									objOrderEnquiryObjects.updateSOHClick.click();
									objOrderEnquiryPage.waitFn(driver);
									if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
									{
										if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "SOH are Successfully Updated for order "+OrderNo+";;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "SOH are Successfully Updated for order "+OrderNo+";;;Fail");	
										}
										objOrderEnquiryObjects.sucClose.click();
									}
									
									
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE IN FULL",rw,driver,dispqty);
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);									
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,displayArt,driver,"",results,"","full");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Vendor ASN in Exception where single PO having duplicate ASN")
			public void ReceivingVendorASNinFullSinglePOhavingDL() throws SQLException, IOException, AWTException, ParseException
			{				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+15;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
			

				String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String OrderNo=results.get(0).get(0).toString();
				//String OrderNo1=results.get(1).get(0).toString();
				String ebeln=results.get(0).get(1).toString();
				
				RevertOrder(ONo);
				
				String ASNcheck = data.getText("mulPO").replace("ordno",ONo);
				List<List<Object>> ASNcheckresults = sql.executeQuery(getContext(), ASNcheck);
				for(int y=0;y<ASNcheckresults.size();y++)
				{
					objOrderEnquiryPage.enterOrder(objOrderEnquiryObjects, ASNcheckresults.get(y).get(0).toString(),driver,ONo);
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo).replace("orderno",ebeln);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",OrderNo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								
								String disp = data.getText("dispWTt").replace("ordno",OrderNo);
								List<List<Object>> dispWeight = sql.executeQuery(getContext(), disp);
								double y=0;double y1=0;
								for(int o=0;o<dispWeight.size();o++)
								{
									if(dispWeight.get(o).get(3).toString().equals("Y"))
									{								
										double wt = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y=y+wt;
									}
									if(dispWeight.get(o).get(1).toString().equals("KG"))
									{								
										double wt1 = Double.parseDouble(dispWeight.get(o).get(2).toString());
										y1=y1+wt1;
									}
								}
								
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBFCB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								
								String rw="0";
								rw=Double.toString(y1);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								String cr = "";
								String TR="";
								int sizee=0;
								int cr1=0;
								double tr1=0;
								ArtList = data.getText("fullArtList").replace("ordno",OrderNo);
								List<List<Object>> editArtListApp2 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(editArtListApp2);
								
								double rand=0.0;
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String x = editArtListApp2.get(u).get(19).toString();
									double c =  Double.parseDouble(x);
									rand=rand+c;
								}
								rw = Double.toString(rand);
								if(rw.contains("."))
								{
									rw = rw.replaceAll("\\.?0+$","");
								}
								
								for(int u=0;u<editArtListApp2.size();u++)
								{
									String d = editArtListApp2.get(u).get(11).toString();
									String[] den = splitString(d, " ");
									if(den[1].equals("EA")||den[1].equals("KG")||den[1].equals("L"))
									{}else{									
										cr1=cr1+Integer.parseInt(den[0]);
									}
									tr1=tr1+Double.parseDouble(den[0]);
									if(editArtListApp2.get(u).get(5).toString().equals("Y"))
									{
										appendTwoColumns(editArtListApp2, u, 4, 16);
										appendTwoColumns(editArtListApp2, u, 12, 16);
										appendTwoColumns(editArtListApp2, u, 14, 15);
									}
									if(editArtListApp2.get(u).get(18).toString().equals("DA")||editArtListApp2.get(u).get(18).toString().equals("ES")){ct=1;}
									if((editArtListApp2.get(u).get(8).toString().equals("Y"))&&(editArtListApp2.get(u).get(6).toString()).equals("0"))
									{
										//displayArt.add(editArtListApp2.get(u).get(0).toString());
										String dispArtList = data.getText("dispArtfullList").replace("ordno",OrderNo).replace("artno", editArtListApp2.get(u).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
										editArtListApp2.remove(u);
										u--;
									}
								}
								TR=""+tr1;
								TR = TR.replaceAll("\\.?0+$","");
								cr=""+cr1;
								removeIndex(editArtListApp2, "19");removeIndex(editArtListApp2, "18");removeIndex(editArtListApp2, "17");removeIndex(editArtListApp2, "16");removeIndex(editArtListApp2, "15");
								removeIndex(editArtListApp2, "9"); removeIndex(editArtListApp2, "8"); removeIndex(editArtListApp2, "7"); removeIndex(editArtListApp2, "6");removeIndex(editArtListApp2, "5");
								String ps = "0";
								
								
								/*ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								List tempArticles1 = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(15).toString().equals("DA")||results.get(i).get(15).toString().equals("ES"))
									{ran++; ct=1;tempArticles1.add(results.get(i).get(0).toString());}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}
								removeIndex(results, "14");
								int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								/*int artcount = 0;
								if(tempArticles.size()==0 && ran>=1 && articlcount>2)
								{
									if(ran>1){
										if(ran==articlcount){
											htmlToExtent(cName,mName,extLogger,driver, "Exception cannot be proceeded"+OrderNo+";;;Fail");
										}else{
											artcount=articlcount-1;
										}
									}else{
									artcount=2;}
								}else if(articlcount==2 && ran==1){
									artcount=1;
								}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount-1;
									}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","NR",tempArticles1);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}*/
								
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, OrderNo, displayArt,cpbdArticles,"","");
								/*String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,dispArticles,driver);
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								//objOrderEnquiryObjects.nextClick.click();
								//waitFor(1);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
*/								int count = articlcount-displayArt.size();
								int ZQ = tempArticles.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,""+ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE IN FULL",rw,driver,dispqty);
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);									
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp2, OrderNo,displayArt,driver,"",results,"","full");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			
			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Vendor ASN in Exception by Accepting not ranged articles  where multiple PO is converted into single ASN")
			public void ReceivingVendorASNinExceptionMulPOtoSingleASN() throws SQLException, IOException, AWTException, ParseException
			{

				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+18;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
			

				String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String Order1=results.get(0).get(0).toString();
				String OrderNo=results.get(0).get(0).toString();
				//String OrderNo1=results.get(1).get(0).toString();
				String ebeln=results.get(0).get(1).toString();
				String oi ="";String OrderNo3="";
				for(int i=0;i<results.size();i++)
				{
					OrderNo3=results.get(i).get(0).toString();
					if(results.size()>1){
						if(i==results.size()-1){
							oi = oi + OrderNo3;
						}else{
							oi = oi + OrderNo3+"','";}
					}
				}
				OrderNo = oi;
				RevertOrder(ONo);
				
				String ASNcheck = data.getText("mulPO").replace("ordno",ONo);
				List<List<Object>> ASNcheckresults = sql.executeQuery(getContext(), ASNcheck);
				for(int y=0;y<ASNcheckresults.size();y++)
				{
					objOrderEnquiryPage.enterOrder(objOrderEnquiryObjects, ASNcheckresults.get(y).get(0).toString(),driver,ONo);
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",Order1).replace("orderno",ebeln);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo).replace("OName",ONo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",OrderNo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "15");	removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								List tempArticles1 = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(15).toString().equals("DA")||results.get(i).get(15).toString().equals("ES"))
									{ran++; ct=1;tempArticles1.add(results.get(i).get(0).toString());}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}
								removeIndex(results, "15");removeIndex(results, "14");
								/*int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/

								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount = 0;
								if(tempArticles.size()==0 && ran>=1 && articlcount>2)
								{
									if(ran>1){
										if(ran==articlcount){
											htmlToExtent(cName,mName,extLogger,driver, "Exception cannot be proceeded"+OrderNo+";;;Fail");
										}else{
											artcount=articlcount-1;
										}
									}else{
									artcount=2;}
								}else if(articlcount==2 && ran==1){
									artcount=1;
								}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount-1;
									}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","NR",tempArticles1);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								//objOrderEnquiryObjects.nextClick.click();
								//waitFor(1);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,dispqty);
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Warehouse in Exception for sellable article")
			public void ReceivingWHSellableinException() throws SQLException, IOException, AWTException, ParseException
			{

				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+20;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();				

				RevertOrder(ONo);
				
				String TempFlag = data.getText("revertOrder").replace("ordno",ONo);
				List<List<Object>> rest = sql.executeQuery(getContext(), TempFlag);				
			

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",ONo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("WAREHOUSE");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",ONo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",ONo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",ONo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",ONo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "15");	removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, ONo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								ArtList = data.getText("OrderArtList").replace("ordno",ONo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								List tempArticles1 = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(15).toString().equals("DA")||results.get(i).get(15).toString().equals("ES"))
									{ran++; ct=1;tempArticles1.add(results.get(i).get(0).toString());}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}
								removeIndex(results, "15");removeIndex(results, "14");
								/*int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",ONo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/

								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount = 0;
								if(tempArticles.size()==0)
								{
									artcount=articlcount-1;
								}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount-1;
									}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										ONo,artcount,tempArticles,driver,"",results,"","NR",tempArticles1);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+ONo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+ONo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> editArtListApp2 = new ArrayList<List<Object>>();
								List ba = new ArrayList();
								for (Iterator<List<Object>> it = editArtListApp1.iterator(); it.hasNext();) {
									List<Object> elem = it.next(); 
									ba = new ArrayList();
									for(int i =0;i<elem.size();i++) {									
										ba.add(elem.get(i));									
									}
									editArtListApp2.add(ba);}		
								List<List<Object>> editArtListApp3 = new ArrayList<List<Object>>();
								List ca = new ArrayList();
								for (Iterator<List<Object>> it = editArtListApp1.iterator(); it.hasNext();) {
									List<Object> elem = it.next(); 
									ca = new ArrayList();
									for(int i =0;i<elem.size();i++) {									
										ca.add(elem.get(i));									
									}
									editArtListApp3.add(ca);}	
								List<List<Object>> SOHApp = SOHbefore(editArtListApp2, ONo, displayArt,cpbdArticles,"","sell");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, ONo,dispArticles,driver);
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, ONo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+ONo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+ONo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,dispqty);
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, ONo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, ONo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(ONo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+ONo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Vendor ASN in Full where single PO having duplicate ASN")
			public void ReceivingVendorASNinExceptionSinglePOhavingDL() throws SQLException, IOException, AWTException, ParseException
			{
				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+18;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String ONo="";
				if(StoreNo.equals("1108")){
					ONo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					ONo = data.getText("SITStore");
				}
				ONo=ONo.trim();	
			

				String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String OrderNo=results.get(0).get(0).toString();
				//String OrderNo1=results.get(1).get(0).toString();
				String ebeln=results.get(0).get(1).toString();
				
				RevertOrder(ONo);
				
				String ASNcheck = data.getText("mulPO").replace("ordno",ONo);
				List<List<Object>> ASNcheckresults = sql.executeQuery(getContext(), ASNcheck);
				for(int y=0;y<ASNcheckresults.size();y++)
				{
					objOrderEnquiryPage.enterOrder(objOrderEnquiryObjects, ASNcheckresults.get(y).get(0).toString(),driver,ONo);
				}

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, ONo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo).replace("orderno",ebeln);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("DISPATCHED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("DISPATCHED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							int ct=0;
							int ran=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								Orderlist = data.getText("displist").replace("ordno",OrderNo);
								List<List<Object>> results_disp = sql.executeQuery(getContext(), Orderlist);
								String dispqty = results_disp.get(0).get(0).toString().replaceAll("\\.?0+$","");
								orderT.add(dispqty); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "15");	removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"asn");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								try{
								objOrderEnquiryObjects.acceptNR.click();
								objOrderEnquiryObjects.acceptNR1.click();}catch(Exception e){}
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								List tempArticles1 = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(15).toString().equals("DA")||results.get(i).get(15).toString().equals("ES"))
									{ran++; ct=1;tempArticles1.add(results.get(i).get(0).toString());}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}
								removeIndex(results, "15");removeIndex(results, "14");
								/*int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/

								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount = 0;
								if(tempArticles.size()==0 && ran>=1 && articlcount>2)
								{
									if(ran>1){
										if(ran==articlcount){
											htmlToExtent(cName,mName,extLogger,driver, "Exception cannot be proceeded"+OrderNo+";;;Fail");
										}else{
											artcount=articlcount-1;
										}
									}else{
									artcount=2;}
								}else if(articlcount==2 && ran==1){
									artcount=1;
								}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount-1;
									}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","NR",tempArticles1);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								//objOrderEnquiryObjects.nextClick.click();
								//waitFor(1);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,dispqty);
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(ONo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Receive Virtual DC through exception")
			public void ReceivingVirtualDCOrderByException() throws SQLException, IOException, AWTException, ParseException
			{				
				if(orderEnqArtpreCount2==-1){
					OEcount=OEcount+20;}
				int rwval=0;
				TestStatus status = getTestStatus();
				try{
					navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";						
				String OrderNo="";
				if(StoreNo.equals("1108")){
					OrderNo = data.getText("ONo");
				}else if(StoreNo.equals("1786")){
					OrderNo = data.getText("SITStore");
				}
				OrderNo=OrderNo.trim();		
			
			/*	String Order = data.getText("getONo").replace("store",ONo);
				results = sql.executeQuery(getContext(), Order);	
				String OrderNo=results.get(0).get(0).toString();
				String ebeln=results.get(0).get(1).toString();*/
				
				RevertOrder(OrderNo);

				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("WAREHOUSE");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();	
							if(totalCartons.contains(".")){totalCartons = totalCartons.replaceAll("\\.?0+$","");}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}	
								removeIndex(results, "15");	removeIndex(results, "14");	
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}
								removeIndex(results, "15");removeIndex(results, "14");
								/*int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/

								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount;
								if(tempArticles.size()==0)
								{
									artcount=1;
								}else{
								artcount = (articlcount-tempArticles.size())+1;
								if(artcount==articlcount){
									artcount = artcount--;
								}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by line by adding new OM")
			public void ReceiveLineByLineNewOM() //throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+19;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String username = objOrderEnquiryPage.username(driver);
				String FT="";String FT1="";String CT="";String CT1="";	
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();	
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){
				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, 
										res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								if(objOrderEnquiryObjects.receiveLBLCB.getAttribute("checked").equals("true"))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Receive line by line is checkd by default;;;Pass");
									if(objOrderEnquiryObjects.YesCheckList.size()>0)
									{
										if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
											objOrderEnquiryObjects.YesCheck.click();	
										}
									}
									String docket = "abc123";
									if(objOrderEnquiryObjects.docket.isDisplayed()){
									objOrderEnquiryObjects.docket.sendKeys(docket);}
									else{docket="NA";}
									if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
									{CT="NA"; CT1="";}
									else{CT=CT1="2.00";
										objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
									}
									if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
									{FT="NA";FT1="";}
									else{FT=FT1="-17.00";
										objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
									}
									//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
									objOrderEnquiryObjects.nextClick.click();
									objOrderEnquiryPage.waitFn(driver);
									waitFor(0.5);
									ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
									results = sql.executeQuery(getContext(), ArtList);
									replacenullToZero(results);
									for(int i=0;i<results.size();i++)
									{
										if(results.get(i).get(10).toString().equals("Y"))
										{
											appendTwoColumns(results, i, 1, 2);
											appendTwoColumns(results, i, 4, 5);
										}
									}
									removeIndex(results, "2");
									ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
									results_temp1 = sql.executeQuery(getContext(), ArtList);
									replacenullToZero(results_temp1);
									List tempArticles = new ArrayList();
									/*for(int i=0;i<results_temp1.size();i++)
									{
										if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
										{
											tempArticles.add(results_temp1.get(i).get(0).toString());
										}
									}*/
									for(int i=0;i<results_temp1.size();i++)
									{
										if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
										{}else{
											tempArticles.add(results_temp1.get(i).get(0).toString());										
										}
									}
									if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
									}
									tempArticles.clear();
									
									int artcount;
									if(tempArticles.size()==0)
									{
										artcount=1;
									}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount--;
									}}
									List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"OM","line", results,displayArt,
											OrderNo,articlcount,tempArticles,driver,"",results,"","",tempArticles);
									int size = editArtListApp1.size();
									String rw = editArtListApp1.get(size-1).get(0).toString();
									String ZQ = editArtListApp1.get(size-1).get(1).toString();
									String TR = editArtListApp1.get(size-1).get(2).toString();
									String sizes = editArtListApp1.get(size-1).get(3).toString();
									int sizee =Integer.parseInt(sizes);
									String ps = editArtListApp1.get(size-1).get(4).toString();
									editArtListApp1.remove(size-1);
									////System.out.println(editArtListApp1);
									objOrderEnquiryObjects.nextClick.click();
									waitFor(0.5);
									
									
									List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
									
									String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);
									
									
									
									objOrderEnquiryObjects.nextClick.click();
									waitFor(0.5);
								//	int sizee= articlcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
									int count = articlcount-displayArt.size();
									List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
											articlcount,sizee,ZQ,driver);
									//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
									//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
									//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
									objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
									objOrderEnquiryObjects.submit.click();
									objOrderEnquiryObjects.continues.click();
									objOrderEnquiryPage.waitFn(driver);
									if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
									{
										if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
										}
										objOrderEnquiryObjects.sucClose.click();
										waitFor(1);
										//String username = objOrderEnquiryObjects.username.getText();
										List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
												totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw,driver,"");
										//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw);
										objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
										objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
										waitFor(1);
									}
									waitFor(2);
									RevertOrder(OrderNo);									
									SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
								}
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}	
				status.assertAll();			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by line")
			public void ReceiveLineByLines() //throws SQLException, IOException, AWTException, ParseException
			{
					if(orderEnqArtpreCount2==-1){
						OEcount=OEcount+38;}
						TestStatus status = getTestStatus();
						try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";		
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();			
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								if(objOrderEnquiryObjects.receiveLBLCB.getAttribute("checked").equals("true"))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Receive line by line is checkd by default;;;Pass");
									if(objOrderEnquiryObjects.YesCheckList.size()>0)
									{
										if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
											objOrderEnquiryObjects.YesCheck.click();	
										}
									}
									String docket = "abc123";
									if(objOrderEnquiryObjects.docket.isDisplayed()){
									objOrderEnquiryObjects.docket.sendKeys(docket);}
									else{docket="NA";}
									if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
									{CT="NA"; CT1="";}
									else{CT=CT1="2.00";
										objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
									}
									if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
									{FT="NA";FT1="";}
									else{FT=FT1="-17.00";
										objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
									}
									//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
									objOrderEnquiryObjects.nextClick.click();
									objOrderEnquiryPage.waitFn(driver);
									waitFor(0.5);
									ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
									results = sql.executeQuery(getContext(), ArtList);
									replacenullToZero(results);
									for(int i=0;i<results.size();i++)
									{
										if(results.get(i).get(10).toString().equals("Y"))
										{
											appendTwoColumns(results, i, 1, 2);
											appendTwoColumns(results, i, 4, 5);
										}
									}
									removeIndex(results, "2");
									ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
									results_temp1 = sql.executeQuery(getContext(), ArtList);
									replacenullToZero(results_temp1);
									List tempArticles = new ArrayList();
									/*for(int i=0;i<results_temp1.size();i++)
									{
										if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
										{
											tempArticles.add(results_temp1.get(i).get(0).toString());
										}
									}*/
									for(int i=0;i<results_temp1.size();i++)
									{
										if(results_temp1.get(i).get(14).toString().equals(" ")||results_temp1.get(i).get(14).toString()==null||results_temp1.get(i).get(14).toString().equals("0")||results_temp1.get(i).get(14).toString().equals(""))
										{}else{
											tempArticles.add(results_temp1.get(i).get(0).toString());										
										}
									}
									if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
									}
									tempArticles.clear();
									int artcount;
									if(tempArticles.size()==0)
									{
										artcount=1;
									}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount--;
									}}
									List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","line", results,displayArt,
											OrderNo,articlcount,tempArticles,driver,"",results,"","",tempArticles);
									int size = editArtListApp1.size();
									String rw = editArtListApp1.get(size-1).get(0).toString();
									String ZQ = editArtListApp1.get(size-1).get(1).toString();
									String TR = editArtListApp1.get(size-1).get(2).toString();
									String sizes = editArtListApp1.get(size-1).get(3).toString();
									int sizee =Integer.parseInt(sizes);
									String ps = editArtListApp1.get(size-1).get(4).toString();
									editArtListApp1.remove(size-1);
									////System.out.println(editArtListApp1);
									objOrderEnquiryObjects.nextClick.click();
									waitFor(0.5);
									
									List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
									String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);
									
									objOrderEnquiryObjects.nextClick.click();
									waitFor(0.5);
								//	int sizee= articlcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
									int count = articlcount-displayArt.size();
									List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
											articlcount,sizee,ZQ,driver);
									//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
									//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
									//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
									objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
									objOrderEnquiryObjects.submit.click();
									objOrderEnquiryObjects.continues.click();
									objOrderEnquiryPage.waitFn(driver);
									if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
									{
										if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
										}
										objOrderEnquiryObjects.sucClose.click();
										waitFor(1);
										String username = objOrderEnquiryPage.username(driver);
										//String username = objOrderEnquiryObjects.username.getText();
										List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
												totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw,driver,"");
										//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw);
										objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
										objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
										waitFor(1);
									}
									waitFor(2);
									RevertOrder(OrderNo);									
									SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
								}
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				status.assertAll();
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by line with Temperature check")
			public void ReceiveLineByLineTempCheck() //throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+19;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";					
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();		
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								if(objOrderEnquiryObjects.receiveLBLCB.getAttribute("checked").equals("true"))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Receive line by line is checkd by default;;;Pass");
									if(objOrderEnquiryObjects.YesCheckList.size()>0)
									{
										if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
											objOrderEnquiryObjects.YesCheck.click();	
										}
									}
									String docket = "abc123";
									if(objOrderEnquiryObjects.docket.isDisplayed()){
									objOrderEnquiryObjects.docket.sendKeys(docket);}
									else{docket="NA";}
									if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
									{CT="NA"; CT1="";}
									else{CT=CT1="6.00";
										objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
									}
									if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
									{FT="NA";FT1="";}
									else{FT=FT1="-17.00";
										objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
									}
									//objOrderEnquiryObjects.ChilledTemp.sendKeys("6");
									objOrderEnquiryObjects.nextClick.click();
									objOrderEnquiryPage.waitFn(driver);
									waitFor(0.5);
									if(objOrderEnquiryObjects.Tempcheck.isDisplayed())
									{
										String msg = objOrderEnquiryObjects.Tempcheck.getText();
										if(msg.contains("Temperature out of range"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "Temperature check msg - "+msg+" displayed;;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "Temperature check msg - "+msg+";;;Fail");
										}
										objOrderEnquiryObjects.Tempchecknext.click();
										/*waitFor(1);
										objOrderEnquiryObjects.nextClick.click();*/
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature validation not shown;;;Fail");
									}
									ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
									results = sql.executeQuery(getContext(), ArtList);
									replacenullToZero(results);
									for(int i=0;i<results.size();i++)
									{
										if(results.get(i).get(10).toString().equals("Y"))
										{
											appendTwoColumns(results, i, 1, 2);
											appendTwoColumns(results, i, 4, 5);
										}
									}
									ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
									results_temp1 = sql.executeQuery(getContext(), ArtList);
									replacenullToZero(results_temp1);
									List tempArticles = new ArrayList();
									for(int i=0;i<results_temp1.size();i++)
									{
										if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
										{}else{
											tempArticles.add(results_temp1.get(i).get(0).toString());										
										}
									}
									if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
									}
									removeIndex(results, "2");	
									int artcount;
									if(tempArticles.size()==0)
									{
										artcount=1;
									}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount--;
									}}
									List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","line", results,displayArt,
											OrderNo,articlcount,tempArticles,driver,"",results,"","",tempArticles);
									int size = editArtListApp1.size();
									String rw = editArtListApp1.get(size-1).get(0).toString();
									String ZQ = editArtListApp1.get(size-1).get(1).toString();
									String TR = editArtListApp1.get(size-1).get(2).toString();
									String sizes = editArtListApp1.get(size-1).get(3).toString();
									int sizee = Integer.parseInt(sizes);
									String ps = editArtListApp1.get(size-1).get(4).toString();
									editArtListApp1.remove(size-1);
									////System.out.println(editArtListApp1);
									objOrderEnquiryObjects.nextClick.click();
									
									List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
									String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);
									
									objOrderEnquiryObjects.nextClick.click();
									waitFor(0.5);
									//int sizee= articlcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
									int count = articlcount-displayArt.size();
									List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
											articlcount,sizee,ZQ,driver);
									//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("6.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
									//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
									//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("6.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
									objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
									objOrderEnquiryObjects.submit.click();
									if(articlcount==tempArticles.size()){}else{
									objOrderEnquiryObjects.continues.click();}
									objOrderEnquiryPage.waitFn(driver);
									if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
									{
										if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
										{
											htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
										}
										else
										{
											htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
										}
										waitFor(1);
										objOrderEnquiryObjects.sucClose.click();
										waitFor(1);
										String username = objOrderEnquiryPage.username(driver);
										//String username = objOrderEnquiryObjects.username.getText();
										List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
												totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw,driver,"");
										//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("6.00","","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY LINE",rw);
										objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
										objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
										waitFor(1);
									}
									waitFor(2);
									RevertOrder(OrderNo);									
									SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
								}
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by Exception")
			public void ReceiveLineByExceptions() //throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+19;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";					
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();	
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					Orderlist = data.getText("OrderList1").replace("suppno",(results.get(0).get(4).toString()));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("VENDOR");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals("N")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("negativeStatus")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-16.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								//objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								objOrderEnquiryObjects.nextClick.click();
								objOrderEnquiryPage.waitFn(driver);
								waitFor(0.5);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 4, 5);
									}
								}
								/*int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/

								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount;
								if(tempArticles.size()==0)
								{
									artcount=1;
								}else{
								artcount = (articlcount-tempArticles.size())+1;
								if(artcount==articlcount){
									artcount = artcount--;
								}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00","",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								//int sizee= articlcount-displayArt.size()-Integer.parseInt(ZQ);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("2.00",a, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("2.00","NA","abc123",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by Exception IBT by rejecting not ranged articles")
			public void ReceiveIBTByExceptionRejectNR() //throws SQLException, IOException, AWTException, ParseException
			{


				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+10;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";				
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();		
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					String supp = results.get(0).get(4).toString();
					Orderlist = data.getText("OrderList1").replace("suppno",getContext().getStringProperty("store"));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						Vendor.add(results.get(0).get(0).toString());
						Orderlist = data.getText("OrderList1").replace("suppno",supp);
						results = sql.executeQuery(getContext(), Orderlist);
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("STOCK TRANSFER");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(results.get(0).get(0).toString());
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							//Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals(" ")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).contains("hideBlock")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							int ran=0;int ct=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}		
								removeIndex(results, "14");
								removeIndex(results, "2");	
								
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);								
							//	objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								waitFor(0.5);
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-17.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								/*if(objOrderEnquiryObjects.frozenTemp.getAttribute("class").contains("hide"))
								{}else{
									objOrderEnquiryObjects.frozenTemp.sendKeys("-17");
								}*/
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(14).toString().equals("DA")||results.get(i).get(14).toString().equals("ES"))
									{ran++; ct=1;}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}/*
								int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								//objOrderEnquiryObjects.nextClick.click();
								
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount = 0;
								if(tempArticles.size()==0 && ran>=1 && articlcount>2)
								{
									if(ran>1){
										if(ran==articlcount){
											htmlToExtent(cName,mName,extLogger,driver, "Exception cannot be proceeded"+OrderNo+";;;Fail");
										}else{
											artcount=articlcount-1;
										}
									}else{
									artcount=2;}
								}else if(articlcount==2 && ran==1){
									artcount=1;
								}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount-1;
									}}
								
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(14).toString().equals("DA")||results.get(i).get(14).toString().equals("ES"))
									{ran++; ct=1; tempArticles.add(results.get(i).get(0).toString());}
								}
								waitFor(1);
								if(ct==1)
								{
									objOrderEnquiryObjects.rejectNR.click();
									htmlToExtent(cName,mName,extLogger,driver, "Not Ranged articles rejected for order "+OrderNo+";;;Pass");
								}
								else
								{
									objOrderEnquiryObjects.rejectNR.click();
									htmlToExtent(cName,mName,extLogger,driver, "Not Ranged articles rejected for order "+OrderNo+", but its not displayed in DB;;;Fail");
								}								
								removeIndex(results, "14");	removeIndex(results, "2");	
								
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","NR",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								
								
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
										articlcount,sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("","-17.00",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("NA","-17.00","NA",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();			
			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by Exception IBT by accepting not ranged articles")
			public void ReceiveIBTByExceptionAcceptNR() //throws SQLException, IOException, AWTException, ParseException
			{

				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+10;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";				
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();		
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					String supp = results.get(0).get(4).toString();
					Orderlist = data.getText("OrderList1").replace("suppno",getContext().getStringProperty("store"));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						Vendor.add(results.get(0).get(0).toString());
						Orderlist = data.getText("OrderList1").replace("suppno",supp);
						results = sql.executeQuery(getContext(), Orderlist);
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("STOCK TRANSFER");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(results.get(0).get(0).toString());
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							//Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals(" ")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).contains("hideBlock")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							int ran=0;int ct=0;
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}		
								removeIndex(results, "14");
								removeIndex(results, "2");	
								
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);								
							//	objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								waitFor(0.5);
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-17.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								/*if(objOrderEnquiryObjects.frozenTemp.getAttribute("class").contains("hide"))
								{}else{
									objOrderEnquiryObjects.frozenTemp.sendKeys("-17");
								}*/
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}/*
								int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								//objOrderEnquiryObjects.nextClick.click();
								
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount = 0;
								if(tempArticles.size()==0 && ran>=1 && articlcount>2)
								{
									if(ran>1){
										if(ran==articlcount){
											htmlToExtent(cName,mName,extLogger,driver, "Exception cannot be proceeded"+OrderNo+";;;Fail");
										}else{
											artcount=articlcount-1;
										}
									}else{
									artcount=2;}
								}else if(articlcount==2 && ran==1){
									artcount=1;
								}else{
									artcount = (articlcount-tempArticles.size())+1;
									if(artcount==articlcount){
										artcount = artcount-1;
									}}
								
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(14).toString().equals("DA")||results.get(i).get(14).toString().equals("ES"))
									{ran++; ct=1; tempArticles.add(results.get(i).get(0).toString());}
								}
								waitFor(1);
								if(ct==1)
								{
									objOrderEnquiryObjects.acceptNR.click();
									objOrderEnquiryObjects.acceptNR1.click();
									htmlToExtent(cName,mName,extLogger,driver, "Not Ranged articles accepted for order "+OrderNo+";;;Pass");
								}
								else
								{
									objOrderEnquiryObjects.acceptNR.click();
									objOrderEnquiryObjects.acceptNR1.click();
									htmlToExtent(cName,mName,extLogger,driver, "Not Ranged articles accepted for order "+OrderNo+", but its not displayed in DB;;;Fail");
								}								
								removeIndex(results, "14");	removeIndex(results, "2");	
								
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","NR",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								
								
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
										articlcount,sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("","-17.00",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("NA","-17.00","NA",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();			
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check Receive line by Exception IBT")
			public void ReceiveLineByExceptionIBT() //throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+20;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";				
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();		
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					String supp = results.get(0).get(4).toString();
					Orderlist = data.getText("OrderList1").replace("suppno",getContext().getStringProperty("store"));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						Vendor.add(results.get(0).get(0).toString());
						Orderlist = data.getText("OrderList1").replace("suppno",supp);
						results = sql.executeQuery(getContext(), Orderlist);
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("STOCK TRANSFER");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(results.get(0).get(0).toString());
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							//Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals(" ")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).contains("hideBlock")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");	
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();waitFor(1);								
							//	objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
								
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
								waitFor(0.5);
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="2.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-17.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								/*if(objOrderEnquiryObjects.frozenTemp.getAttribute("class").contains("hide"))
								{}else{
									objOrderEnquiryObjects.frozenTemp.sendKeys("-17");
								}*/
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}/*
								int artcount=0;
								if(articlcount>=2)
								{
									artcount=1;
								}*/
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().isEmpty()||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								//objOrderEnquiryObjects.nextClick.click();
								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								tempArticles.clear();
								int artcount;
								if(tempArticles.size()==0)
								{
									artcount=1;
								}else{
								artcount = (articlcount-tempArticles.size())+1;
								if(artcount==articlcount){
									artcount = artcount--;
								}}
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								
								
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,
										articlcount,sizee,ZQ,driver);
								//List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB("","-17.00",count,TR, objOrderEnquiryObjects, totalCartons,articlcount,sizee,ZQ);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, 
											totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									//List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB("NA","-17.00","NA",TR, objOrderEnquiryObjects, totalCartons, articlcount, sizee, "RECEIVE BY EXCEPTION",rw);
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			
			@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "verify Temperature Check Receive line by Exception IBT")
			public void ReceiveLineByExceptionIBTTempCheck() //throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+20;}
				TestStatus status = getTestStatus();
				try{
				navToOrderEnquiry(status);
				String FT="";String FT1="";String CT="";String CT1="";			
				String OrderNo ="";
				if(StoreNo.equals("1108"))
				{
					OrderNo = data.getText("ONo");
				}
				if(StoreNo.equals("1786"))
				{
					OrderNo = data.getText("SITStore");
				}
					OrderNo=OrderNo.trim();			
				
				RevertOrder(OrderNo);
				
				String ord = objOrderEnquiryPage.OrderSearch(objOrderEnquiryObjects, OrderNo,driver);

				if(ord.equals("tru")){

				//orderListTable comparision
				List OrdL = new ArrayList();
				List Vendor = new ArrayList();				
				List displayArt = new ArrayList();
				List<List<Object>> OrderListDB = new ArrayList<List<Object>>();
				List<List<Object>> vendorDetails = new ArrayList<List<Object>>();
				List<List<Object>> OrderTable = new ArrayList<List<Object>>();
				String Orderlist = data.getText("OrderList").replace("ordno",OrderNo);
				results = sql.executeQuery(getContext(), Orderlist);	
				if(results.size()!=0)
				{
					OrdL.add(results.get(0).get(0).toString());
					OrdL.add(results.get(0).get(1).toString());
					String del_date = results.get(0).get(1).toString();
					String onshow_date = results.get(0).get(2).toString();
					OrdL.add("AUTHORISED");
					String supp = results.get(0).get(4).toString();
					Orderlist = data.getText("OrderList1").replace("suppno",getContext().getStringProperty("store"));
					results = sql.executeQuery(getContext(), Orderlist);			
					if(results.size()!=0)
					{
						Vendor.add(results.get(0).get(0).toString());
						Orderlist = data.getText("OrderList1").replace("suppno",supp);
						results = sql.executeQuery(getContext(), Orderlist);
						OrdL.add(results.get(0).get(0).toString());
						OrdL.add("STOCK TRANSFER");
						Vendor.add(results.get(0).get(0).toString());
						Vendor.add(del_date);
						Orderlist = data.getText("OrderList2").replace("ordno",OrderNo);
						results = sql.executeQuery(getContext(), Orderlist);	
						if(results.size()!=0)
						{
							String totalCartons = results.get(0).get(0).toString();
							if(totalCartons.contains("."))
							{
								totalCartons=totalCartons.replaceAll("\\.?0+$","");
							}
							OrdL.add(totalCartons);
							OrderListDB.add(OrdL);

							List finalCompare = objOrderEnquiryPage.OrderListComparision(objOrderEnquiryObjects, OrderListDB,driver);

							//Vendor Details comparision
							Vendor.add(finalCompare.get(0).toString());
							//Vendor.add(onshow_date);
							Vendor.add("AUTHORISED");
							vendorDetails.add(Vendor);
							objOrderEnquiryPage.VendorListComparision(objOrderEnquiryObjects, vendorDetails,driver);

							String temperature = "";
							if(objOrderEnquiryObjects.tempflagStatus1.size()==1)
							{
								temperature = objOrderEnquiryObjects.tempflagStatus.getAttribute("class");
							}
							else
							{
								temperature = "negativeStatus";
							}
							
							/*String tempFlag = data.getText("Tempflag").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), tempFlag);
							if(results.size()!=0)
							{
								if(((results.get(0).get(0).toString().equals("Y")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).equals("positiveStatus"))||
										((results.get(0).get(0).toString().equals(" ")) && (objOrderEnquiryObjects.tempflagStatus.getAttribute("class")).contains("hideBlock")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
							}*/
							
							String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
							results = sql.executeQuery(getContext(), ArtList);
							replacenullToZero(results);
							if(results.size()!=0)
							{
								List orderT = new ArrayList();
								orderT.add(finalCompare.get(1).toString());
								int articlcount = results.size();
								orderT.add(""+articlcount);	OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add(totalCartons); OrderTable.add(orderT);
								orderT = new ArrayList();
								orderT.add("NA"); orderT.add("NA");	OrderTable.add(orderT);
								objOrderEnquiryPage.vendorOrderComparision(objOrderEnquiryObjects, OrderTable,driver);
								objOrderEnquiryObjects.clearGroupBy.click();
								List res1 = new ArrayList();
								List<List<Object>> res = new ArrayList<List<Object>>();
								List dispArticles = new ArrayList();
								List cpbdArticles = new ArrayList();
								for(int i=0;i<results.size();i++)
								{
									if((results.get(i).get(13).toString().equals("Y"))&&(results.get(i).get(11).toString()).equals("0"))
									{
										displayArt.add(results.get(i).get(0).toString());
										String dispArtList = data.getText("dispArtList").replace("ordno",OrderNo).replace("artno", results.get(i).get(0).toString());
										results1 = sql.executeQuery(getContext(), dispArtList);
										for (Iterator<List<Object>> it = results1.iterator(); it.hasNext();) 
										{												
											List<Object> elem = it.next(); 
											dispArticles.add(elem.get(0).toString());
											res1 = new ArrayList();
											for(int s =0;s<elem.size();s++) {
												res1.add(elem.get(s).toString());
											}
											res.add(res1);
										}
									}
									if((results.get(i).get(11).toString()).equals("1"))
									{
										cpbdArticles.add(results.get(i).get(0).toString());
									}
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}						
								removeIndex(results, "2");					
								
								objOrderEnquiryPage.articleListTableComparision(objOrderEnquiryObjects, results, articlcount, displayArt, res, OrderNo,driver,"");
								objOrderEnquiryPage.receiveOrderClick(objOrderEnquiryObjects,driver);waitFor(2);
								objOrderEnquiryObjects.receiveLBECB.click();
								waitFor(1);
								if(objOrderEnquiryObjects.YesCheckList.size()>0)
								{
									if(objOrderEnquiryObjects.YesCheck.isDisplayed()){
										objOrderEnquiryObjects.YesCheck.click();	
									}
								}
								String docket = "abc123";
								if(objOrderEnquiryObjects.docket.isDisplayed()){
								objOrderEnquiryObjects.docket.sendKeys(docket);}
								else{docket="NA";}
							//	objOrderEnquiryObjects.ChilledTemp.sendKeys("2");
							//	objOrderEnquiryObjects.advDeldatealertOK.click();
								waitFor(0.5);
								if(objOrderEnquiryObjects.ChilledTempPresence.getAttribute("class").contains("hide"))
								{CT="NA"; CT1="";}
								else{CT=CT1="6.00";
									objOrderEnquiryObjects.ChilledTemp.sendKeys(CT);
								}
								if(objOrderEnquiryObjects.frozenTempPresence.getAttribute("class").contains("hide"))
								{FT="NA";FT1="";}
								else{FT=FT1="-12.00";
									objOrderEnquiryObjects.frozenTemp.sendKeys(FT);
								}
								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								if(objOrderEnquiryObjects.frozenTempCheck.isDisplayed())
								{
									objOrderEnquiryObjects.frozenTempCheck.click();
									htmlToExtent(cName,mName,extLogger,driver, "High Frozen Temp Info is displayed;;;Pass"); 
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "High Frozen Temp Info is not displayed;;;Fail");
								}
								ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
								results = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results);
								for(int i=0;i<results.size();i++)
								{
									if(results.get(i).get(10).toString().equals("Y"))
									{
										appendTwoColumns(results, i, 1, 2);
										appendTwoColumns(results, i, 4, 5);
									}
								}								
								ArtList = data.getText("OrderArtListTemp").replace("ordno",OrderNo);
								results_temp1 = sql.executeQuery(getContext(), ArtList);
								replacenullToZero(results_temp1);
								List tempArticles = new ArrayList();
								/*for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());
									}
								}*/
								for(int i=0;i<results_temp1.size();i++)
								{
									if(results_temp1.get(i).get(13).toString().equals(" ")||results_temp1.get(i).get(13).toString()==null||results_temp1.get(i).get(13).toString().equals("0")||results_temp1.get(i).get(13).toString().equals(""))
									{}else{
										tempArticles.add(results_temp1.get(i).get(0).toString());										
									}
								}
								//objOrderEnquiryObjects.nextClick.click();

								removeIndex(results, "2");	
								if((tempArticles.size()>0 && (temperature).contains("positiveStatus"))||(tempArticles.size()==0 && (temperature).equals("negativeStatus"))||(tempArticles.size()==0 && (temperature).contains("hide")))
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag matched with backend;;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Temperature flag mismatched with backend;;;Fail");
								}
								int artcount;
								if(tempArticles.size()==0)
								{
									artcount=1;
								}else{
								artcount = (articlcount-tempArticles.size())+1;
								if(artcount==articlcount){
									artcount = artcount-1;
								}}
								//System.out.println("1."+results);
								List<List<Object>> editArtListApp1=objOrderEnquiryPage.editArtListComparision(objOrderEnquiryObjects,"","Exception", results,displayArt,
										OrderNo,artcount,tempArticles,driver,"",results,"","",tempArticles);
								////System.out.println(editArtListApp1);
								int size = editArtListApp1.size();
								String rw = editArtListApp1.get(size-1).get(0).toString();
								String ZQ = editArtListApp1.get(size-1).get(1).toString();
								String TR = editArtListApp1.get(size-1).get(2).toString();
								String sizes = editArtListApp1.get(size-1).get(3).toString();
								int sizee = Integer.parseInt(sizes);
								String ps = editArtListApp1.get(size-1).get(4).toString();
								editArtListApp1.remove(size-1);
								objOrderEnquiryObjects.nextClick.click();
								waitFor(0.5);
								try{
								if(objOrderEnquiryObjects.exceptionError.isDisplayed())
								{
									objOrderEnquiryObjects.exceptionProceed.click();
									htmlToExtent(cName,mName,extLogger,driver, "Exception displayed for Receive line by Exception for order "+OrderNo+";;;Pass");
								}
								else
								{
									htmlToExtent(cName,mName,extLogger,driver, "Exception not displayed for Receive line by Exception for order "+OrderNo+";;;Fail");
								}}catch(Exception e){}

								List<List<Object>> SOHApp = SOHbefore(editArtListApp1, OrderNo, displayArt,cpbdArticles,"","");
								String[] a = objOrderEnquiryPage.finalartListComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,dispArticles,driver);

								objOrderEnquiryObjects.nextClick.click();
								waitFor(1);
								objOrderEnquiryObjects.nextClick.click();
								
								
								//int sizee= artcount; //articlcount-displayArt.size()-Integer.parseInt(ZQ);
								int count = articlcount-displayArt.size();
								List<List<Object>> finalart = objOrderEnquiryPage.receivesummaryDB(ps,CT1,FT1,count,TR, objOrderEnquiryObjects, totalCartons,articlcount,
										sizee,ZQ,driver);
								objOrderEnquiryPage.receiveSummaryComparision(objOrderEnquiryObjects, finalart, OrderNo,driver);	
								objOrderEnquiryObjects.submit.click();
								objOrderEnquiryObjects.continues.click();
								objOrderEnquiryPage.waitFn(driver);
								if(objOrderEnquiryObjects.Checksuccessmsg.isDisplayed())
								{
									if(objOrderEnquiryObjects.Checksuccessmsg.getText().equals("Receiving Details Posted Successfully"))
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details Posted Successfully for order "+OrderNo+";;;Pass");
									}
									else
									{
										htmlToExtent(cName,mName,extLogger,driver, "Receiving Details not Posted Successfully for order "+OrderNo+";;;Fail");	
									}
									objOrderEnquiryObjects.sucClose.click();
									waitFor(1);
									String username = objOrderEnquiryPage.username(driver);
									//String username = objOrderEnquiryObjects.username.getText();
									List<List<Object>> finalart1 = objOrderEnquiryPage.receivefinalsummaryDB(username,CT,FT,docket,TR, objOrderEnquiryObjects, totalCartons, 
											articlcount, sizee, "RECEIVE BY EXCEPTION",rw,driver,"");
									objOrderEnquiryPage.receiveFinalSummaryComparision(objOrderEnquiryObjects, finalart1, OrderNo,driver);
									editColumn(editArtListApp1, 6);
									objOrderEnquiryPage.finalarticleListTableComparision(objOrderEnquiryObjects, editArtListApp1, OrderNo,displayArt,driver,"",results,"","");
									waitFor(1);
								}
								waitFor(2);
								RevertOrder(OrderNo);									
								SOHafter(OrderNo, SOHApp, displayArt,cpbdArticles);
							}
							else
							{
								htmlToExtent(cName,mName,extLogger,driver, "Article list Details for order "+OrderNo+" not available in backend;;;Fail");
							}
						}
						else
						{
							htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
						}
					}
					else
					{
						htmlToExtent(cName,mName,extLogger,driver, "Supplier name not available in backend;;;Fail");
					}
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "order details not available in backend;;;Fail");
				}
				}
				log.info("-----------------Logout from Application------------------");
				waitFor(1);
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				}catch(Exception e)
				{
					 isExceptionCaptured=writeException(cName,mName,extLogger,driver,e);
				}
				status.assertAll();
			}
			public List SOH(String OrderNo,List displayArt,List cpbdArticles) throws Exception
			{
				List soh = new ArrayList();
				String SOHsql = data.getText("SOH").replace("ordNo",OrderNo);
				results_SOH = sql.executeQuery(getContext(), SOHsql);
				replacenullToZero(results_SOH);
				soh.addAll(results_SOH);
				List del = new ArrayList();
				for(int i=0;i<results_SOH.size();i++)
				{
					if(results_SOH.get(i).get(3).toString().equals("Y"))
					{
						appendTwoColumns(results_SOH, i, 1, 2);
					}
					if((results_SOH.get(i).get(6).toString().equals("Y"))&&(results_SOH.get(i).get(4).toString()).equals("0"))
					{
						del.add(i);
					}
					if((results_SOH.get(i).get(4).toString()).equals("1"))
					{
						del.add(i);
					}
				}
				for(int y=del.size()-1;y>=0;y--)
				{
					int s = (int) del.get(y); 
					results_SOH.remove(s);
				}	
				removeIndex(results_SOH, "6");removeIndex(results_SOH, "5");removeIndex(results_SOH, "4");removeIndex(results_SOH, "3");removeIndex(results_SOH, "2");
				for(int u=0;u<displayArt.size();u++)
				{
					SOHsql = data.getText("dispSOH").replace("ordNo",OrderNo).replace("artno", displayArt.get(u).toString());
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					soh.addAll(results_SOH);
				}
				for(int u=0;u<cpbdArticles.size();u++)
				{
					SOHsql = data.getText("cpbdArt").replace("artno", cpbdArticles.get(u).toString());
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					String cpbd = results_SOH.get(0).get(0).toString();
					SOHsql = data.getText("cpbd").replace("artno",cpbd);
					results_SOH1 = sql.executeQuery(getContext(), SOHsql);
					cpbd = results_SOH1.get(0).get(0).toString();
					SOHsql = data.getText("cpbdSOHafter").replace("artno", cpbd);
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					soh.addAll(results_SOH);
				}
				return soh;	
			}
			
			
			public List<List<Object>> SOHbefore(List<List<Object>> editArtListApp1,String OrderNo,List displayArt,List cpbdArticles,
					String article,String sell) throws IOException //throws SQLException, IOException
			{
				if(sell.equals("sell")){
					for(int i=0;i<editArtListApp1.size();i++)			
					{
						int h=i,j=0;
						if(i!=editArtListApp1.size()-1){j=h+1;}else{j=0;}
						if(editArtListApp1.get(h).get(0).toString().equals(editArtListApp1.get(j).get(0).toString()))
						{
							String[] sooh = splitString(editArtListApp1.get(h).get(7).toString()," ");
							String[] sooh1 = splitString(editArtListApp1.get(j).get(7).toString()," ");
							double y = Double.parseDouble(sooh[0])+Double.parseDouble(sooh1[0]);
							String value = ""+y+" "+sooh[1];
							replaceColumnValue(editArtListApp1, h, 7, value);
							editArtListApp1.remove(j);
						}
					}}
				List<List<Object>> SOHApp = new ArrayList<List<Object>>();
				//System.out.println(editArtListApp1);
				String SOHsql = data.getText("SOHbefore").replace("ordNo",OrderNo);
				try {
					results_SOH = sql.executeQuery(getContext(), SOHsql);			
				replacenullToZero(results_SOH);
				for(int soh=0;soh<results_SOH.size();soh++)
				{
					for(int sohapp=0;sohapp<editArtListApp1.size();sohapp++)
					{
						List SOH = new ArrayList();
						if(results_SOH.get(soh).get(0).toString().trim().equals(editArtListApp1.get(sohapp).get(0).toString().trim()))
						{							
							String sohValue = editArtListApp1.get(sohapp).get(7).toString();//6-7
							String omvalue = editArtListApp1.get(sohapp).get(1).toString();
							String art = editArtListApp1.get(sohapp).get(0).toString();
							if(art.equals(article)){}else{
							if(cpbdArticles.contains(art))
							{
								String cpbdart = results_SOH.get(soh).get(6).toString();
								SOHsql = data.getText("cpbd").replace("artno",cpbdart);
								results_SOH1 = sql.executeQuery(getContext(), SOHsql);
								cpbdart = results_SOH1.get(0).get(0).toString();
								String om = results_SOH1.get(0).get(2).toString();
								double om1 = Double.parseDouble(om);
								String[] om2 = splitString(omvalue, " ");
								double om3 = Double.parseDouble(om2[0]);
								SOHsql = data.getText("cpbdSOH").replace("artno",cpbdart);
								results_SOH1 = sql.executeQuery(getContext(), SOHsql);
								String[] SOHH = splitString(sohValue, " ");
								double y = (Double.parseDouble(SOHH[0])*(om1/om3))+Double.parseDouble(results_SOH1.get(0).get(1).toString());
								String x = Double.toString(y);
								if(x.contains("."))
								{
									x= x.replaceAll("\\.?0+$","");
								}
								SOH.add(cpbdart);
								SOH.add(x+" "+results_SOH1.get(0).get(2).toString());
								SOHApp.add(SOH);
								//System.out.println(SOHApp);
							}
							else if((sohValue.contains("("))||(results_SOH.get(soh).get(4).toString()).equals("Y"))
							{
								if(sohValue.contains("("))
								{
									String myRegex = "[(]";
									String[] af = splitString(sohValue, myRegex);
									String[] ag  = splitString(af[0], " ");
									String[] an  = splitString(af[1], " ");
									an[0]=an[0].replace(myRegex, "");
									double y = Double.parseDouble(ag[0])+Double.parseDouble(results_SOH.get(soh).get(1).toString());
									String[] randwt = splitString(results_SOH.get(soh).get(3).toString(), " "); 
									double z = Double.parseDouble(an[0])+Double.parseDouble(randwt[0]);
									y= round(y, 3);
									String x = Double.toString(y);
									if(x.contains("."))
									{ 
										x= x.replaceAll("\\.?0+$","");
									}
									String w = Double.toString(z);
									if(w.contains("."))
									{
										w= w.replaceAll("\\.?0+$","");
									}
									SOH.add(art);
									SOH.add(x+" "+results_SOH.get(soh).get(2).toString() + " (" +w+ " " +randwt[1]+")");
									SOHApp.add(SOH);
								}
								else
								{
									SOH.add(art);
									String r = results_SOH.get(soh).get(1).toString().replaceAll("\\.?0+$","");
									SOH.add(r+" "+results_SOH.get(soh).get(2).toString() + " (" +results_SOH.get(soh).get(3).toString()+")");
									SOHApp.add(SOH);
									/*SOH.add(art);
									SOH.add(results_SOH.get(soh).get(1).toString()+" "+results_SOH.get(soh).get(2).toString() + " (" +results_SOH.get(soh).get(3).toString()+")");
									SOHApp.add(SOH);*/
								}
							}
							else
							{
								String[] SOHH = splitString(sohValue, " ");
								double y = Double.parseDouble(SOHH[0])+Double.parseDouble(results_SOH.get(soh).get(1).toString());
								String x = Double.toString(y);
								if(x.contains("."))
								{
									x= x.replaceAll("\\.?0+$","");
								}
								SOH.add(art);
								SOH.add(x+" "+results_SOH.get(soh).get(2).toString());
								SOHApp.add(SOH);
							}
							break;}
						}
						else
						{
							continue;
						}
					}
				}
				for(int u=0;u<displayArt.size();u++)
				{										
					SOHsql = data.getText("dispSOHbefore").replace("ordNo",OrderNo).replace("artno", displayArt.get(u).toString());
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					replacenullToZero(results_SOH);
					for(int soh=0;soh<results_SOH.size();soh++)
					{
						for(int sohapp=0;sohapp<editArtListApp1.size();sohapp++)
						{
							List SOH = new ArrayList();
							if(results_SOH.get(soh).get(0).toString().trim().equals(editArtListApp1.get(sohapp).get(0).toString().trim()))
							{
								String sohValue = editArtListApp1.get(sohapp).get(7).toString();//6-7
								String art = editArtListApp1.get(sohapp).get(0).toString();
								String[] SOHH = splitString(sohValue, " ");
								double y = Double.parseDouble(SOHH[0])+Double.parseDouble(results_SOH.get(soh).get(1).toString());
								String x = Double.toString(y);
								if(x.contains("."))
								{
									x= x.replaceAll("\\.?0+$","");
								}
								SOH.add(art);
								SOH.add(x+" "+results_SOH.get(soh).get(2).toString());
								SOHApp.add(SOH);
								break;
							}
							else
							{
								continue;
							}
						}
					}
				}
				}catch(Exception e){
					htmlToExtent(cName,mName,extLogger,driver, "Exception Occured: "+e.getClass().getSimpleName()+";;;Fail");
					e.printStackTrace();
				}
				return SOHApp;
			}
			
			public void SOHafter(String OrderNo,List<List<Object>> SOHApp,List displayArt,List cpbdArticles) //throws SQLException, IOException
			{
				String SOHsql = data.getText("SOH").replace("ordNo",OrderNo);
				try {
					results_SOH = sql.executeQuery(getContext(), SOHsql);
				replacenullToZero(results_SOH);
				List del = new ArrayList();
				for(int i=0;i<results_SOH.size();i++)
				{
					if(results_SOH.get(i).get(3).toString().equals("Y"))
					{
						appendTwoColumns(results_SOH, i, 1, 2);
					}
					if((results_SOH.get(i).get(6).toString().equals("Y"))&&(results_SOH.get(i).get(4).toString()).equals("0"))
					{
						del.add(i);
					}
					if((results_SOH.get(i).get(4).toString()).equals("1"))
					{
						del.add(i);
					}
				}
				for(int y=del.size()-1;y>=0;y--)
				{
					int s = (int) del.get(y); 
					results_SOH.remove(s);
				}
				htmlToExtent(cName,mName,extLogger,driver, "Comparing SOH values after changing the quantity for order - "+OrderNo+";;;Info");
				removeIndex(results_SOH, "6");removeIndex(results_SOH, "5");removeIndex(results_SOH, "4");removeIndex(results_SOH, "3");removeIndex(results_SOH, "2");
				htmlToExtent(cName,mName,extLogger,driver, "Application and DBList;"+results_SOH+";"+SOHApp+";Info");
				ElementContains1(cName, mName,extLogger,driver,  results_SOH, SOHApp);
				for(int u=0;u<displayArt.size();u++)
				{
					SOHsql = data.getText("dispSOH").replace("ordNo",OrderNo).replace("artno", displayArt.get(u).toString());
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					htmlToExtent(cName,mName,extLogger,driver, "Comparing SOH values after changing the quantity for display article - "+displayArt.get(u).toString()+" for order - "+OrderNo+";;;Info");
					//removeLastZero(results_SOH, 1);
					htmlToExtent(cName,mName,extLogger,driver, "Application and DBList;"+results_SOH+";"+SOHApp+";Info");
					ElementContains1(cName, mName,extLogger,driver,  results_SOH, SOHApp);
				}
				for(int u=0;u<cpbdArticles.size();u++)
				{
					SOHsql = data.getText("cpbdArt").replace("artno", cpbdArticles.get(u).toString());
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					String cpbd = results_SOH.get(0).get(0).toString();
					SOHsql = data.getText("cpbd").replace("artno",cpbd);
					results_SOH1 = sql.executeQuery(getContext(), SOHsql);
					cpbd = results_SOH1.get(0).get(0).toString();
					SOHsql = data.getText("cpbdSOHafter").replace("artno", cpbd);
					results_SOH = sql.executeQuery(getContext(), SOHsql);
					htmlToExtent(cName,mName,extLogger,driver, "Comparing SOH values after changing the quantity for CPBD article - "+cpbdArticles.get(u).toString()+" for order - "+OrderNo+";;;Info");
					//removeLastZero(results_SOH, 1);
					
					//System.out.println(results_SOH);//System.out.println(SOHApp);
					htmlToExtent(cName,mName,extLogger,driver, "Application and DBList;"+results_SOH+";"+SOHApp+";Info");
					ElementContains1(cName, mName,extLogger,driver,  results_SOH, SOHApp);
				}			
				}catch(Exception e){
					htmlToExtent(cName,mName,extLogger,driver, "Exception Occured: "+e.getClass().getSimpleName()+";;;Info");
					e.printStackTrace();
				}
				
				List<List<Object>> sohList = new ArrayList<List<Object>>();
				htmlToExtent(cName,mName,extLogger,driver, "Comparing manually Calculated SOH with ProductLookup SOH;;;Pass");
				waitFor(0.5);
				try {		
					String ArtList = data.getText("OrderArtList").replace("ordno",OrderNo);
					results = sql.executeQuery(getContext(), ArtList);
					for(int i=0;i<results.size();i++)
					{
						List sohh=new ArrayList();
						String ranArticle = results.get(i).get(0).toString();
						if(displayArt.contains(ranArticle)){
							SOHsql = data.getText("dispSOH").replace("ordNo",OrderNo).replace("artno", ranArticle);
							results_SOH = sql.executeQuery(getContext(), SOHsql);
							for(int k=0;k<results_SOH.size();k++)
							{
								ranArticle=results_SOH.get(k).get(0).toString();
								sohh=new ArrayList();
								sohh.add(ranArticle);
								objOrderEnquiryPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
								sohh = objOrderEnquiryPage.enterDetails(objOrderEnquiryObjects, objEnhancedArticleLookup, ranArticle, sohh,driver);
								sohList.add(sohh);	
							}
						}else{
							sohh.add(ranArticle);
							objOrderEnquiryPage.clickOnArticleReportReport(objEnhancedArticleLookup,driver);
							sohh = objOrderEnquiryPage.enterDetails(objOrderEnquiryObjects, objEnhancedArticleLookup, ranArticle, sohh,driver);
							sohList.add(sohh);	
						}
					}
				ElementContains1(cName, mName,extLogger,driver,  sohList, SOHApp);
				} catch (Exception e1) {
					htmlToExtent(cName,mName,extLogger,driver, "Exception Occured: "+e1.getClass().getSimpleName()+";;;Info");
					e1.printStackTrace();
				}
			}
			
			
			//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check whether order Enquiry details is loaded")
			public void orderEnquiry() throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+3;}
				TestStatus status = getTestStatus();
				navToOrderEnquiry(status);
				objOrderEnquiryPage.waitFn(driver);
				
				if(objOrderEnquiryObjects.orderEnqTable.isDisplayed())
				{
					htmlToExtent(cName,mName,extLogger,driver, "Order Enquiry details loaded succesfully;;;Pass");
					//Report_AddStep("testcase","Order Enquiry details loaded succesfully" , "", "", "Pass");
					//String articlesliq_sql = data.getText("getarticleliq");
					//results = sql.executeQuery(getContext(), articlesliq_sql);	
					//int a = results.size();
					String a = "431", b="1", c="30",d="21";
					//objOrderEnquiryPage.orderEnquiryDetail(objOrderEnquiryObjects,a,b,c,d);		
					htmlToExtent(cName,mName,extLogger,driver, "******Order Enquiry Tab verification with application details******;;;Pass");
					//Report_AddStep("testcase","******Order Enquiry Tab verification with application details******" , "", "", "");
					objOrderEnquiryPage.countmatch(objOrderEnquiryObjects,driver);
				}
				else
				{
					htmlToExtent(cName,mName,extLogger,driver, "Issue occurs while loading Order Enquiry details;;;Fail");
					//Report_AddStep("testcase","Issue occurs while loading Order Enquiry details" , "", "", "Pass");
				}
				
				waitFor(1);
				log.info("-----------------Logout from Application------------------");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				status.assertAll();
			}
			
			//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Verify Order Advance search details")
			public void orderAdvanceSearch() throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+7;}
				TestStatus status = getTestStatus();
				navToOrderEnquiry(status);
				objOrderEnquiryPage.waitFn(driver);

				if(objOrderEnquiryObjects.advanceSearch.isDisplayed())
				{
					objOrderEnquiryObjects.advanceSearch.click();
					objOrderEnquiryObjects.Go.click();
					objOrderEnquiryPage.deliverydatecombination(objOrderEnquiryObjects,driver);		
					objOrderEnquiryPage.advSearchdetails(objOrderEnquiryObjects,StoreNo,driver);
				}
				
				waitFor(1);
				log.info("-----------------Logout from Application------------------");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				status.assertAll();
			}
			
			//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Creating Manual Preq orders for produce/Non produce of Warehouse/Vendor supplied in browser")
			public void orderCreation() throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+15;}
				TestStatus status = getTestStatus();
				navToOrderEnquiry(status);
				objOrderEnquiryPage.waitFn(driver);
				objOrderEnquiryObjects.createOrder.click();
				htmlToExtent(cName,mName,extLogger,driver, "Create ORDER page loaded successfully;;;Pass");
				//Report_AddStep("testcase","Create ORDER page loaded successfully" , "", "", "");
				List articlelist = new ArrayList();				
				List<List<Object>> DBList = new ArrayList<List<Object>>();
				
				if(objOrderEnquiryObjects.createOrder.isDisplayed())
				{
					if(StoreNo.equals("1108"))
					{
						articlelist.add(120044);
						articlelist.add(318196);
						articlelist.add(12311);
						articlelist.add(313582);
						articlelist.add(706848);
						articlelist.add(693786);
						articlelist.add(130935);
						articlelist.add(313838);
					}
					else
					{
						articlelist.add(363230);
						articlelist.add(379011);
						articlelist.add(403624);
						articlelist.add(907224);
						articlelist.add(339096);
						articlelist.add(901700);
						articlelist.add(908021);
						articlelist.add(759122);
					}
					for(int i=0;i<=7;i++)
					{
						List DB = new ArrayList();
						int art = (int) articlelist.get(i);
						String art1=""+art;
						String SOH_sql = data.getText("SOH").replace("art_no",art1);
						results = sql.executeQuery(getContext(), SOH_sql);	
						String soh = results.get(0).get(0).toString();
						soh = decimalFormat(soh);
						String OM_sql = data.getText("OM").replace("art_no",art1);					
						result_temp = sql.executeQuery(getContext(), OM_sql);
						String om = result_temp.get(0).get(0).toString();
						om = decimalFormat(om);
						DB.add(articlelist.get(i));
						DB.add(soh);
						DB.add(om);
						DBList.add(DB);						
						objOrderEnquiryPage.orderDetails(objOrderEnquiryObjects,art1,driver);
					}
					List<List<Object>> applnlist= objOrderEnquiryPage.orderCreation(objOrderEnquiryObjects,driver);
					htmlToExtent(cName,mName,extLogger,driver, "***** Comparing application value with DB - article no,SOH,OM *****;;;Pass");
					//Report_AddStep("testcase", "***** Comparing application value with DB - article no,SOH,OM *****","","", "");
					ElementContains1(cName, mName,extLogger,driver,  applnlist, DBList);
				}
				
				waitFor(1);
				log.info("-----------------Logout from Application------------------");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				status.assertAll();
			}
			
			
			//@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "Order Creation using Order On Receipt")
			public void orderOnReceipt() throws SQLException, IOException, AWTException, ParseException
			{
				if(orderEnqArtpreCount2==-1){
				OEcount=OEcount+15;}
				TestStatus status = getTestStatus();
				navToOrderEnquiry(status);
				objOrderEnquiryPage.waitFn(driver);
				objOrderEnquiryObjects.createOrder.click();
				waitFor(2);				
				objOrderEnquiryPage.delOrder(objOrderEnquiryObjects,driver);	
				waitFor(1);
				objOrderEnquiryPage.clickOnOrderEnquiry(objOrderEnquiryObjects,driver);
				objOrderEnquiryPage.waitFn(driver);
				htmlToExtent(cName,mName,extLogger,driver, "Order Enquiry Page loaded succesfully;;;Pass");
				//Report_AddStep("testcase","Order Enquiry Page loaded succesfully" , "", "", "Pass");
				objOrderEnquiryObjects.createOrder.click();
				htmlToExtent(cName,mName,extLogger,driver, "Create ORDER page loaded successfully;;;Pass");
				//Report_AddStep("testcase","Create ORDER page loaded successfully" , "", "", "");
				objOrderEnquiryObjects.orderonreceipt.click();
				htmlToExtent(cName,mName,extLogger,driver, "ORDER on receipt page loaded successfully;;;Pass");
				//Report_AddStep("testcase","ORDER on receipt page loaded successfully" , "", "", "");
				objOrderEnquiryPage.scrolldown(driver);
				
				List articlelist = new ArrayList();				
				List<List<Object>> DBList = new ArrayList<List<Object>>();
				List<List<Object>> DBList1 = new ArrayList<List<Object>>();
				if(StoreNo.equals("1108"))
				{
					articlelist.add(data.getText("SM1"));
					articlelist.add(data.getText("SM2"));
				}
				else
				{
					articlelist.add(data.getText("BWS1"));
					articlelist.add(data.getText("BWS2"));
				}
				List app = new ArrayList();
				for(int i=0;i<=1;i++)
				{
					String soh=null;
					String om=null;
					List DB = new ArrayList();
					/*int art = (int) articlelist.get(i);
					String art1=""+art;*/
					String art1=(String) articlelist.get(i);
					art1=art1.trim();
					if(i==0)
					{
						String SOH_sql = data.getText("SOH").replace("art_no",art1);
						results = sql.executeQuery(getContext(), SOH_sql);	
						if(StoreNo.equals("1108"))
						{
							soh = results.get(0).get(5).toString();
						}
						else
						{
							soh = results.get(0).get(4).toString();
						}
						soh = decimalFormat(soh);
						String OM_sql = data.getText("OM").replace("art_no",art1);					
						result_temp = sql.executeQuery(getContext(), OM_sql);
						if(StoreNo.equals("1108"))
						{
							om = result_temp.get(0).get(45).toString();
						}
						else
						{
							om = result_temp.get(0).get(64).toString();
						}
						om = decimalFormat(om);
					}
					if(i==1)
					{
						String SOH_sql = data.getText("SOH1").replace("art_no",art1);
						results = sql.executeQuery(getContext(), SOH_sql);	
						soh = results.get(0).get(0).toString();
						soh = decimalFormat(soh);
						String OM_sql = data.getText("OM1").replace("art_no",art1);					
						result_temp = sql.executeQuery(getContext(), OM_sql);
						om = result_temp.get(0).get(0).toString();
						om = decimalFormat(om);
					}	
					String a = (String) articlelist.get(i);
					DB.add(a.trim());
					DB.add(soh);
					DB.add(om);
					DBList.add(DB);						
					app = objOrderEnquiryPage.orderOnCreationDetail(objOrderEnquiryObjects, i, art1,app,driver);				
				}
				List<List<Object>> applnlist = objOrderEnquiryPage.orderOnCreationCompare(objOrderEnquiryObjects,driver);	
				htmlToExtent(cName,mName,extLogger,driver, "***** Comparing application value with DB - article no,SOH,OM *****;;;Pass");
				//Report_AddStep("testcase", "***** Comparing application value with DB - article no,SOH,OM *****","","", "");
				ElementContains1(cName, mName,extLogger,driver,  applnlist, DBList);
				objOrderEnquiryPage.scrolldown(driver);
				objOrderEnquiryObjects.submitOrder.click();
				htmlToExtent(cName,mName,extLogger,driver, "***Clicking on Submit Order***;;;Pass");
				//Report_AddStep("testcase","***Clicking on Submit Order***" , "", "", "Pass");				
				objOrderEnquiryPage.orderOnCreationOrderNo(objOrderEnquiryObjects,StoreNo,driver);
				
				int k=0;
				for (Iterator<List<Object>> it = applnlist.iterator(); it.hasNext();) 
				{
					List<Object> elem = it.next(); 					
					for(int i =0;i<elem.size();i++) 
					{
						if(elem.get(1)!=null)
						{
							elem.set(1, app.get(k).toString());								
						}
					}
					k++;
				}
				for(int i=0;i<=1;i++)
				{
					String soh=null;
					String om=null;
					List DB1 = new ArrayList();
					/*int art = (int) articlelist.get(i);
					String art1=""+art;*/
					String art1=(String) articlelist.get(i);
					art1=art1.trim();
					if(i==0)
					{
						String SOH_sql = data.getText("SOH").replace("art_no",art1);
						results = sql.executeQuery(getContext(), SOH_sql);	
						if(StoreNo.equals("1108"))
						{
							soh = results.get(0).get(5).toString();
						}
						else
						{
							soh = results.get(0).get(4).toString();
						}
						soh = decimalFormat(soh);
						String OM_sql = data.getText("OM").replace("art_no",art1);					
						result_temp = sql.executeQuery(getContext(), OM_sql);
						if(StoreNo.equals("1108"))
						{
							om = result_temp.get(0).get(45).toString();
						}
						else
						{
							om = result_temp.get(0).get(64).toString();
						}
						om = decimalFormat(om);
					}
					if(i==1)
					{
						String SOH_sql = data.getText("SOH1").replace("art_no",art1);
						results = sql.executeQuery(getContext(), SOH_sql);	
						soh = results.get(0).get(0).toString();
						soh = decimalFormat(soh);
						String OM_sql = data.getText("OM1").replace("art_no",art1);					
						result_temp = sql.executeQuery(getContext(), OM_sql);
						om = result_temp.get(0).get(0).toString();
						om = decimalFormat(om);
					}
					String a = (String) articlelist.get(i);
					DB1.add(a.trim());
					//DB1.add(articlelist.get(i));
					DB1.add(soh);
					DB1.add(om);
					DBList1.add(DB1);				
				}
				htmlToExtent(cName,mName,extLogger,driver, "***** Comparing application value with DB - article no,SOH,OM after entered received quantity is entered*****;;;Pass");
				//Report_AddStep("testcase", "***** Comparing application value with DB - article no,SOH,OM after entered received quantity is entered*****","","", "");
				ElementContains1(cName, mName,extLogger,driver,  applnlist, DBList1);
				
				
				objOrderEnquiryPage.clickOnOrderEnquiry(objOrderEnquiryObjects,driver);
				objOrderEnquiryPage.waitFn(driver);
				objOrderEnquiryObjects.createOrder.click();
				waitFor(2);				
				objOrderEnquiryPage.delOrder(objOrderEnquiryObjects,driver);	
				waitFor(1);
				
				waitFor(1);
				log.info("-----------------Logout from Application------------------");
				htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				
				status.assertAll();
				
			}
			
		/*	@Test(dependsOnMethods={"au.wow.ngbomain.tests.Sampletest.check"},description = "check whether IBT Store to Store is created")
			public void IBTCreation() throws SQLException, IOException, AWTException, ParseException
			{
				List<String> articlelist = new ArrayList();
				List<List<Object>> DBList = new ArrayList<List<Object>>();
				List<List<Object>> DBListSOH = new ArrayList<List<Object>>();
				
				TestStatus status = getTestStatus();
				navToStockTransfer(status);
				waitForJSandJQueryToLoad();
				//System.out.println("IBT page Details are loaded successfully");
				String articlesget = data.getText("articles");
				articlelist = objOrderEnquiryPage.articleSplit(articlesget);
				String Frozentemp = data.getText("FrozenTemp");
				String Chilledtemp = data.getText("ChilledTemp");
				String articleqty = data.getText("Articleqty");
				for(int i=0;i< articlelist.size();i++)
				{
					ArrayList<String> DB = new ArrayList();
					String art =  articlelist.get(i);
					String SOH_sql = data.getText("SOH").replace("art_no",art);
					results = sql.executeQuery(getContext(), SOH_sql);
					String soh;
					String pisoh;
					if(results.get(0).get(0).toString().equals("null")){
						soh = "0";
						
					}
					else{
						soh = results.get(0).get(0).toString();
						soh = decimalFormat(soh);
						
					}
					String OM_sql = data.getText("OM").replace("art_no",art);				 	
					result_temp = sql.executeQuery(getContext(), OM_sql);
					String om = result_temp.get(0).get(0).toString();
					om = decimalFormat(om);
					String Str = ""+articlelist.get(i)+":"+soh+":"+om;
					DBList.addAll(StringToListCreation(Str));
						
				}
				String msg = objOrderEnquiryPage.IBTCreationflow(objOrderEnquiryObjects, articlelist, Frozentemp, Chilledtemp, DBList, articleqty);
				if(msg.equals("STATUS")){
				for(int i=0;i< articlelist.size();i++)
				{
					ArrayList<String> DB = new ArrayList();
					String art = articlelist.get(i);
					String SOH_sql1 = data.getText("SOHCALCULATION").replace("art_no",art);
					results1 = sql.executeQuery(getContext(), SOH_sql1);	
					String sohsql = results1.get(0).get(0).toString();
					sohsql = decimalFormat(sohsql);
					String Str = sohsql;
					DBListSOH.addAll(StringToListCreation(Str));

					Integer Recvdunits = (Integer.parseInt((String) DBList.get(i).get(2))) * Integer.parseInt(articleqty);
					//System.out.println(Recvdunits);
					Integer SOHaftercreation = (Integer.parseInt((String) DBList.get(i).get(1))) - Recvdunits;

					//System.out.println(SOHaftercreation);
					if(Integer.toString(SOHaftercreation).equals(sohsql)){
						Report_AddStep("testcase","Received units of Article " +art+" is " +Recvdunits, "", "", "Pass");
						Report_AddStep("testcase","SOH Value calculated locally for article " +art+" is " +SOHaftercreation , "", "", "Pass");
						Report_AddStep("testcase","***SOH got updated properly after IBT Creation in Local DB for article "+art+" ****" ,"Calculated Value :: "+SOHaftercreation,  "DB Value :: "+sohsql, "Pass");
					}
					else{
						Report_AddStep("testcase","Received units of Article " +art+" is " +Recvdunits , "", "", "Fail");
						Report_AddStep("testcase","SOH Value calculated locally for article " +art+" is " +SOHaftercreation, "", "", "Fail");
						Report_AddStep("testcase","***SOH was not updated properly after IBT Creation in Local DB for article "+art+" ****" , "Calculated Value :: "+SOHaftercreation,  "DB Value :: "+sohsql, "Fail");
					}
				}
					htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
				waitForJSandJQueryToLoad();
				}
				else{
					htmlToExtent(cName,mName,extLogger,driver,loginPage.logoutFromAppl(orderEnqArtScenarios, orderEnqArttestname,driver));
					waitForJSandJQueryToLoad();	
				}
			}*/
			
			/*public void navToStockTransfer(TestStatus status) throws IOException, AWTException {
				log.info("---------------Login into Application--------------------");
				Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
				loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
				if(System.getProperty("store")==null){
					StoreNo = getContext().getStringProperty("store");
					Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("store"),"","", "Pass");
					//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
					objOrderEnquiryPage = loginPage.navToStockTransfer(getContext().getStringProperty("store"));
				}else{
					storeprop.getStoreDetails(System.getProperty("store"));
					//System.out.println(store);
					StoreNo = store;
					Report_AddStep("testcase", "Login with the Store : " + store,"","", "Pass");
					//articleLookUpPage = loginPage.navToArticlLookUp(store);
					objOrderEnquiryPage = loginPage.navToStockTransfer(store);
				}

				log.info("-------------Navigate to Stock Transfer Page------------");
				Report_AddStep("testcase", "----------------Navigate to Stock Transfer Page--------------------","","", "Pass");
				objOrderEnquiryPage.clickOnstockTransfer(objOrderEnquiryObjects);
			}*/
			
			public void navToOrderEnquiry(TestStatus status) throws IOException, AWTException 
			{
				log.info("---------------Login into Application--------------------");
				htmlToExtent(cName,mName,extLogger,driver, "---------------Login into Application--------------------;;;Pass");
				//Report_AddStep("testcase", "---------------Login into Application--------------------","","", "Pass");
				loginPage = new WoWLoginPage().createPage(driver, getContext(), log, status, data, WoWLoginPage.class);
				if(System.getProperty("store")==null){
					StoreNo = getContext().getStringProperty("store");
					htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + getContext().getStringProperty("store")+";;;Pass");
					//Report_AddStep("testcase", "Login with the Store : " + getContext().getStringProperty("store"),"","", "Pass");
					//articleLookUpPage = loginPage.navToArticlLookUp(getContext().getStringProperty("store"));
					objOrderEnquiryPage = loginPage.navToOrderEnquiry(getContext().getStringProperty("store"),driver);
				}else{
					storeprop.getStoreDetails(System.getProperty("store"));
					//System.out.println(store);
					StoreNo = store;
					htmlToExtent(cName,mName,extLogger,driver, "Login with the Store : " + store+";;;Pass");
					//Report_AddStep("testcase", "Login with the Store : " + store,"","", "Pass");
					//articleLookUpPage = loginPage.navToArticlLookUp(store);
					objOrderEnquiryPage = loginPage.navToOrderEnquiry(store,driver);
				}
					
				log.info("-------------Navigate to Order Enquiry Page------------");
				htmlToExtent(cName,mName,extLogger,driver, "----------------Navigate to Order Enquiry Page--------------------;;;Pass");
				//Report_AddStep("testcase", "----------------Navigate to Order Enquiry Page--------------------","","", "Pass");
				objOrderEnquiryPage.clickOnOrderEnquiry(objOrderEnquiryObjects,driver);
			}
			
			@BeforeMethod(alwaysRun=true)
			public void setUp(Method m9,ITestContext testcontext) throws IOException, InterruptedException{	
				waitFor(2);
				 mName=m9.getName().toString().trim();			
	    			if(!methodList.contains(m9.getName().toString().trim())){
	    			methodList.add(m9.getName().toString().trim());
	    			extLogger = extReport.startTest(m9.getName().toString().trim());
	    			}
				initializeTestcontext();
				System.out.println("test1 - beforemethod");
				//isExceptionCaptured=false;
				log.info("Loading Testdata for the test case: " + m9.getName().toString());
				data.getTCNameFromChildren(m9.getName().toString().trim());
				if(isFirstTest){
					driver=createDriver(TestContext.getStringProperty("baseURL"), TestContext.getStringProperty("browser"), cName, mName, extLogger,driver);
				}else{
					String title = driver.getCurrentUrl();
					if(title.contains("logginOut"))
					{
						driver.navigate().refresh();
						TimeUnit.SECONDS.sleep(5);
					}else{
						driver.navigate().refresh();
						TimeUnit.SECONDS.sleep(5);
						if(driver.findElements(By.xpath("//*[@class='homeLink']")).size()>0)
						{
							if(driver.findElement(By.xpath("//*[@class='homeLink']")).isDisplayed()){
								WebElement  home = driver.findElement(By.xpath("//*[@class='homeLink']"));
								scrolltoElement(home,driver);
								home.click();
								TimeUnit.SECONDS.sleep(5);
								loginPage.Logout(RoutinesArtScenarios, RoutinesArttestname, driver);
								driver.navigate().refresh();
								TimeUnit.SECONDS.sleep(5);}
						}
					}
				}
					isFirstTest=false;
				
				//driver=createDriver(getContext().getStringProperty("baseURL"), getContext().getStringProperty("browser"));
				setDriver(driver);
				testcontext.setAttribute("WebDriver", driver);
				testcontext.setAttribute("Customreports", this.customreport);
				customreport.startTest(m9.getName().toString());
				initializeTestStatus();
				reportPath = new File(getContext().getStringProperty("reportPath"));
				orderEnqArttestname = m9.getName().toString().trim();
				orderEnqArttestdesc = m9.getAnnotation(Test.class).description();
				htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Docker run - "+getContext().getStringProperty("isDocketRun")+"</h4></i></b>;;;Info");
				objEnhancedArticleLookup = PageFactory.initElements(this.driver, EnhancedArticleLookUpObjects.class);
				objEnhancedarticleLookUpPage = PageFactory.initElements(this.driver, EnhancedArticleLookUpPage.class);
				objOrderEnquiryObjects = PageFactory.initElements(this.driver, ReceivingOrderObjects.class);
				objOrderEnquiryPage = PageFactory.initElements(this.driver, ReceivingOrderPage.class);
				//objInStoreDisplayPromotionsObjects = PageFactory.initElements(this.driver, InStoreDisplayPromotionsObjects.class);
				BaseObj = PageFactory.initElements(this.driver, BasePage.class);
				common = PageFactory.initElements(this.driver, CommonFunctions.class);
				storeprop = PageFactory.initElements(this.driver, StoreProperties.class);				
			}
			
			@BeforeClass
			public void loadXMLFile(){	
				System.out.println("test1 - Beforeclass");
				data = new XMLDataReader(log);
				customreport=new CustomExtentReports();
				log.info("Loading data for the class: " );
				data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\NGBO\\orderEnquiry.xml");
				customreport.createExtentReport();
				cName=this.getClass().getSimpleName();
				reportPath = new File(TestContext.getStringProperty("reportPath"));			
				extReport = new ExtentReports(TestContext.getStringProperty("reportPath") +"\\"+this.getClass().getSimpleName()+".html");
				classList.add(this.getClass().getSimpleName());
			}
			
			
			
			@AfterClass(alwaysRun=true)
			public void tearDown() throws IOException, ParseException{
				waitFor(1);
				System.out.println("afterclass");
				sceCtMap.put(cName+"_totalCt", methodList.size());
				sceCtMap.put(cName+"_passCt", methodList.size() - extentList.get(cName).size());
				sceCtMap.put(cName+"_failCt", extentList.get(cName).size());
				tcCt.put(this.getClass().getSimpleName().toString(), OEcount);
				//System.out.println(extentList);
				//System.out.println(methodList);
	            extReport.endTest(extLogger);
				extReport.flush();
				removeDriver();
				closeDriver(driver);
				
				waitFor(1);
				moduleName.put("Modules", orderEnqArtModules);
				waitFor(1);
				Date ppModEnd2 = new Date();
				DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				orderEnqArtenddateex = dateFormat.format(ppModEnd2);

				//System.out.println(orderEnqArtenddateex);
				waitFor(2);
				
				int OEArtM=OEcount;
				orderEnqArtMC=""+OEArtM;
			}
			
			@AfterMethod(alwaysRun=true)
			protected void flushReports(ITestResult result9, Method m9) throws IOException, ParseException {
				System.out.println("AffterMethod");
				extReport.endTest(extLogger);
				extReport.flush();
				try{
					if(result9.getAttribute("isFail").equals("true")&& !isExceptionCaptured){
						htmlToExtent(cName,mName,extLogger,driver,"Iteration terminated due to error;;;FAIL");	
						result9.removeAttribute("isFail");
					}}catch(Exception e ){
						//System.out.println();
					
					}

			/*	waitFor(1);
				Date ppMEndDate1 = new Date();
				DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				orderEnqArtMEndDate = dateFormat.format(ppMEndDate1);
				//System.out.println(orderEnqArtMEndDate); // 12/01/2011 4:48:16 PM
				String EnhancedArtTime = orderEnqArttestdesc +";"+ orderEnqArtStartdat +";" + orderEnqArtMEndDate;

				orderEnqArtTime.put(orderEnqArttestname, EnhancedArtTime);
				//Report_AddStep("testcase", "Running Completed Status","","", getResultStatusName(result.getStatus()));
				waitFor(4);
				closeDriver(driver);*/
				customreport.getExtentReport().endTest(customreport.getExtentTest());
				customreport.getExtentReport().flush();
				waitFor(1);
				if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info")){
					int cnt = orderEnqArtpreCount2+1;
					htmlToExtent(cName,mName,extLogger,driver,"<b><i><h4>Completed Status : Iteration - "+ cnt +"</h4></i></b>;;;Warning");
					orderEnqArtpreCount2++;
				}
				
				/*if(getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail")|| getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info")){
					int cnt = orderEnqArtpreCount2+1;
					htmlToExtent(cName,mName,extLogger,driver,"Completed Status : Iteration - "+ cnt +";;;Fail");
					orderEnqArtpreCount2++;
				}
				waitFor(1);
				if((getResultStatusName(result9.getStatus()).equalsIgnoreCase("Fail") || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Info"))&& orderEnqArtpreCount2!=reCount){
					waitFor(1);
					orderEnqArtTime.removeAll(orderEnqArttestname);
					waitFor(1);
					orderEnqArtScenarios.removeAll(orderEnqArttestname);
				}
				waitFor(1);*/
				if(orderEnqArtpreCount2==reCount || getResultStatusName(result9.getStatus()).equalsIgnoreCase("Pass")){
					orderEnqArtpreCount2=-1;
				}
				waitFor(1);
				
			}
			
}
